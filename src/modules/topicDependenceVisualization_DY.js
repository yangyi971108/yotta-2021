/*eslint-disable*/ 
!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.topicDependenceVisualization=n():t.topicDependenceVisualization=n()}(window,(function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=11)}([function(t,n,e){"use strict";var r=e(2),i=Object.prototype.toString;function o(t){return"[object Array]"===i.call(t)}function a(t){return void 0===t}function u(t){return null!==t&&"object"==typeof t}function c(t){return"[object Function]"===i.call(t)}function f(t,n){if(null!=t)if("object"!=typeof t&&(t=[t]),o(t))for(var e=0,r=t.length;e<r;e++)n.call(null,t[e],e,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&n.call(null,t[i],i,t)}t.exports={isArray:o,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:function(t){return null!==t&&!a(t)&&null!==t.constructor&&!a(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:u,isUndefined:a,isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:c,isStream:function(t){return u(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:f,merge:function t(){var n={};function e(e,r){"object"==typeof n[r]&&"object"==typeof e?n[r]=t(n[r],e):n[r]=e}for(var r=0,i=arguments.length;r<i;r++)f(arguments[r],e);return n},deepMerge:function t(){var n={};function e(e,r){"object"==typeof n[r]&&"object"==typeof e?n[r]=t(n[r],e):n[r]="object"==typeof e?t({},e):e}for(var r=0,i=arguments.length;r<i;r++)f(arguments[r],e);return n},extend:function(t,n,e){return f(n,(function(n,i){t[i]=e&&"function"==typeof n?r(n,e):n})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,n,e){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),i=0;for(n=0;n<e;n++)for(var o=arguments[n],a=0,u=o.length;a<u;a++,i++)r[i]=o[a];return r};function i(t){var n={};for(var e in t)if(0!==t[e].length)for(var r=0,i=t[e];r<i.length;r++){n[l=i[r]]?n[l]++:n[l]=1}var o=[];for(var a in n)1===n[a]&&0===t[a].length&&o.push(parseInt(a));var u={},c={};for(var e in t)if(0!==t[e].length){u[e]=[];for(var f=0,s=t[e];f<s.length;f++){var l=s[f];-1===o.indexOf(l)?(u[e]?u[e].push(l):u[e]=[l],u.hasOwnProperty(l)||(u[l]=[])):c[e]?c[e].push(l):c[e]=[l]}}return{filteredRelations:u,leafRelations:c}}function o(t){var n=0;for(var e in t)n+=t[e];return n}function a(t,n){var e={};for(var r in n)if(0!==n[r].length)for(var i=0,o=n[r];i<o.length;i++){e[r+","+o[i]]=0}for(var a in e)for(var u=a.split(",").map((function(t){return parseInt(t)})),s=u[0],l=u[1],h=t.indexOf(s),d=t.indexOf(l),p=h<d?h:d,g=h<d?d:h,y=0,v=Object.keys(e);y<v.length;y++){var m=v[y];if(a!==m){var b=m.split(",").map((function(t){return parseInt(t)})),_=b[0],x=b[1],w=t.indexOf(_),M=t.indexOf(x);(c(p,g,w)&&f(p,g,M)||f(p,g,w)&&c(p,g,M))&&e[a]++}}return e}function u(t,n,e,r,i,o){return[{x:t+e*(r-t)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i)),y:n+e*(i-n)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i))},{x:r-o*(r-t)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i)),y:i-o*(i-n)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i))}]}function c(t,n,e){return e<n&&e>t}function f(t,n,e){return e>n||e<t}function s(t,n,e,r,i){if(void 0===i){for(var o=r.length,a=.8*n*Math.sin(Math.PI/o)/(1+Math.sin(Math.PI/o)),c=2*Math.PI/o,f=[],s=[],l={},h=0;h<o;h++){var d={r:a,id:r[h],cx:t.x+(n-a)*Math.sin(c*h),cy:t.y-(n-a)*Math.cos(c*h)};l[r[h]]=[d.cx,d.cy,a],f.push(d)}for(var p in e)if(0!==e[p].length)for(var g=0,y=e[p];g<y.length;g++){var v=y[g];d={start:parseInt(p),end:parseInt(v),path:u(l[p][0],l[p][1],l[p][2],l[v][0],l[v][1],l[v][2])};s.push(d)}return{nodes:f,edges:s}}o=r.length,a=.8*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1)));var m=1.6*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1)));for(c=2*Math.PI/(o+1),f=[],s=[],l={},h=0;h<o;h++)if(r.indexOf(i)>h){d={r:a,id:r[h],cx:t.x+(n-a)*Math.sin(c*h),cy:t.y-(n-a)*Math.cos(c*h)};l[r[h]]=[d.cx,d.cy,a],f.push(d)}else if(r.indexOf(i)===h){d={r:m,id:r[h],cx:t.x+(n-m)*Math.sin(c*h+c/2),cy:t.y-(n-m)*Math.cos(c*h+c/2)};l[r[h]]=[d.cx,d.cy,m],f.push(d)}else{d={r:a,id:r[h],cx:t.x+(n-a)*Math.sin(c*h+c),cy:t.y-(n-a)*Math.cos(c*h+c)};l[r[h]]=[d.cx,d.cy,a],f.push(d)}for(var p in e)if(0!==e[p].length)for(var b=0,_=e[p];b<_.length;b++){v=_[b],d={start:parseInt(p),end:parseInt(v),path:u(l[p][0],l[p][1],l[p][2],l[v][0],l[v][1],l[v][2])};s.push(d)}return{nodes:f,edges:s}}function l(t,n,e,r,i,o,a){var u,c,f,s,l=(e-2*o)/5*3,h=(e-2*o)/5*4;return t<r&&Math.abs((n-i)/(t-r))<=.8?(u=t+l,f=n-(n-i)/(r-t)*l,c=t+(r-t)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):t>r&&Math.abs((n-i)/(t-r))<=.8?(u=t-l,f=n-(n-i)/(t-r)*l,c=t-(t-r)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):t<r&&Math.abs((n-i)/(t-r))>.8?n<i?(f=n+h,u=t+h/(i-n)*(r-t),c=t+(r-t)/(e-o)*(e-2*o),s=n+(i-n)/(e-o)*(e-2*o)):(f=n-h,u=t+h/(n-i)*(r-t),c=t+(r-t)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):t>r&&Math.abs((n-i)/(t-r))>.8?n<i?(f=n+h,u=t-h/(i-n)*(t-r),c=t-(t-r)/(e-o)*(e-2*o),s=n+(i-n)/(e-o)*(e-2*o)):(f=n-h,u=t-h/(n-i)*(t-r),c=t-(t-r)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):(u=t,c=t,n<i?(f=n+h,s=n+e-2*o):(f=n-h,s=n-e+2*o)),a?[{x:u,y:f},{x:c,y:s}]:[{x:c,y:s},{x:u,y:f}]}Object.defineProperty(n,"__esModule",{value:!0}),n.calNodeWithSelectedOutComCrossCom=n.calNodeWithSelecteOutTopicCrossCom=n.calNodeWithSelectedInTopicCrossCom=n.calNodeWithSelectedInComCrossCom=n.calcEdgeWithSelectedComCrossCom=n.calcEdgeWithSelectedNodeCrossCom=n.calcLinkSourceTargetBetweenRectAndCircle=n.calcEdgeWithSelectedNode=n.calcCircleLayoutSecondLayer1=n.calcCircleLayoutSecondLayer=n.calcCircleLayoutWithoutReduceCrossing=n.calcCircleLayout=n.calcLinkSourceTargetBetweenCircles=void 0,n.calcLinkSourceTargetBetweenCircles=u,n.calcCircleLayout=function(t,n,e,u){if(1===Object.keys(e).length&&0===e[Object.keys(e)[0]].length)return{sequence:Object.keys(e),nodes:[],edges:[]};for(var c=[],f=i(e),l=f.filteredRelations,h=f.leafRelations;0!==Object.keys(h).length;){if(1===Object.keys(l).length){c.push(Object.assign({},h));break}c.push(Object.assign({},h));var d=i(l);l=d.filteredRelations,h=d.leafRelations}var p=function(t){var n,e,i=Array.prototype.concat([],Object.keys(t).map((function(t){return parseInt(t)}))),u={};for(var c in t)if(0!==t[c].length)for(var f=0,s=t[c];f<s.length;f++){var l=s[f];u[c]?u[c]++:u[c]=1,u[l]?u[l]+=.5:u[l]=.5}for(var h=1/0,d=a(i,t),p=Object.keys(d).reduce((function(t,n){return t?d[t]<d[n]?n:t:n}),""),g=o(d),y=r(i);g<h&&g>0;){c=void 0,l=void 0;if(1===d[p]){var v=[];for(var m in d)1===d[m]&&v.push(m.split(",").map((function(t){return parseInt(t)})));for(var b=1/0,_=-1,x=0;x<v.length;x++)for(var w=0,M=v[x];w<M.length;w++){var k=M[w];u[k]<b&&(_=x,b=u[k])}c=(n=v[_])[0],l=n[1]}else c=(e=p.split(",").map((function(t){return parseInt(t)})))[0],l=e[1];if(u[c]<u[l]?(i.splice(i.indexOf(c),1),i.splice(i.indexOf(l),0,c)):(i.splice(i.indexOf(l),1),i.splice(i.indexOf(c),0,l)),d=a(i,t),p=Object.keys(d).reduce((function(t,n){return t?d[t]<d[n]?n:t:n}),""),g<o(d))break;h=g,g=o(d),y=r(i)}return y}(l);console.log(p);for(var g=[p];c.length>0;){var y=Array.of.apply(Array,g[g.length-1]),v=c.pop();for(var m in v)for(var b=0,_=v[m];b<_.length;b++){var x=_[b];y.splice(y.indexOf(parseInt(m))+1,0,x)}g.push(y)}p=g[g.length-1];var w={};for(var m in e)if(0!==e[m].length)for(var M=0,k=e[m];M<k.length;M++){x=k[M];w[m]?w[m]++:w[m]=1,w[x]?w[x]++:w[x]=1}if(void 0===u){var A=[];for(var m in e){var C=!0;for(var S in e)if(S!==m)for(var T=0,E=e[S];T<E.length;T++){x=E[T];parseInt(m)===x&&(C=!1)}C&&A.push(parseInt(m))}if(A.length>0){var N=A.reduce((function(t,n){return t&&w[t]>w[n]?t:n})),P=p.indexOf(N);p=p.slice(P).concat(p.slice(0,P))}}else p=p.slice(p.indexOf(u)).concat(p.slice(0,p.indexOf(u)));return Object.assign({sequence:p},s(t,n,e,p,void 0))},n.calcCircleLayoutWithoutReduceCrossing=s,n.calcCircleLayoutSecondLayer=function(t,n,e,r,i){for(var o=r.length,a=.4*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1))),u=2*Math.PI/(o+1),c=[],f={},s=0;s<o;s++)if(r.indexOf(i)>s){var l={r:a,id:r[s],cx:t.x+(n-a)*Math.sin(u*s),cy:t.y-(n-a)*Math.cos(u*s)};f[r[s]]=[l.cx,l.cy,a],c.push(l)}else if(r.indexOf(i)===s){l={r:.9*(n-2*a),id:r[s],cx:t.x,cy:t.y};f[r[s]]=[l.cx,l.cy,l.r],c.push(l)}else{l={r:a,id:r[s],cx:t.x+(n-a)*Math.sin(u*s+u),cy:t.y-(n-a)*Math.cos(u*s+u)};f[r[s]]=[l.cx,l.cy,a],c.push(l)}return{nodes:c,edges:[]}},n.calcCircleLayoutSecondLayer1=function(t,n,e,r,i){for(var o=r.length,a=.4*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1))),u=(Math.PI,[]),c=o/2,f={},s=0;s<o;s++)if(r.indexOf(i)===s){var l={r:n,id:r[s],cx:t.x,cy:t.y};f[r[s]]=[l.cx,l.cy,l.r],u.push(l)}else if(s<c){l={r:a,id:r[s],cx:t.x-n+(2*s+1)*a+2*n/(2*c-.01)*s,cy:t.y-(n-a)};f[r[s]]=[l.cx,l.cy,a]}else{l={r:a,id:r[s],cx:t.x-n+(2*(s-c-1)+1)*a+2*n/(2*c-.01)*(s-c),cy:t.y+(n-a)};f[r[s]]=[l.cx,l.cy,a]}return{nodes:u,edges:[]}},n.calcEdgeWithSelectedNode=function(t,n,e,r,i){var o=[];for(var a in e)0!==e[a].length&&-1!==e[a].indexOf(i)&&o.push(parseInt(a));for(var u=[],c=function(e){var i=r.filter((function(t){return t.id===e}))[0];u.push(l(t.x,t.y,n,i.cx,i.cy,i.r,!1))},f=0,s=o;f<s.length;f++){c(s[f])}for(var h=function(e){var i=r.filter((function(t){return t.id===e}))[0];u.push(l(t.x,t.y,n,i.cx,i.cy,i.r,!0))},d=0,p=e[i];d<p.length;d++){h(p[d])}return u},n.calcLinkSourceTargetBetweenRectAndCircle=l,n.calcEdgeWithSelectedNodeCrossCom=function(t,n,e,r,i,o){for(var a=[],c=function(r){if(r[0]===e)if(a.filter((function(t){return t.end===i[r[1]]})).length>0)for(var c=0,f=a;c<f.length;c++){(d=f[c]).end===i[r[1]]&&d.topics.push(r[1])}else{var s=o.filter((function(t){return t.id===i[r[1]]}))[0];a.push({start:i[e],end:i[r[1]],topics:[r[1]],path:u(t.x,t.y,n,s.cx,s.cy,s.r)})}if(r[1]===e)if(a.filter((function(t){return t.start===i[r[0]]})).length>0)for(var l=0,h=a;l<h.length;l++){var d;(d=h[l]).start===i[r[0]]&&d.topics.push(r[0])}else{s=o.filter((function(t){return t.id===i[r[0]]}))[0];a.push({start:i[r[0]],end:i[e],topics:[r[0]],path:u(s.cx,s.cy,s.r,t.x,t.y,n)})}},f=0,s=r;f<s.length;f++){c(s[f])}return a},n.calcEdgeWithSelectedComCrossCom=function(t,n,e){var r=[];for(var i in n)if(parseInt(i)===t)for(var o=0,a=n[i];o<a.length;o++){var c=a[o];r.push([t,c])}else for(var f=0,s=n[i];f<s.length;f++){(c=s[f])===t&&r.push([parseInt(i),t])}for(var l=[],h=function(t){var n=e.filter((function(n){return n.id===t[0]}))[0],r=e.filter((function(n){return n.id===t[1]}))[0];l.push({start:t[0],end:t[1],path:u(n.cx,n.cy,n.r,r.cx,r.cy,r.r)})},d=0,p=r;d<p.length;d++){h(p[d])}return l},n.calNodeWithSelectedInComCrossCom=function(t,n,e){var r=[],i=[];for(var o in n)if(parseInt(o)===t)for(var a=0,u=n[o];a<u.length;a++){var c=u[a];i.push([c,e[c]])}else for(var f=0,s=n[o];f<s.length;f++){(c=s[f])===t&&r.push([parseInt(o),e[parseInt(o)]])}return r},n.calNodeWithSelectedInTopicCrossCom=function(t,n,e,r){var i=[],o=[];for(var a in e[t])if(parseInt(a)===n)for(var u=0,c=e[t][a];u<c.length;u++){var f=c[u];o.push([f,r[f]])}else for(var s=0,l=e[t][a];s<l.length;s++){(f=l[s])===n&&i.push([parseInt(a),r[parseInt(a)]])}return console.log("InTopic",i),console.log("OutTopic",o),i},n.calNodeWithSelecteOutTopicCrossCom=function(t,n,e,r){var i=[],o=[];for(var a in e[t])if(parseInt(a)===n)for(var u=0,c=e[t][a];u<c.length;u++){var f=c[u];o.push([f,r[f]])}else for(var s=0,l=e[t][a];s<l.length;s++){(f=l[s])===n&&i.push([parseInt(a),r[parseInt(a)]])}return o},n.calNodeWithSelectedOutComCrossCom=function(t,n,e){var r=[];for(var i in n)if(parseInt(i)===t)for(var o=0,a=n[i];o<a.length;o++){var u=a[o];r.push([u,e[u]])}return r}},function(t,n,e){"use strict";t.exports=function(t,n){return function(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];return t.apply(n,e)}}},function(t,n,e){"use strict";var r=e(0);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,n,e){if(!n)return t;var o;if(e)o=e(n);else if(r.isURLSearchParams(n))o=n.toString();else{var a=[];r.forEach(n,(function(t,n){null!=t&&(r.isArray(t)?n+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),a.push(i(n)+"="+i(t))})))})),o=a.join("&")}if(o){var u=t.indexOf("#");-1!==u&&(t=t.slice(0,u)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}},function(t,n,e){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,n,e){"use strict";(function(n){var r=e(0),i=e(20),o={"Content-Type":"application/x-www-form-urlencoded"};function a(t,n){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=n)}var u,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==n&&"[object process]"===Object.prototype.toString.call(n))&&(u=e(6)),u),transformRequest:[function(t,n){return i(n,"Accept"),i(n,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(a(n,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(a(n,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){c.headers[t]=r.merge(o)})),t.exports=c}).call(this,e(19))},function(t,n,e){"use strict";var r=e(0),i=e(21),o=e(3),a=e(23),u=e(26),c=e(27),f=e(7);t.exports=function(t){return new Promise((function(n,s){var l=t.data,h=t.headers;r.isFormData(l)&&delete h["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",g=t.auth.password||"";h.Authorization="Basic "+btoa(p+":"+g)}var y=a(t.baseURL,t.url);if(d.open(t.method.toUpperCase(),o(y,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:e,config:t,request:d};i(n,s,r),d=null}},d.onabort=function(){d&&(s(f("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){s(f("Network Error",t,null,d)),d=null},d.ontimeout=function(){var n="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(n=t.timeoutErrorMessage),s(f(n,t,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=e(28),m=(t.withCredentials||c(y))&&t.xsrfCookieName?v.read(t.xsrfCookieName):void 0;m&&(h[t.xsrfHeaderName]=m)}if("setRequestHeader"in d&&r.forEach(h,(function(t,n){void 0===l&&"content-type"===n.toLowerCase()?delete h[n]:d.setRequestHeader(n,t)})),r.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),t.responseType)try{d.responseType=t.responseType}catch(n){if("json"!==t.responseType)throw n}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),s(t),d=null)})),void 0===l&&(l=null),d.send(l)}))}},function(t,n,e){"use strict";var r=e(22);t.exports=function(t,n,e,i,o){var a=new Error(t);return r(a,n,e,i,o)}},function(t,n,e){"use strict";var r=e(0);t.exports=function(t,n){n=n||{};var e={},i=["url","method","params","data"],o=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(i,(function(t){void 0!==n[t]&&(e[t]=n[t])})),r.forEach(o,(function(i){r.isObject(n[i])?e[i]=r.deepMerge(t[i],n[i]):void 0!==n[i]?e[i]=n[i]:r.isObject(t[i])?e[i]=r.deepMerge(t[i]):void 0!==t[i]&&(e[i]=t[i])})),r.forEach(a,(function(r){void 0!==n[r]?e[r]=n[r]:void 0!==t[r]&&(e[r]=t[r])}));var u=i.concat(o).concat(a),c=Object.keys(n).filter((function(t){return-1===u.indexOf(t)}));return r.forEach(c,(function(r){void 0!==n[r]?e[r]=n[r]:void 0!==t[r]&&(e[r]=t[r])})),e}},function(t,n,e){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.gaozhongshuxue=void 0,n.gaozhongshuxue={topics:{104869:"数据结构",104870:"逻辑结构",104871:"存储过程",104873:"顺序存储",104874:"链式存储",104875:"索引存储",104876:"散列存储",104877:"线性表",104878:"链表",104879:"循环链表",104880:"双链表",104881:"可变长数组",104882:"数组",104883:"朱迪矩阵",104884:"队列",104885:"堆栈",104886:"顺序栈",104887:"链栈",104888:"顺序队列",104889:"链队",104890:"树",104891:"森林",104892:"伸展树",104894:"二叉树",104895:"替罪羊树",104896:"2-3树",104897:"线索二叉树",104898:"二叉查找树",104899:"AVL树",104900:"树旋转",104901:"哈夫曼树",104902:"哈夫曼编码",104903:"遍历",104904:"图",104905:"无向图",104906:"有向图",104907:"平面图 (图论)",104908:"完全图",104909:"佩特森图",104910:"哈密顿图",104911:"连通图",104912:"强连通图",104913:"连通分量",104914:"邻接矩阵",104915:"邻接表",104916:"深度优先遍历",104917:"广度优先遍历",104918:"生成树",104919:"最小生成树",104920:"prim算法",104921:"Kruskal算法",104922:"单源最短路径",104923:"Dijkstra算法",104924:"拓扑排序",104925:"AOV网",104926:"查找",104927:"查找表",104928:"平均查找长度",104929:"顺序查找",104930:"折半查找",104931:"分块查找",104932:"B树",104933:"B+树",104934:"哈希表",104935:"散列查找",104936:"完美散列",104937:"哈希函数",104938:"冲突处理",104939:"开放定址法",104940:"链地址法",104941:"红黑树",104944:"内部排序",104946:"插入排序",104947:"Shell排序",104948:"冒泡排序",104949:"快速排序",104950:"选择排序",104951:"堆排序",104952:"归并排序",104953:"基数排序","-1":"(start)"},resultRelations:{104869:[104926,104871],104871:[104944,104870,104873,104876,104875,104874],104877:[104885,104878],104878:[104880,104879],104882:[104877,104890,104883,104881],104884:[104889,104888],104885:[104884,104887,104886],104890:[104904,104932,104896,104891,104894],104894:[104902,104898,104901,104900,104897],104898:[104899,104892,104895,104941],104903:[104917,104916],104904:[104914,104915,104905,104906,104910,104903,104909],104905:[104918,104907,104913,104911,104908],104906:[104912,104922,104925],104918:[104919],104919:[104920,104921],104922:[104923],104925:[104924],104926:[104927,104934],104927:[104935,104931,104930,104929,104928],104932:[104933],104934:[104938,104937,104936],104938:[104940,104939],104944:[104953,104952,104951,104950,104949,104948,104947,104946],"-1":[104882,104869]},graph:{0:{104927:[104935,104931,104930,104929,104928]},1:{104869:[104926],104882:[104877,104890,104883,104881],104890:[104932,104896,104891],104932:[104933],"-1":[104882,104869]},2:{104903:[104917,104916],104904:[104914,104915,104910,104903,104909]},3:{104894:[104902,104898,104901,104900,104897],104898:[104899,104892,104895,104941]},4:{104905:[104907,104913,104911,104908]},5:{104906:[104912,104922,104925],104922:[104923],104925:[104924]},6:{104934:[104938,104937,104936],104938:[104940,104939]},7:{104884:[104889,104888],104885:[104884,104887,104886]},8:{104878:[104880,104879]},9:{104871:[104870,104873,104876,104875,104874]},10:{104944:[104953,104952,104951,104950,104949,104948,104947,104946]},11:{104918:[104919],104919:[104920,104921]}},topicId2Community:{104869:1,104870:9,104871:9,104873:9,104874:9,104875:9,104876:9,104877:1,104878:8,104879:8,104880:8,104881:1,104882:1,104883:1,104884:7,104885:7,104886:7,104887:7,104888:7,104889:7,104890:1,104891:1,104892:3,104894:3,104895:3,104896:1,104897:3,104898:3,104899:3,104900:3,104901:3,104902:3,104903:2,104904:2,104905:4,104906:5,104907:4,104908:4,104909:2,104910:2,104911:4,104912:5,104913:4,104914:2,104915:2,104916:2,104917:2,104918:11,104919:11,104920:11,104921:11,104922:5,104923:5,104924:5,104925:5,104926:1,104927:0,104928:0,104929:0,104930:0,104931:0,104932:1,104933:1,104934:6,104935:0,104936:6,104937:6,104938:6,104939:6,104940:6,104941:3,104944:10,104946:10,104947:10,104948:10,104949:10,104950:10,104951:10,104952:10,104953:10,"-1":1},relationCrossCommunity:[[104890,104904],[104890,104894],[104904,104905],[104904,104906],[104926,104927],[104926,104934],[104877,104885],[104877,104878],[104871,104944],[104869,104871],[104905,104918]],communityRelation:{1:[2,3,0,6,7,8,9],2:[4,5],4:[11],9:[10]}}},function(t,n,e){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,n,e,r){void 0===r&&(r=e),Object.defineProperty(t,r,{enumerable:!0,get:function(){return n[e]}})}:function(t,n,e,r){void 0===r&&(r=e),t[r]=n[e]}),i=this&&this.__exportStar||function(t,n){for(var e in t)"default"===e||n.hasOwnProperty(e)||r(n,t,e)};Object.defineProperty(n,"__esModule",{value:!0}),i(e(1),n),i(e(12),n),i(e(10),n)},function(t,n,e){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,n,e,r){void 0===r&&(r=e),Object.defineProperty(t,r,{enumerable:!0,get:function(){return n[e]}})}:function(t,n,e,r){void 0===r&&(r=e),t[r]=n[e]}),i=this&&this.__setModuleDefault||(Object.create?function(t,n){Object.defineProperty(t,"default",{enumerable:!0,value:n})}:function(t,n){t.default=n}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)"default"!==e&&Object.hasOwnProperty.call(t,e)&&r(n,t,e);return i(n,t),n},a=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function a(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,u)}c((r=r.apply(t,n||[])).next())}))},u=this&&this.__generator||function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0}),n.completeObj=n.judgementStringLengthWithChinese=n.drawMap=n.drawDyMap=n.link=void 0;var f=o(e(34)),s=c(e(13)),l=e(31),h=e(10),d=e(1),p=[];for(var g in l.presetPalettes)p.push(l.presetPalettes[g].slice(0,10));var y=[];for(var g in l.presetPalettes)y.push("grey");Object.keys(h.gaozhongshuxue.graph);function v(t){for(var n=0,e=0;e<t.length;e++)/[a-z0-9\*\\\|\(\)\&\^\%\$\#\@\!\,\.\?\<\>\/]/.test(t[e])?n+=.5:n+=1;return n}function m(t){var n=new Set;for(var e in t){n.add(parseInt(e));for(var r=0,i=t[e];r<i.length;r++){var o=i[r];n.add(parseInt(o))}}for(var a=0,u=Array.from(n);a<u.length;a++){t[e=u[a]]||(t[e]=[])}return t}n.link=f.line().x((function(t){return t.x})).y((function(t){return t.y})).curve(f.curveCatmullRom.alpha(.5)),n.drawDyMap=function(t,e,r,i,o,c,l,g){return void 0===o&&(o=[]),void 0===g&&(g=[]),a(this,void 0,void 0,(function(){function i(t){switch(f.select("#edgeWithTopicInCom").remove(),f.select("#edgeWithTopicCrossCom").remove(),f.select("#comPaths").remove(),f.select("#inComPaths").remove(),f.select("#learningPaths").selectAll("path").style("visibility","hidden"),r.style.visibility="hidden",C){case 0:a(t.id),C=1;break;case 1:V.com===t.id?(C=2,l(t.id)):a(t.id);break;case 2:a(t.id),C=1;break;case 3:V.com===t.id?(l(t.id),C=2):(a(t.id),C=1)}V.com=t.id}function a(t){var e=d.calcCircleLayoutWithoutReduceCrossing({x:R,y:R},R,A,W,t),r=e.nodes,i=e.edges;S.select("#com").selectAll("circle").data(r).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("display","inline"),S.select("#com2com").selectAll("path").data(i).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("display","inline").style("visibility",0!==o.length?"hidden":"visible"),S.select("#comText").selectAll("text").data(r).transition().delay(300).attr("x",(function(t){return t.cx-14*v(x[X[t.id][0]])/2})).attr("y",(function(t,n){return r[n].cy<R?t.cy-t.r-24:t.cy+t.r+24})).attr("font-size",14).attr("display","inline");for(var a=0,u=r;a<u.length;a++){for(var c=u[a],s=d.calcCircleLayoutWithoutReduceCrossing({x:c.cx,y:c.cy},c.r,w[c.id],X[c.id],void 0),l=0,h=s.nodes;l<h.length;l++){var p=h[l];G[p.id]=p}var g=document.getElementById(c.id+"nodes");f.select(g).selectAll("circle").data(s.nodes).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display","inline");var y=document.getElementById(c.id+"edges");f.select(y).selectAll("path").data(s.edges).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("stroke-width",2).attr("fill","none").attr("display","inline").style("visibility",0!==o.length?"hidden":"visible");var m=document.getElementById(c.id+"text");f.select(m).selectAll("text").data(s.nodes).transition().delay(300).attr("font-size",(function(t){var n=(2*t.r-4)/v(x[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(x[t.id]);return t.cx-v(x[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(x[t.id])>24?t.cy+12:t.cy+(t.r-2)/v(x[t.id])})).text((function(t){return x[t.id]})).attr("fill","#ffffff").attr("display","inline")}if(0!==o.length){for(var b=[],_=0;_<o.length-1;_++)b.push([o[_],o[_+1]]);S.select("#learningPaths").selectAll("path").data(b).transition().delay(300).style("visibility","visible").attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(G[t[0]].cx,G[t[0]].cy,G[t[0]].r,G[t[1]].cx,G[t[1]].cy,G[t[1]].r))}))}}function l(t){var e=d.calcCircleLayoutSecondLayer({x:R,y:R},R,A,W,t),r=e.nodes,i=(e.edges,d.calcEdgeWithSelectedComCrossCom(t,A,r));S.select("#com").selectAll("circle").data(r).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})),S.select("#com2com").selectAll("path").attr("display","none"),S.select("#com2com").selectAll("path").data(i).attr("d",(function(t){return n.link(t.path)})).attr("display","inline"),S.select("#comText").selectAll("text").data(r).transition().delay(300).attr("x",(function(t){var n=(2*t.r-4)/v(x[X[t.id][0]]);return t.cx-v(x[X[t.id][0]])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(x[X[t.id][0]])>24?t.cy+12:t.cy+(t.r-2)/v(x[X[t.id][0]])})).attr("font-size",(function(n){if(n.id===t)return 0;var e=(2*n.r-4)/v(x[X[n.id][0]]);return e>24?24:e}));for(var a={},u=0,c=r;u<c.length;u++){var s=c[u];if(s.id!==t){var l=document.getElementById(s.id+"nodes");f.select(l).selectAll("circle").attr("display","none");var h=document.getElementById(s.id+"edges");f.select(h).selectAll("path").attr("display","none");var p=document.getElementById(s.id+"text");f.select(p).selectAll("text").attr("display","none")}else{for(var g=d.calcCircleLayoutWithoutReduceCrossing({x:s.cx,y:s.cy},s.r,w[s.id],X[s.id],void 0),y=0,m=g.nodes;y<m.length;y++){var b=m[y];a[b.id]=b}l=document.getElementById(s.id+"nodes");f.select(l).selectAll("circle").data(g.nodes).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display","inline");h=document.getElementById(s.id+"edges");f.select(h).selectAll("path").data(g.edges).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("stroke-width",2).attr("fill","none").attr("display","inline");p=document.getElementById(s.id+"text");f.select(p).selectAll("text").data(g.nodes).transition().delay(300).attr("font-size",(function(t){var n=(2*t.r-4)/v(x[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(x[t.id]);return t.cx-v(x[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(x[t.id])>24?t.cy+12:t.cy+(t.r-2)/v(x[t.id])})).text((function(t){return x[t.id]})).attr("fill","#ffffff").attr("display","inline")}}if(0!==o.length){for(var _=o.map((function(t){return M[t]})),k=[],C=0;C<_.length-1;C++)k.push([_[C],_[C+1]]);k=k.filter((function(t){return t[0]!==t[1]})),S.select("#learningPaths").style("visibility","hidden"),S.append("g").attr("id","comPaths").selectAll("path").data(k).enter().append("path").transition().delay(300).attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(r.filter((function(n){return n.id===t[0]}))[0].cx,r.filter((function(n){return n.id===t[0]}))[0].cy,r.filter((function(n){return n.id===t[0]}))[0].r,r.filter((function(n){return n.id===t[1]}))[0].cx,r.filter((function(n){return n.id===t[1]}))[0].cy,r.filter((function(n){return n.id===t[1]}))[0].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)");var T=[];for(C=0;C<o.length-1;C++)-1!==Object.keys(a).map((function(t){return parseInt(t)})).indexOf(o[C])&&-1!==Object.keys(a).map((function(t){return parseInt(t)})).indexOf(o[C+1])&&T.push([o[C],o[C+1]]);S.append("g").attr("id","inComPaths").selectAll("path").data(T).enter().append("path").transition().delay(300).attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(a[t[0]].cx,a[t[0]].cy,a[t[0]].r,a[t[1]].cx,a[t[1]].cy,a[t[1]].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}}function b(t,n){if(f.select("#edgeWithTopicInCom").remove(),f.select("#edgeWithTopicCrossCom").remove(),f.select("#comPaths").remove(),f.select("#inComPaths").remove(),r.style.visibility="hidden",V.topicId=t.id,V.com=n.id,-1===t.id)return l(n.id),void(C=2);switch(C){case 0:case 1:l(n.id),C=2;break;case 2:_(t.id,n),C=3;break;case 3:_(t.id,n)}c(t.id,x[t.id])}function _(t,o){var a=d.calcCircleLayoutSecondLayer({x:R,y:R},R,A,W,o.id),u=a.nodes;a.edges;S.select("#com").selectAll("circle").data(u).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})),S.select("#com2com").selectAll("path").attr("display","none"),S.select("#comText").selectAll("text").data(u).transition().delay(300).attr("x",(function(t){var n=(2*t.r-4)/v(x[X[t.id][0]]);return t.cx-v(x[X[t.id][0]])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(x[X[t.id][0]])>24?t.cy+12:t.cy+(t.r-2)/v(x[X[t.id][0]])})).attr("font-size",(function(t){if(t.id===o.id)return 0;var n=(2*t.r-4)/v(x[X[t.id][0]]);return n>24?24:n}));for(var c=function(a){if(a.id!==o.id){var c=document.getElementById(a.id+"nodes");f.select(c).selectAll("circle").attr("display","none");var l=document.getElementById(a.id+"edges");f.select(l).selectAll("path").attr("display","none");var h=document.getElementById(a.id+"text");f.select(h).selectAll("text").attr("display","none")}else{var p=d.calcCircleLayoutSecondLayer({x:a.cx,y:a.cy},a.r,w[a.id],X[a.id],t);c=document.getElementById(a.id+"nodes");f.select(c).selectAll("circle").data(p.nodes).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display",(function(n){return n.id===t?"none":"inline"}));l=document.getElementById(a.id+"edges");f.select(l).selectAll("path").attr("display","none");h=document.getElementById(a.id+"text");f.select(h).selectAll("text").data(p.nodes).attr("font-size",(function(t){var n=(2*t.r-4)/v(x[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(x[t.id]);return t.cx-v(x[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(x[t.id])>24?t.cy+12:t.cy+(t.r-2)/v(x[t.id])})).text((function(t){return x[t.id]})).attr("fill","#ffffff").attr("display",(function(n){return n.id===t?"none":"inline"}));var g=X[a.id].length,y=.4*a.r*Math.sin(Math.PI/(g+1))/(1+Math.sin(Math.PI/(g+1)));r.style.width=(2*a.r-4*y)/5*3+"px",r.style.height=(2*a.r-4*y)/5*4+"px",r.style.left=e.clientWidth/2-(a.r-2*y)/5*3-24+"px",r.style.top=e.clientHeight/2-(a.r-2*y)/5*4-24+"px",r.style.visibility="visible",-1!==t&&x[t]&&s.default.post("http://yotta.xjtushilei.com:8083/topic/getCompleteTopicByTopicName?topicName="+encodeURIComponent(x[t])+"&hasFragment=emptyAssembleContent").then((function(t){})).catch((function(t){return console.log(t)}));var m=d.calcEdgeWithSelectedNode({x:a.cx,y:a.cy},a.r,w[a.id],p.nodes,t);S.append("g").attr("id","edgeWithTopicInCom").selectAll("path").data(m).enter().append("path").attr("d",(function(t){return n.link(t)})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow)");var b=d.calcEdgeWithSelectedNodeCrossCom({x:a.cx,y:a.cy},a.r,t,k,M,u);S.append("g").attr("id","edgeWithTopicCrossCom").selectAll("path").data(b).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#666666").attr("stroke-width",4).attr("fill","none").style("cursor","pointer").on("mouseover",(function(t){for(var n="",e=0,r=t.topics;e<r.length;e++){var i=r[e];n+=x[i]+" "}T.transition().duration(200).style("opacity",.9),T.html(n.trim()).style("left",f.event.pageX+"px").style("top",f.event.pageY-28+"px")})).on("mouseout",(function(t){T.transition().duration(500).style("opacity",0)})).on("click",(function(t){T.transition().duration(500).style("opacity",0),a.id===t.start?(V.com=t.end,i({id:t.end})):(V.com=t.start,i({id:t.start}))})).attr("marker-end","url(#arrow)")}},l=0,h=u;l<h.length;l++){c(h[l])}}var x,w,M,k,A,C,S,T,E,N,P,L,R,O,I,z,B,q,D,j,U,F,H,Y,W,X,V,G,$,Z,Q,K,J,tt,nt,et,rt;return u(this,(function(r){for(x=t.topics,w=t.graph,M=t.topicId2Community,k=t.relationCrossCommunity,A=t.communityRelation,console.log("mapData",t),C=0,S=f.select(e),T=f.select("body").append("div").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px").style("top",0),E=S.append("defs"),N=E.append("marker").attr("id","arrow").attr("markerUnits","strokeWidth").attr("markerWidth","6").attr("markerHeight","6").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto"),"M2,2 L10,6 L2,10 L6,6 L2,2",N.append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill","#666666"),J=0;J<y.length;J++)P=E.append("marker").attr("id","arrow"+J).attr("markerUnits","strokeWidth").attr("markerWidth","8").attr("markerHeight","8").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto"),"M2,2 L10,6 L2,10 L6,6 L2,2",P.append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill",y[J][9]);for(L in w)w[L]=m(w[L]);if(A=m(A),R=e.clientHeight<e.clientWidth?e.clientHeight/2-24:e.clientWidth/2-24,console.log("communityRelation",A),console.log(Object.keys(A).length),0===Object.keys(A).length){for({r:R,id:0,cx:R,cy:R},{},O=[0],I={},{com:void 0,topicId:void 0},S.append("g").attr("id","com").selectAll("circle").append("circle").attr("r",R).attr("cx",R).attr("cy",R).attr("id",(function(t){return"com0"})).attr("fill",(function(t,n){return p[n%p.length][1]})),z={},B=d.calcCircleLayout({x:R,y:R},R,w[0],0),q=0,D=B.nodes;q<D.length;q++)j=D[q],z[j.id]=j;I[0]=B.sequence,S.append("g").attr("id","0nodes").selectAll("circle").data(B.nodes).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("fill",p[O.indexOf(0)%p.length][6]),S.append("g").attr("id","0text").selectAll("text").data(B.nodes).enter().append("text").attr("font-size",(function(t){var n=(2*t.r-4)/v(x[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(x[t.id]);return n>24?t.cx-12*v(x[t.id]):t.cx-n/2*v(x[t.id])})).attr("y",(function(t){return t.cy+(t.r-2)/v(x[t.id])})).text((function(t){return x[t.id]})).attr("fill","#ffffff").attr("cursor","pointer"),S.append("g").attr("id","0edges").selectAll("path").data(B.edges).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow"+O.indexOf(0)+")").style("visibility",0!==o.length?"hidden":"visible")}if(0!==o.length){for(K=[],J=0;J<o.length-1;J++)K.push([o[J],o[J+1]]);S.append("g").attr("id","learningPaths").selectAll("path").data(K).enter().append("path").attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(G[t[0]].cx,G[t[0]].cy,G[t[0]].r,G[t[1]].cx,G[t[1]].cy,G[t[1]].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}else{for(U=d.calcCircleLayout({x:R,y:R},R,A,void 0!==M[-1]?M[-1]:void 0),F=U.nodes,H=U.edges,Y=U.sequence,W=Y,X={},V={com:void 0,topicId:void 0},S.append("g").attr("id","com2com").selectAll("path").data(H).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#666666").attr("stroke-width",4).attr("fill","none").style("cursor","pointer").style("visibility",0!==o.length?"hidden":"visible").on("mouseover",(function(t){for(var n="",e=0,r=k;e<r.length;e++){var i=r[e];M[i[0]]===t.start&&M[i[1]]===t.end&&(n+=x[i[0]]+"->"+x[i[1]]+"\n")}T.transition().duration(200).style("opacity",.9),T.html(n.trim()).style("left",f.event.pageX+"px").style("top",f.event.pageY-28+"px")})).on("mouseout",(function(t){T.transition().duration(500).style("opacity",0)})).attr("marker-end","url(#arrow)"),S.append("g").attr("id","com").selectAll("circle").data(F).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return"com"+t.id})).attr("fill",(function(t,n){return Object.keys(h.gaozhongshuxue.topicId2Community).filter((function(n){return h.gaozhongshuxue.topicId2Community[n]==t.id})).some((function(t){return-1===g.indexOf(+t)}))?"#eeeeee":p[n%p.length][1]})),G={},$=function(t){console.log("graph[com.id]",w[t.id]);for(var e=d.calcCircleLayout({x:t.cx,y:t.cy},t.r,w[t.id],t.id===M[-1]?-1:void 0),r=0,i=e.nodes;r<i.length;r++){var a=i[r];G[a.id]=a}X[t.id]=e.sequence,S.append("g").attr("id",t.id+"nodes").selectAll("circle").data(e.nodes).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("fill",(function(n){return-1===g.indexOf(n.id)?"gray":p[W.indexOf(t.id)%y.length][6]})),S.append("g").attr("id",t.id+"text").selectAll("text").data(e.nodes).enter().append("text").attr("font-size",(function(t){var n=(2*t.r-4)/v(x[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(x[t.id]);return n>24?t.cx-12*v(x[t.id]):t.cx-n/2*v(x[t.id])})).attr("y",(function(t){return t.cy+(t.r-2)/v(x[t.id])})).text((function(t){return x[t.id]})).attr("fill","#ffffff").attr("cursor","pointer"),S.append("g").attr("id",t.id+"edges").selectAll("path").data(e.edges).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow"+W.indexOf(t.id)+")").style("visibility",0!==o.length?"hidden":"visible")},Z=0,Q=F;Z<Q.length;Z++)rt=Q[Z],$(rt);if(console.log("hahahahah",X),S.append("g").attr("id","comText").selectAll("text").data(F).enter().append("text").attr("font-size",14).attr("x",(function(t){return t.cx-14*v(x[X[t.id][0]])/2})).attr("y",(function(t,n){return F[n].cy<R?t.cy-t.r-24:t.cy+t.r+24})).text((function(t){return x[X[t.id][0]]})).attr("fill","#000000").attr("cursor","pointer"),0!==o.length){for(K=[],J=0;J<o.length-1;J++)K.push([o[J],o[J+1]]);S.append("g").attr("id","learningPaths").selectAll("path").data(K).enter().append("path").attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(G[t[0]].cx,G[t[0]].cy,G[t[0]].r,G[t[1]].cx,G[t[1]].cy,G[t[1]].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}for(tt=function(t){var n=document.getElementById(t.id+"nodes");f.select(n).selectAll("circle").on("click",(function(n){return b(n,t)}));var e=document.getElementById(t.id+"text");f.select(e).selectAll("text").on("click",(function(n){return b(n,t)}))},nt=0,et=F;nt<et.length;nt++)rt=et[nt],tt(rt);S.select("#com").selectAll("circle").on("click",(function(t){return i(t)})),S.select("#comText").selectAll("text").on("click",(function(t){return i(t)}))}return[2]}))}))},n.drawMap=function(t,e,r,i,o,c,l){return void 0===o&&(o=[]),a(this,void 0,void 0,(function(){function i(t){switch(f.select("#edgeWithTopicInCom").remove(),f.select("#edgeWithTopicCrossCom").remove(),f.select("#comPaths").remove(),f.select("#inComPaths").remove(),f.select("#learningPaths").selectAll("path").style("visibility","hidden"),r.style.visibility="hidden",M){case 0:a(t.id),M=1;break;case 1:U.com===t.id?(M=2,l(t.id)):a(t.id);break;case 2:a(t.id),M=1;break;case 3:U.com===t.id?(l(t.id),M=2):(a(t.id),M=1)}U.com=t.id}function a(t){var e=d.calcCircleLayoutWithoutReduceCrossing({x:N,y:N},N,w,D,t),r=e.nodes,i=e.edges;k.select("#com").selectAll("circle").data(r).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("display","inline"),k.select("#com2com").selectAll("path").data(i).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("display","inline").style("visibility",0!==o.length?"hidden":"visible"),k.select("#comText").selectAll("text").data(r).transition().delay(300).attr("x",(function(t){return t.cx-14*v(g[j[t.id][0]])/2})).attr("y",(function(t,n){return r[n].cy<N?t.cy-t.r-24:t.cy+t.r+24})).attr("font-size",14).attr("display","inline");for(var a=0,u=r;a<u.length;a++){for(var c=u[a],s=d.calcCircleLayoutWithoutReduceCrossing({x:c.cx,y:c.cy},c.r,b[c.id],j[c.id],void 0),l=0,h=s.nodes;l<h.length;l++){var p=h[l];F[p.id]=p}var y=document.getElementById(c.id+"nodes");f.select(y).selectAll("circle").data(s.nodes).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display","inline");var m=document.getElementById(c.id+"edges");f.select(m).selectAll("path").data(s.edges).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("stroke-width",2).attr("fill","none").attr("display","inline").style("visibility",0!==o.length?"hidden":"visible");var _=document.getElementById(c.id+"text");f.select(_).selectAll("text").data(s.nodes).transition().delay(300).attr("font-size",(function(t){var n=(2*t.r-4)/v(g[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(g[t.id]);return t.cx-v(g[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(g[t.id])>24?t.cy+12:t.cy+(t.r-2)/v(g[t.id])})).text((function(t){return g[t.id]})).attr("fill","#ffffff").attr("display","inline")}if(0!==o.length){for(var x=[],M=0;M<o.length-1;M++)x.push([o[M],o[M+1]]);k.select("#learningPaths").selectAll("path").data(x).transition().delay(300).style("visibility","visible").attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(F[t[0]].cx,F[t[0]].cy,F[t[0]].r,F[t[1]].cx,F[t[1]].cy,F[t[1]].r))}))}}function l(t){var e=d.calcCircleLayoutSecondLayer({x:N,y:N},N,w,D,t),r=e.nodes,i=(e.edges,d.calcEdgeWithSelectedComCrossCom(t,w,r));k.select("#com").selectAll("circle").data(r).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})),k.select("#com2com").selectAll("path").attr("display","none"),k.select("#com2com").selectAll("path").data(i).attr("d",(function(t){return n.link(t.path)})).attr("display","inline"),k.select("#comText").selectAll("text").data(r).transition().delay(300).attr("x",(function(t){var n=(2*t.r-4)/v(g[j[t.id][0]]);return t.cx-v(g[j[t.id][0]])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(g[j[t.id][0]])>24?t.cy+12:t.cy+(t.r-2)/v(g[j[t.id][0]])})).attr("font-size",(function(n){if(n.id===t)return 0;var e=(2*n.r-4)/v(g[j[n.id][0]]);return e>24?24:e}));for(var a={},u=0,c=r;u<c.length;u++){var s=c[u];if(s.id!==t){var l=document.getElementById(s.id+"nodes");f.select(l).selectAll("circle").attr("display","none");var h=document.getElementById(s.id+"edges");f.select(h).selectAll("path").attr("display","none");var p=document.getElementById(s.id+"text");f.select(p).selectAll("text").attr("display","none")}else{for(var y=d.calcCircleLayoutWithoutReduceCrossing({x:s.cx,y:s.cy},s.r,b[s.id],j[s.id],void 0),m=0,x=y.nodes;m<x.length;m++){var M=x[m];a[M.id]=M}l=document.getElementById(s.id+"nodes");f.select(l).selectAll("circle").data(y.nodes).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display","inline");h=document.getElementById(s.id+"edges");f.select(h).selectAll("path").data(y.edges).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("stroke-width",2).attr("fill","none").attr("display","inline");p=document.getElementById(s.id+"text");f.select(p).selectAll("text").data(y.nodes).transition().delay(300).attr("font-size",(function(t){var n=(2*t.r-4)/v(g[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(g[t.id]);return t.cx-v(g[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(g[t.id])>24?t.cy+12:t.cy+(t.r-2)/v(g[t.id])})).text((function(t){return g[t.id]})).attr("fill","#ffffff").attr("display","inline")}}if(0!==o.length){for(var A=o.map((function(t){return _[t]})),C=[],S=0;S<A.length-1;S++)C.push([A[S],A[S+1]]);C=C.filter((function(t){return t[0]!==t[1]})),k.select("#learningPaths").style("visibility","hidden"),k.append("g").attr("id","comPaths").selectAll("path").data(C).enter().append("path").transition().delay(300).attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(r.filter((function(n){return n.id===t[0]}))[0].cx,r.filter((function(n){return n.id===t[0]}))[0].cy,r.filter((function(n){return n.id===t[0]}))[0].r,r.filter((function(n){return n.id===t[1]}))[0].cx,r.filter((function(n){return n.id===t[1]}))[0].cy,r.filter((function(n){return n.id===t[1]}))[0].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)");var T=[];for(S=0;S<o.length-1;S++)-1!==Object.keys(a).map((function(t){return parseInt(t)})).indexOf(o[S])&&-1!==Object.keys(a).map((function(t){return parseInt(t)})).indexOf(o[S+1])&&T.push([o[S],o[S+1]]);k.append("g").attr("id","inComPaths").selectAll("path").data(T).enter().append("path").transition().delay(300).attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(a[t[0]].cx,a[t[0]].cy,a[t[0]].r,a[t[1]].cx,a[t[1]].cy,a[t[1]].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}}function h(t,n){if(f.select("#edgeWithTopicInCom").remove(),f.select("#edgeWithTopicCrossCom").remove(),f.select("#comPaths").remove(),f.select("#inComPaths").remove(),r.style.visibility="hidden",U.topicId=t.id,U.com=n.id,-1===t.id)return l(n.id),void(M=2);switch(M){case 0:case 1:l(n.id),M=2;break;case 2:p(t.id,n),M=3;break;case 3:p(t.id,n)}c(t.id,g[t.id])}function p(t,o){var a=d.calcCircleLayoutSecondLayer({x:N,y:N},N,w,D,o.id),u=a.nodes;a.edges;k.select("#com").selectAll("circle").data(u).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})),k.select("#com2com").selectAll("path").attr("display","none"),k.select("#comText").selectAll("text").data(u).transition().delay(300).attr("x",(function(t){var n=(2*t.r-4)/v(g[j[t.id][0]]);return t.cx-v(g[j[t.id][0]])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(g[j[t.id][0]])>24?t.cy+12:t.cy+(t.r-2)/v(g[j[t.id][0]])})).attr("font-size",(function(t){if(t.id===o.id)return 0;var n=(2*t.r-4)/v(g[j[t.id][0]]);return n>24?24:n}));for(var c=function(a){if(a.id!==o.id){var c=document.getElementById(a.id+"nodes");f.select(c).selectAll("circle").attr("display","none");var l=document.getElementById(a.id+"edges");f.select(l).selectAll("path").attr("display","none");var h=document.getElementById(a.id+"text");f.select(h).selectAll("text").attr("display","none")}else{var p=d.calcCircleLayoutSecondLayer({x:a.cx,y:a.cy},a.r,b[a.id],j[a.id],t);c=document.getElementById(a.id+"nodes");f.select(c).selectAll("circle").data(p.nodes).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display",(function(n){return n.id===t?"none":"inline"}));l=document.getElementById(a.id+"edges");f.select(l).selectAll("path").attr("display","none");h=document.getElementById(a.id+"text");f.select(h).selectAll("text").data(p.nodes).attr("font-size",(function(t){var n=(2*t.r-4)/v(g[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(g[t.id]);return t.cx-v(g[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/v(g[t.id])>24?t.cy+12:t.cy+(t.r-2)/v(g[t.id])})).text((function(t){return g[t.id]})).attr("fill","#ffffff").attr("display",(function(n){return n.id===t?"none":"inline"}));var y=j[a.id].length,m=.4*a.r*Math.sin(Math.PI/(y+1))/(1+Math.sin(Math.PI/(y+1)));r.style.width=(2*a.r-4*m)/5*3+"px",r.style.height=(2*a.r-4*m)/5*4+"px",r.style.left=e.clientWidth/2-(a.r-2*m)/5*3-24+"px",r.style.top=e.clientHeight/2-(a.r-2*m)/5*4-24+"px",r.style.visibility="visible",-1!==t&&g[t]&&s.default.post("http://yotta.xjtushilei.com:8083/topic/getCompleteTopicByTopicName?topicName="+encodeURIComponent(g[t])+"&hasFragment=emptyAssembleContent").then((function(t){})).catch((function(t){return console.log(t)}));var w=d.calcEdgeWithSelectedNode({x:a.cx,y:a.cy},a.r,b[a.id],p.nodes,t);k.append("g").attr("id","edgeWithTopicInCom").selectAll("path").data(w).enter().append("path").attr("d",(function(t){return n.link(t)})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow)");var M=d.calcEdgeWithSelectedNodeCrossCom({x:a.cx,y:a.cy},a.r,t,x,_,u);k.append("g").attr("id","edgeWithTopicCrossCom").selectAll("path").data(M).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#666666").attr("stroke-width",4).attr("fill","none").style("cursor","pointer").on("mouseover",(function(t){for(var n="",e=0,r=t.topics;e<r.length;e++){var i=r[e];n+=g[i]+" "}A.transition().duration(200).style("opacity",.9),A.html(n.trim()).style("left",f.event.pageX+"px").style("top",f.event.pageY-28+"px")})).on("mouseout",(function(t){A.transition().duration(500).style("opacity",0)})).on("click",(function(t){A.transition().duration(500).style("opacity",0),a.id===t.start?(U.com=t.end,i({id:t.end})):(U.com=t.start,i({id:t.start}))})).attr("marker-end","url(#arrow)")}},l=0,h=u;l<h.length;l++){c(h[l])}}var g,b,_,x,w,M,k,A,C,S,T,E,N,P,L,R,O,I,z,B,q,D,j,U,F,H,Y,W,X,V,G,$,Z,Q,K,J,tt;return u(this,(function(r){for(g=t.topics,b=t.graph,_=t.topicId2Community,x=t.relationCrossCommunity,w=t.communityRelation,console.log("mapData",t),M=0,k=f.select(e),A=f.select("body").append("div").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px").style("top",0),C=k.append("defs"),S=C.append("marker").attr("id","arrow").attr("markerUnits","strokeWidth").attr("markerWidth","6").attr("markerHeight","6").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto"),"M2,2 L10,6 L2,10 L6,6 L2,2",S.append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill","#873800"),Z=0;Z<y.length;Z++)T=C.append("marker").attr("id","arrow"+Z).attr("markerUnits","strokeWidth").attr("markerWidth","8").attr("markerHeight","8").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto"),"M2,2 L10,6 L2,10 L6,6 L2,2",T.append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill",y[Z][9]);for(E in b)b[E]=m(b[E]);if(w=m(w),N=e.clientHeight<e.clientWidth?e.clientHeight/2-24:e.clientWidth/2-24,console.log("communityRelation",w),console.log(Object.keys(w).length),0===Object.keys(w).length){for({r:N,id:0,cx:N,cy:N},{},P=[0],L={},{com:void 0,topicId:void 0},k.append("g").attr("id","com").selectAll("circle").append("circle").attr("r",N).attr("cx",N).attr("cy",N).attr("id",(function(t){return"com0"})).attr("fill",(function(t,n){return y[n%y.length][1]})),F={},W=d.calcCircleLayout({x:N,y:N},N,b[0],0),R=0,O=W.nodes;R<O.length;R++)G=O[R],F[G.id]=G;L[0]=W.sequence,k.append("g").attr("id","0nodes").selectAll("circle").data(W.nodes).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("fill",y[P.indexOf(0)%y.length][6]),k.append("g").attr("id","0text").selectAll("text").data(W.nodes).enter().append("text").attr("font-size",(function(t){var n=(2*t.r-4)/v(g[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(g[t.id]);return n>24?t.cx-12*v(g[t.id]):t.cx-n/2*v(g[t.id])})).attr("y",(function(t){return t.cy+(t.r-2)/v(g[t.id])})).text((function(t){return g[t.id]})).attr("fill","#ffffff").attr("cursor","pointer"),k.append("g").attr("id","0edges").selectAll("path").data(W.edges).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke",y[P.indexOf(0)%y.length][8]).attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow"+P.indexOf(0)+")").style("visibility",0!==o.length?"hidden":"visible")}if(0!==o.length){for($=[],Z=0;Z<o.length-1;Z++)$.push([o[Z],o[Z+1]]);k.append("g").attr("id","learningPaths").selectAll("path").data($).enter().append("path").attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(F[t[0]].cx,F[t[0]].cy,F[t[0]].r,F[t[1]].cx,F[t[1]].cy,F[t[1]].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}else{for(I=d.calcCircleLayout({x:N,y:N},N,w,void 0!==_[-1]?_[-1]:void 0),z=I.nodes,B=I.edges,q=I.sequence,D=q,j={},U={com:void 0,topicId:void 0},k.append("g").attr("id","com2com").selectAll("path").data(B).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#666666").attr("stroke-width",4).attr("fill","none").style("cursor","pointer").style("visibility",0!==o.length?"hidden":"visible").on("mouseover",(function(t){for(var n="",e=0,r=x;e<r.length;e++){var i=r[e];_[i[0]]===t.start&&_[i[1]]===t.end&&(n+=g[i[0]]+"->"+g[i[1]]+"\n")}A.transition().duration(200).style("opacity",.9),A.html(n.trim()).style("left",f.event.pageX+"px").style("top",f.event.pageY-28+"px")})).on("mouseout",(function(t){A.transition().duration(500).style("opacity",0)})).attr("marker-end","url(#arrow)"),k.append("g").attr("id","com").selectAll("circle").data(z).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return"com"+t.id})).attr("fill",(function(t,n){return y[n%y.length][1]})),F={},H=0,Y=z;H<Y.length;H++){for(tt=Y[H],console.log("graph[com.id]",b[tt.id]),W=d.calcCircleLayout({x:tt.cx,y:tt.cy},tt.r,b[tt.id],tt.id===_[-1]?-1:void 0),X=0,V=W.nodes;X<V.length;X++)G=V[X],F[G.id]=G;j[tt.id]=W.sequence,k.append("g").attr("id",tt.id+"nodes").selectAll("circle").data(W.nodes).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("fill",y[D.indexOf(tt.id)%y.length][6]),k.append("g").attr("id",tt.id+"text").selectAll("text").data(W.nodes).enter().append("text").attr("font-size",(function(t){var n=(2*t.r-4)/v(g[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/v(g[t.id]);return n>24?t.cx-12*v(g[t.id]):t.cx-n/2*v(g[t.id])})).attr("y",(function(t){return t.cy+(t.r-2)/v(g[t.id])})).text((function(t){return g[t.id]})).attr("fill","#ffffff").attr("cursor","pointer"),k.append("g").attr("id",tt.id+"edges").selectAll("path").data(W.edges).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke",y[D.indexOf(tt.id)%y.length][8]).attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow"+D.indexOf(tt.id)+")").style("visibility",0!==o.length?"hidden":"visible")}if(console.log("hahahahah",j),k.append("g").attr("id","comText").selectAll("text").data(z).enter().append("text").attr("font-size",14).attr("x",(function(t){return t.cx-14*v(g[j[t.id][0]])/2})).attr("y",(function(t,n){return z[n].cy<N?t.cy-t.r-24:t.cy+t.r+24})).text((function(t){return g[j[t.id][0]]})).attr("fill","#000000").attr("cursor","pointer"),0!==o.length){for($=[],Z=0;Z<o.length-1;Z++)$.push([o[Z],o[Z+1]]);k.append("g").attr("id","learningPaths").selectAll("path").data($).enter().append("path").attr("d",(function(t){return n.link(d.calcLinkSourceTargetBetweenCircles(F[t[0]].cx,F[t[0]].cy,F[t[0]].r,F[t[1]].cx,F[t[1]].cy,F[t[1]].r))})).attr("stroke","#666666").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}for(Q=function(t){var n=document.getElementById(t.id+"nodes");f.select(n).selectAll("circle").on("click",(function(n){return h(n,t)}));var e=document.getElementById(t.id+"text");f.select(e).selectAll("text").on("click",(function(n){return h(n,t)}))},K=0,J=z;K<J.length;K++)tt=J[K],Q(tt);k.select("#com").selectAll("circle").on("click",(function(t){return i(t)})),k.select("#comText").selectAll("text").on("click",(function(t){return i(t)}))}return[2]}))}))},n.judgementStringLengthWithChinese=v,n.completeObj=m},function(t,n,e){t.exports=e(14)},function(t,n,e){"use strict";var r=e(0),i=e(2),o=e(15),a=e(8);function u(t){var n=new o(t),e=i(o.prototype.request,n);return r.extend(e,o.prototype,n),r.extend(e,n),e}var c=u(e(5));c.Axios=o,c.create=function(t){return u(a(c.defaults,t))},c.Cancel=e(9),c.CancelToken=e(29),c.isCancel=e(4),c.all=function(t){return Promise.all(t)},c.spread=e(30),t.exports=c,t.exports.default=c},function(t,n,e){"use strict";var r=e(0),i=e(3),o=e(16),a=e(17),u=e(8);function c(t){this.defaults=t,this.interceptors={request:new o,response:new o}}c.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=u(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=[a,void 0],e=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){n.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){n.push(t.fulfilled,t.rejected)}));n.length;)e=e.then(n.shift(),n.shift());return e},c.prototype.getUri=function(t){return t=u(this.defaults,t),i(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){c.prototype[t]=function(n,e){return this.request(r.merge(e||{},{method:t,url:n}))}})),r.forEach(["post","put","patch"],(function(t){c.prototype[t]=function(n,e,i){return this.request(r.merge(i||{},{method:t,url:n,data:e}))}})),t.exports=c},function(t,n,e){"use strict";var r=e(0);function i(){this.handlers=[]}i.prototype.use=function(t,n){return this.handlers.push({fulfilled:t,rejected:n}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){r.forEach(this.handlers,(function(n){null!==n&&t(n)}))},t.exports=i},function(t,n,e){"use strict";var r=e(0),i=e(18),o=e(4),a=e(5);function u(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return u(t),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete t.headers[n]})),(t.adapter||a.adapter)(t).then((function(n){return u(t),n.data=i(n.data,n.headers,t.transformResponse),n}),(function(n){return o(n)||(u(t),n&&n.response&&(n.response.data=i(n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)}))}},function(t,n,e){"use strict";var r=e(0);t.exports=function(t,n,e){return r.forEach(e,(function(e){t=e(t,n)})),t}},function(t,n){var e,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,f=[],s=!1,l=-1;function h(){s&&c&&(s=!1,c.length?f=c.concat(f):l=-1,f.length&&d())}function d(){if(!s){var t=u(h);s=!0;for(var n=f.length;n;){for(c=f,f=[];++l<n;)c&&c[l].run();l=-1,n=f.length}c=null,s=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function g(){}i.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];f.push(new p(t,n)),1!==f.length||s||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,n,e){"use strict";var r=e(0);t.exports=function(t,n){r.forEach(t,(function(e,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(t[n]=e,delete t[r])}))}},function(t,n,e){"use strict";var r=e(7);t.exports=function(t,n,e){var i=e.config.validateStatus;!i||i(e.status)?t(e):n(r("Request failed with status code "+e.status,e.config,null,e.request,e))}},function(t,n,e){"use strict";t.exports=function(t,n,e,r,i){return t.config=n,e&&(t.code=e),t.request=r,t.response=i,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,n,e){"use strict";var r=e(24),i=e(25);t.exports=function(t,n){return t&&!r(n)?i(t,n):n}},function(t,n,e){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,n,e){"use strict";t.exports=function(t,n){return n?t.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):t}},function(t,n,e){"use strict";var r=e(0),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var n,e,o,a={};return t?(r.forEach(t.split("\n"),(function(t){if(o=t.indexOf(":"),n=r.trim(t.substr(0,o)).toLowerCase(),e=r.trim(t.substr(o+1)),n){if(a[n]&&i.indexOf(n)>=0)return;a[n]="set-cookie"===n?(a[n]?a[n]:[]).concat([e]):a[n]?a[n]+", "+e:e}})),a):a}},function(t,n,e){"use strict";var r=e(0);t.exports=r.isStandardBrowserEnv()?function(){var t,n=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");function i(t){var r=t;return n&&(e.setAttribute("href",r),r=e.href),e.setAttribute("href",r),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return t=i(window.location.href),function(n){var e=r.isString(n)?i(n):n;return e.protocol===t.protocol&&e.host===t.host}}():function(){return!0}},function(t,n,e){"use strict";var r=e(0);t.exports=r.isStandardBrowserEnv()?{write:function(t,n,e,i,o,a){var u=[];u.push(t+"="+encodeURIComponent(n)),r.isNumber(e)&&u.push("expires="+new Date(e).toGMTString()),r.isString(i)&&u.push("path="+i),r.isString(o)&&u.push("domain="+o),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(t){var n=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,n,e){"use strict";var r=e(9);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(t){n=t}));var e=this;t((function(t){e.reason||(e.reason=new r(t),n(e.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i((function(n){t=n})),cancel:t}},t.exports=i},function(t,n,e){"use strict";t.exports=function(t){return function(n){return t.apply(null,n)}}},function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(32));n.generate=i.default;var o={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"};n.presetPrimaryColors=o;var a={};n.presetPalettes=a,Object.keys(o).forEach((function(t){a[t]=i.default(o[t]),a[t].primary=a[t][5]}));var u=a.red;n.red=u;var c=a.volcano;n.volcano=c;var f=a.gold;n.gold=f;var s=a.orange;n.orange=s;var l=a.yellow;n.yellow=l;var h=a.lime;n.lime=h;var d=a.green;n.green=d;var p=a.cyan;n.cyan=p;var g=a.blue;n.blue=g;var y=a.geekblue;n.geekblue=y;var v=a.purple;n.purple=v;var m=a.magenta;n.magenta=m;var b=a.grey;n.grey=b},function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(33));function o(t,n,e){var r;return(r=Math.round(t.h)>=60&&Math.round(t.h)<=240?e?Math.round(t.h)-2*n:Math.round(t.h)+2*n:e?Math.round(t.h)+2*n:Math.round(t.h)-2*n)<0?r+=360:r>=360&&(r-=360),r}function a(t,n,e){return 0===t.h&&0===t.s?t.s:((r=e?Math.round(100*t.s)-16*n:4===n?Math.round(100*t.s)+16:Math.round(100*t.s)+5*n)>100&&(r=100),e&&5===n&&r>10&&(r=10),r<6&&(r=6),r);var r}function u(t,n,e){return e?Math.round(100*t.v)+5*n:Math.round(100*t.v)-15*n}n.default=function(t){for(var n=[],e=i.default(t),r=5;r>0;r-=1){var c=e.toHsv(),f=i.default({h:o(c,r,!0),s:a(c,r,!0),v:u(c,r,!0)}).toHexString();n.push(f)}for(n.push(e.toHexString()),r=1;r<=4;r+=1){c=e.toHsv(),f=i.default({h:o(c,r),s:a(c,r),v:u(c,r)}).toHexString();n.push(f)}return n}},function(t,n,e){var r;!function(i){var o=/^\s+/,a=/\s+$/,u=0,c=i.round,f=i.min,s=i.max,l=i.random;function h(t,n){if(n=n||{},(t=t||"")instanceof h)return t;if(!(this instanceof h))return new h(t,n);var e=function(t){var n={r:0,g:0,b:0},e=1,r=null,u=null,c=null,l=!1,h=!1;"string"==typeof t&&(t=function(t){t=t.replace(o,"").replace(a,"").toLowerCase();var n,e=!1;if(N[t])t=N[t],e=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};if(n=H.rgb.exec(t))return{r:n[1],g:n[2],b:n[3]};if(n=H.rgba.exec(t))return{r:n[1],g:n[2],b:n[3],a:n[4]};if(n=H.hsl.exec(t))return{h:n[1],s:n[2],l:n[3]};if(n=H.hsla.exec(t))return{h:n[1],s:n[2],l:n[3],a:n[4]};if(n=H.hsv.exec(t))return{h:n[1],s:n[2],v:n[3]};if(n=H.hsva.exec(t))return{h:n[1],s:n[2],v:n[3],a:n[4]};if(n=H.hex8.exec(t))return{r:I(n[1]),g:I(n[2]),b:I(n[3]),a:D(n[4]),format:e?"name":"hex8"};if(n=H.hex6.exec(t))return{r:I(n[1]),g:I(n[2]),b:I(n[3]),format:e?"name":"hex"};if(n=H.hex4.exec(t))return{r:I(n[1]+""+n[1]),g:I(n[2]+""+n[2]),b:I(n[3]+""+n[3]),a:D(n[4]+""+n[4]),format:e?"name":"hex8"};if(n=H.hex3.exec(t))return{r:I(n[1]+""+n[1]),g:I(n[2]+""+n[2]),b:I(n[3]+""+n[3]),format:e?"name":"hex"};return!1}(t));"object"==typeof t&&(Y(t.r)&&Y(t.g)&&Y(t.b)?(d=t.r,p=t.g,g=t.b,n={r:255*R(d,255),g:255*R(p,255),b:255*R(g,255)},l=!0,h="%"===String(t.r).substr(-1)?"prgb":"rgb"):Y(t.h)&&Y(t.s)&&Y(t.v)?(r=B(t.s),u=B(t.v),n=function(t,n,e){t=6*R(t,360),n=R(n,100),e=R(e,100);var r=i.floor(t),o=t-r,a=e*(1-n),u=e*(1-o*n),c=e*(1-(1-o)*n),f=r%6;return{r:255*[e,u,a,a,c,e][f],g:255*[c,e,e,u,a,a][f],b:255*[a,a,c,e,e,u][f]}}(t.h,r,u),l=!0,h="hsv"):Y(t.h)&&Y(t.s)&&Y(t.l)&&(r=B(t.s),c=B(t.l),n=function(t,n,e){var r,i,o;function a(t,n,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?t+6*(n-t)*e:e<.5?n:e<2/3?t+(n-t)*(2/3-e)*6:t}if(t=R(t,360),n=R(n,100),e=R(e,100),0===n)r=i=o=e;else{var u=e<.5?e*(1+n):e+n-e*n,c=2*e-u;r=a(c,u,t+1/3),i=a(c,u,t),o=a(c,u,t-1/3)}return{r:255*r,g:255*i,b:255*o}}(t.h,r,c),l=!0,h="hsl"),t.hasOwnProperty("a")&&(e=t.a));var d,p,g;return e=L(e),{ok:l,format:t.format||h,r:f(255,s(n.r,0)),g:f(255,s(n.g,0)),b:f(255,s(n.b,0)),a:e}}(t);this._originalInput=t,this._r=e.r,this._g=e.g,this._b=e.b,this._a=e.a,this._roundA=c(100*this._a)/100,this._format=n.format||e.format,this._gradientType=n.gradientType,this._r<1&&(this._r=c(this._r)),this._g<1&&(this._g=c(this._g)),this._b<1&&(this._b=c(this._b)),this._ok=e.ok,this._tc_id=u++}function d(t,n,e){t=R(t,255),n=R(n,255),e=R(e,255);var r,i,o=s(t,n,e),a=f(t,n,e),u=(o+a)/2;if(o==a)r=i=0;else{var c=o-a;switch(i=u>.5?c/(2-o-a):c/(o+a),o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,l:u}}function p(t,n,e){t=R(t,255),n=R(n,255),e=R(e,255);var r,i,o=s(t,n,e),a=f(t,n,e),u=o,c=o-a;if(i=0===o?0:c/o,o==a)r=0;else{switch(o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,v:u}}function g(t,n,e,r){var i=[z(c(t).toString(16)),z(c(n).toString(16)),z(c(e).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function y(t,n,e,r){return[z(q(r)),z(c(t).toString(16)),z(c(n).toString(16)),z(c(e).toString(16))].join("")}function v(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s-=n/100,e.s=O(e.s),h(e)}function m(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s+=n/100,e.s=O(e.s),h(e)}function b(t){return h(t).desaturate(100)}function _(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l+=n/100,e.l=O(e.l),h(e)}function x(t,n){n=0===n?0:n||10;var e=h(t).toRgb();return e.r=s(0,f(255,e.r-c(-n/100*255))),e.g=s(0,f(255,e.g-c(-n/100*255))),e.b=s(0,f(255,e.b-c(-n/100*255))),h(e)}function w(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l-=n/100,e.l=O(e.l),h(e)}function M(t,n){var e=h(t).toHsl(),r=(e.h+n)%360;return e.h=r<0?360+r:r,h(e)}function k(t){var n=h(t).toHsl();return n.h=(n.h+180)%360,h(n)}function A(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+120)%360,s:n.s,l:n.l}),h({h:(e+240)%360,s:n.s,l:n.l})]}function C(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+90)%360,s:n.s,l:n.l}),h({h:(e+180)%360,s:n.s,l:n.l}),h({h:(e+270)%360,s:n.s,l:n.l})]}function S(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+72)%360,s:n.s,l:n.l}),h({h:(e+216)%360,s:n.s,l:n.l})]}function T(t,n,e){n=n||6,e=e||30;var r=h(t).toHsl(),i=360/e,o=[h(t)];for(r.h=(r.h-(i*n>>1)+720)%360;--n;)r.h=(r.h+i)%360,o.push(h(r));return o}function E(t,n){n=n||6;for(var e=h(t).toHsv(),r=e.h,i=e.s,o=e.v,a=[],u=1/n;n--;)a.push(h({h:r,s:i,v:o})),o=(o+u)%1;return a}h.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,n,e,r=this.toRgb();return t=r.r/255,n=r.g/255,e=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))+.0722*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))},setAlpha:function(t){return this._a=L(t),this._roundA=c(100*this._a)/100,this},toHsv:function(){var t=p(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=p(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.v);return 1==this._a?"hsv("+n+", "+e+"%, "+r+"%)":"hsva("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=d(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=d(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.l);return 1==this._a?"hsl("+n+", "+e+"%, "+r+"%)":"hsla("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return g(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,n,e,r,i){var o=[z(c(t).toString(16)),z(c(n).toString(16)),z(c(e).toString(16)),z(q(r))];if(i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1))return o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0);return o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:c(this._r),g:c(this._g),b:c(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+c(this._r)+", "+c(this._g)+", "+c(this._b)+")":"rgba("+c(this._r)+", "+c(this._g)+", "+c(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:c(100*R(this._r,255))+"%",g:c(100*R(this._g,255))+"%",b:c(100*R(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+c(100*R(this._r,255))+"%, "+c(100*R(this._g,255))+"%, "+c(100*R(this._b,255))+"%)":"rgba("+c(100*R(this._r,255))+"%, "+c(100*R(this._g,255))+"%, "+c(100*R(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(P[g(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var n="#"+y(this._r,this._g,this._b,this._a),e=n,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=h(t);e="#"+y(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+n+",endColorstr="+e+")"},toString:function(t){var n=!!t;t=t||this._format;var e=!1,r=this._a<1&&this._a>=0;return n||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(e=this.toRgbString()),"prgb"===t&&(e=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(e=this.toHexString()),"hex3"===t&&(e=this.toHexString(!0)),"hex4"===t&&(e=this.toHex8String(!0)),"hex8"===t&&(e=this.toHex8String()),"name"===t&&(e=this.toName()),"hsl"===t&&(e=this.toHslString()),"hsv"===t&&(e=this.toHsvString()),e||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return h(this.toString())},_applyModification:function(t,n){var e=t.apply(null,[this].concat([].slice.call(n)));return this._r=e._r,this._g=e._g,this._b=e._b,this.setAlpha(e._a),this},lighten:function(){return this._applyModification(_,arguments)},brighten:function(){return this._applyModification(x,arguments)},darken:function(){return this._applyModification(w,arguments)},desaturate:function(){return this._applyModification(v,arguments)},saturate:function(){return this._applyModification(m,arguments)},greyscale:function(){return this._applyModification(b,arguments)},spin:function(){return this._applyModification(M,arguments)},_applyCombination:function(t,n){return t.apply(null,[this].concat([].slice.call(n)))},analogous:function(){return this._applyCombination(T,arguments)},complement:function(){return this._applyCombination(k,arguments)},monochromatic:function(){return this._applyCombination(E,arguments)},splitcomplement:function(){return this._applyCombination(S,arguments)},triad:function(){return this._applyCombination(A,arguments)},tetrad:function(){return this._applyCombination(C,arguments)}},h.fromRatio=function(t,n){if("object"==typeof t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]="a"===r?t[r]:B(t[r]));t=e}return h(t,n)},h.equals=function(t,n){return!(!t||!n)&&h(t).toRgbString()==h(n).toRgbString()},h.random=function(){return h.fromRatio({r:l(),g:l(),b:l()})},h.mix=function(t,n,e){e=0===e?0:e||50;var r=h(t).toRgb(),i=h(n).toRgb(),o=e/100;return h({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},h.readability=function(t,n){var e=h(t),r=h(n);return(i.max(e.getLuminance(),r.getLuminance())+.05)/(i.min(e.getLuminance(),r.getLuminance())+.05)},h.isReadable=function(t,n,e){var r,i,o=h.readability(t,n);switch(i=!1,(r=function(t){var n,e;n=((t=t||{level:"AA",size:"small"}).level||"AA").toUpperCase(),e=(t.size||"small").toLowerCase(),"AA"!==n&&"AAA"!==n&&(n="AA");"small"!==e&&"large"!==e&&(e="small");return{level:n,size:e}}(e)).level+r.size){case"AAsmall":case"AAAlarge":i=o>=4.5;break;case"AAlarge":i=o>=3;break;case"AAAsmall":i=o>=7}return i},h.mostReadable=function(t,n,e){var r,i,o,a,u=null,c=0;i=(e=e||{}).includeFallbackColors,o=e.level,a=e.size;for(var f=0;f<n.length;f++)(r=h.readability(t,n[f]))>c&&(c=r,u=h(n[f]));return h.isReadable(t,u,{level:o,size:a})||!i?u:(e.includeFallbackColors=!1,h.mostReadable(t,["#fff","#000"],e))};var N=h.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},P=h.hexNames=function(t){var n={};for(var e in t)t.hasOwnProperty(e)&&(n[t[e]]=e);return n}(N);function L(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function R(t,n){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var e=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=f(n,s(0,parseFloat(t))),e&&(t=parseInt(t*n,10)/100),i.abs(t-n)<1e-6?1:t%n/parseFloat(n)}function O(t){return f(1,s(0,t))}function I(t){return parseInt(t,16)}function z(t){return 1==t.length?"0"+t:""+t}function B(t){return t<=1&&(t=100*t+"%"),t}function q(t){return i.round(255*parseFloat(t)).toString(16)}function D(t){return I(t)/255}var j,U,F,H=(U="[\\s|\\(]+("+(j="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+j+")[,|\\s]+("+j+")\\s*\\)?",F="[\\s|\\(]+("+j+")[,|\\s]+("+j+")[,|\\s]+("+j+")[,|\\s]+("+j+")\\s*\\)?",{CSS_UNIT:new RegExp(j),rgb:new RegExp("rgb"+U),rgba:new RegExp("rgba"+F),hsl:new RegExp("hsl"+U),hsla:new RegExp("hsla"+F),hsv:new RegExp("hsv"+U),hsva:new RegExp("hsva"+F),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function Y(t){return!!H.CSS_UNIT.exec(t)}t.exports?t.exports=h:void 0===(r=function(){return h}.call(n,e,n,t))||(t.exports=r)}(Math)},function(t,n,e){"use strict";e.r(n),e.d(n,"version",(function(){return r})),e.d(n,"bisect",(function(){return f})),e.d(n,"bisectRight",(function(){return u})),e.d(n,"bisectLeft",(function(){return c})),e.d(n,"ascending",(function(){return i})),e.d(n,"bisector",(function(){return o})),e.d(n,"cross",(function(){return h})),e.d(n,"descending",(function(){return d})),e.d(n,"deviation",(function(){return y})),e.d(n,"extent",(function(){return v})),e.d(n,"histogram",(function(){return P})),e.d(n,"thresholdFreedmanDiaconis",(function(){return R})),e.d(n,"thresholdScott",(function(){return O})),e.d(n,"thresholdSturges",(function(){return N})),e.d(n,"max",(function(){return I})),e.d(n,"mean",(function(){return z})),e.d(n,"median",(function(){return B})),e.d(n,"merge",(function(){return q})),e.d(n,"min",(function(){return D})),e.d(n,"pairs",(function(){return s})),e.d(n,"permute",(function(){return j})),e.d(n,"quantile",(function(){return L})),e.d(n,"range",(function(){return M})),e.d(n,"scan",(function(){return U})),e.d(n,"shuffle",(function(){return F})),e.d(n,"sum",(function(){return H})),e.d(n,"ticks",(function(){return S})),e.d(n,"tickIncrement",(function(){return T})),e.d(n,"tickStep",(function(){return E})),e.d(n,"transpose",(function(){return Y})),e.d(n,"variance",(function(){return g})),e.d(n,"zip",(function(){return X})),e.d(n,"axisTop",(function(){return nt})),e.d(n,"axisRight",(function(){return et})),e.d(n,"axisBottom",(function(){return rt})),e.d(n,"axisLeft",(function(){return it})),e.d(n,"brush",(function(){return Ci})),e.d(n,"brushX",(function(){return ki})),e.d(n,"brushY",(function(){return Ai})),e.d(n,"brushSelection",(function(){return Mi})),e.d(n,"chord",(function(){return Ii})),e.d(n,"ribbon",(function(){return $i})),e.d(n,"nest",(function(){return Ji})),e.d(n,"set",(function(){return uo})),e.d(n,"map",(function(){return Ki})),e.d(n,"keys",(function(){return co})),e.d(n,"values",(function(){return fo})),e.d(n,"entries",(function(){return so})),e.d(n,"color",(function(){return Wn})),e.d(n,"rgb",(function(){return $n})),e.d(n,"hsl",(function(){return ee})),e.d(n,"lab",(function(){return yo})),e.d(n,"hcl",(function(){return ko})),e.d(n,"lch",(function(){return Mo})),e.d(n,"gray",(function(){return go})),e.d(n,"cubehelix",(function(){return Lo})),e.d(n,"contours",(function(){return Fo})),e.d(n,"contourDensity",(function(){return Go})),e.d(n,"dispatch",(function(){return lt})),e.d(n,"drag",(function(){return na})),e.d(n,"dragDisable",(function(){return Sn})),e.d(n,"dragEnable",(function(){return Tn})),e.d(n,"dsvFormat",(function(){return ca})),e.d(n,"csvParse",(function(){return sa})),e.d(n,"csvParseRows",(function(){return la})),e.d(n,"csvFormat",(function(){return ha})),e.d(n,"csvFormatBody",(function(){return da})),e.d(n,"csvFormatRows",(function(){return pa})),e.d(n,"csvFormatRow",(function(){return ga})),e.d(n,"csvFormatValue",(function(){return ya})),e.d(n,"tsvParse",(function(){return ma})),e.d(n,"tsvParseRows",(function(){return ba})),e.d(n,"tsvFormat",(function(){return _a})),e.d(n,"tsvFormatBody",(function(){return xa})),e.d(n,"tsvFormatRows",(function(){return wa})),e.d(n,"tsvFormatRow",(function(){return Ma})),e.d(n,"tsvFormatValue",(function(){return ka})),e.d(n,"autoType",(function(){return Aa})),e.d(n,"easeLinear",(function(){return Sa})),e.d(n,"easeQuad",(function(){return Na})),e.d(n,"easeQuadIn",(function(){return Ta})),e.d(n,"easeQuadOut",(function(){return Ea})),e.d(n,"easeQuadInOut",(function(){return Na})),e.d(n,"easeCubic",(function(){return Vr})),e.d(n,"easeCubicIn",(function(){return Wr})),e.d(n,"easeCubicOut",(function(){return Xr})),e.d(n,"easeCubicInOut",(function(){return Vr})),e.d(n,"easePoly",(function(){return Ra})),e.d(n,"easePolyIn",(function(){return Pa})),e.d(n,"easePolyOut",(function(){return La})),e.d(n,"easePolyInOut",(function(){return Ra})),e.d(n,"easeSin",(function(){return qa})),e.d(n,"easeSinIn",(function(){return za})),e.d(n,"easeSinOut",(function(){return Ba})),e.d(n,"easeSinInOut",(function(){return qa})),e.d(n,"easeExp",(function(){return Fa})),e.d(n,"easeExpIn",(function(){return ja})),e.d(n,"easeExpOut",(function(){return Ua})),e.d(n,"easeExpInOut",(function(){return Fa})),e.d(n,"easeCircle",(function(){return Wa})),e.d(n,"easeCircleIn",(function(){return Ha})),e.d(n,"easeCircleOut",(function(){return Ya})),e.d(n,"easeCircleInOut",(function(){return Wa})),e.d(n,"easeBounce",(function(){return Va})),e.d(n,"easeBounceIn",(function(){return Xa})),e.d(n,"easeBounceOut",(function(){return Va})),e.d(n,"easeBounceInOut",(function(){return Ga})),e.d(n,"easeBack",(function(){return Qa})),e.d(n,"easeBackIn",(function(){return $a})),e.d(n,"easeBackOut",(function(){return Za})),e.d(n,"easeBackInOut",(function(){return Qa})),e.d(n,"easeElastic",(function(){return tu})),e.d(n,"easeElasticIn",(function(){return Ja})),e.d(n,"easeElasticOut",(function(){return tu})),e.d(n,"easeElasticInOut",(function(){return nu})),e.d(n,"blob",(function(){return ru})),e.d(n,"buffer",(function(){return ou})),e.d(n,"dsv",(function(){return fu})),e.d(n,"csv",(function(){return su})),e.d(n,"tsv",(function(){return lu})),e.d(n,"image",(function(){return hu})),e.d(n,"json",(function(){return pu})),e.d(n,"text",(function(){return uu})),e.d(n,"xml",(function(){return yu})),e.d(n,"html",(function(){return vu})),e.d(n,"svg",(function(){return mu})),e.d(n,"forceCenter",(function(){return bu})),e.d(n,"forceCollide",(function(){return Lu})),e.d(n,"forceLink",(function(){return Iu})),e.d(n,"forceManyBody",(function(){return ju})),e.d(n,"forceRadial",(function(){return Uu})),e.d(n,"forceSimulation",(function(){return Du})),e.d(n,"forceX",(function(){return Fu})),e.d(n,"forceY",(function(){return Hu})),e.d(n,"formatDefaultLocale",(function(){return oc})),e.d(n,"format",(function(){return Qu})),e.d(n,"formatPrefix",(function(){return Ku})),e.d(n,"formatLocale",(function(){return ic})),e.d(n,"formatSpecifier",(function(){return Vu})),e.d(n,"FormatSpecifier",(function(){return Gu})),e.d(n,"precisionFixed",(function(){return ac})),e.d(n,"precisionPrefix",(function(){return uc})),e.d(n,"precisionRound",(function(){return cc})),e.d(n,"geoArea",(function(){return Jc})),e.d(n,"geoBounds",(function(){return Xf})),e.d(n,"geoCentroid",(function(){return is})),e.d(n,"geoCircle",(function(){return gs})),e.d(n,"geoClipAntimeridian",(function(){return Ss})),e.d(n,"geoClipCircle",(function(){return Ts})),e.d(n,"geoClipExtent",(function(){return Rs})),e.d(n,"geoClipRectangle",(function(){return Es})),e.d(n,"geoContains",(function(){return Qs})),e.d(n,"geoDistance",(function(){return Fs})),e.d(n,"geoGraticule",(function(){return tl})),e.d(n,"geoGraticule10",(function(){return nl})),e.d(n,"geoInterpolate",(function(){return al})),e.d(n,"geoLength",(function(){return Ds})),e.d(n,"geoPath",(function(){return ih})),e.d(n,"geoAlbers",(function(){return Mh})),e.d(n,"geoAlbersUsa",(function(){return kh})),e.d(n,"geoAzimuthalEqualArea",(function(){return Th})),e.d(n,"geoAzimuthalEqualAreaRaw",(function(){return Sh})),e.d(n,"geoAzimuthalEquidistant",(function(){return Nh})),e.d(n,"geoAzimuthalEquidistantRaw",(function(){return Eh})),e.d(n,"geoConicConformal",(function(){return zh})),e.d(n,"geoConicConformalRaw",(function(){return Ih})),e.d(n,"geoConicEqualArea",(function(){return wh})),e.d(n,"geoConicEqualAreaRaw",(function(){return xh})),e.d(n,"geoConicEquidistant",(function(){return jh})),e.d(n,"geoConicEquidistantRaw",(function(){return Dh})),e.d(n,"geoEqualEarth",(function(){return Vh})),e.d(n,"geoEqualEarthRaw",(function(){return Xh})),e.d(n,"geoEquirectangular",(function(){return qh})),e.d(n,"geoEquirectangularRaw",(function(){return Bh})),e.d(n,"geoGnomonic",(function(){return $h})),e.d(n,"geoGnomonicRaw",(function(){return Gh})),e.d(n,"geoIdentity",(function(){return Zh})),e.d(n,"geoProjection",(function(){return mh})),e.d(n,"geoProjectionMutator",(function(){return bh})),e.d(n,"geoMercator",(function(){return Lh})),e.d(n,"geoMercatorRaw",(function(){return Ph})),e.d(n,"geoNaturalEarth1",(function(){return Kh})),e.d(n,"geoNaturalEarth1Raw",(function(){return Qh})),e.d(n,"geoOrthographic",(function(){return td})),e.d(n,"geoOrthographicRaw",(function(){return Jh})),e.d(n,"geoStereographic",(function(){return ed})),e.d(n,"geoStereographicRaw",(function(){return nd})),e.d(n,"geoTransverseMercator",(function(){return id})),e.d(n,"geoTransverseMercatorRaw",(function(){return rd})),e.d(n,"geoRotation",(function(){return hs})),e.d(n,"geoStream",(function(){return Wc})),e.d(n,"geoTransform",(function(){return oh})),e.d(n,"cluster",(function(){return cd})),e.d(n,"hierarchy",(function(){return sd})),e.d(n,"pack",(function(){return Id})),e.d(n,"packSiblings",(function(){return Ed})),e.d(n,"packEnclose",(function(){return yd})),e.d(n,"partition",(function(){return Ud})),e.d(n,"stratify",(function(){return Xd})),e.d(n,"tree",(function(){return Jd})),e.d(n,"treemap",(function(){return ip})),e.d(n,"treemapBinary",(function(){return op})),e.d(n,"treemapDice",(function(){return jd})),e.d(n,"treemapSlice",(function(){return tp})),e.d(n,"treemapSliceDice",(function(){return ap})),e.d(n,"treemapSquarify",(function(){return rp})),e.d(n,"treemapResquarify",(function(){return up})),e.d(n,"interpolate",(function(){return Ee})),e.d(n,"interpolateArray",(function(){return be})),e.d(n,"interpolateBasis",(function(){return ae})),e.d(n,"interpolateBasisClosed",(function(){return ue})),e.d(n,"interpolateDate",(function(){return xe})),e.d(n,"interpolateDiscrete",(function(){return cp})),e.d(n,"interpolateHue",(function(){return fp})),e.d(n,"interpolateNumber",(function(){return we})),e.d(n,"interpolateNumberArray",(function(){return ve})),e.d(n,"interpolateObject",(function(){return Me})),e.d(n,"interpolateRound",(function(){return sp})),e.d(n,"interpolateString",(function(){return Te})),e.d(n,"interpolateTransformCss",(function(){return hr})),e.d(n,"interpolateTransformSvg",(function(){return dr})),e.d(n,"interpolateZoom",(function(){return dp})),e.d(n,"interpolateRgb",(function(){return de})),e.d(n,"interpolateRgbBasis",(function(){return ge})),e.d(n,"interpolateRgbBasisClosed",(function(){return ye})),e.d(n,"interpolateHsl",(function(){return gp})),e.d(n,"interpolateHslLong",(function(){return yp})),e.d(n,"interpolateLab",(function(){return vp})),e.d(n,"interpolateHcl",(function(){return bp})),e.d(n,"interpolateHclLong",(function(){return _p})),e.d(n,"interpolateCubehelix",(function(){return wp})),e.d(n,"interpolateCubehelixLong",(function(){return Mp})),e.d(n,"piecewise",(function(){return kp})),e.d(n,"quantize",(function(){return Ap})),e.d(n,"path",(function(){return Hi})),e.d(n,"polygonArea",(function(){return Cp})),e.d(n,"polygonCentroid",(function(){return Sp})),e.d(n,"polygonHull",(function(){return Np})),e.d(n,"polygonContains",(function(){return Pp})),e.d(n,"polygonLength",(function(){return Lp})),e.d(n,"quadtree",(function(){return Cu})),e.d(n,"randomUniform",(function(){return Op})),e.d(n,"randomNormal",(function(){return Ip})),e.d(n,"randomLogNormal",(function(){return zp})),e.d(n,"randomBates",(function(){return qp})),e.d(n,"randomIrwinHall",(function(){return Bp})),e.d(n,"randomExponential",(function(){return Dp})),e.d(n,"scaleBand",(function(){return Vp})),e.d(n,"scalePoint",(function(){return $p})),e.d(n,"scaleIdentity",(function(){return fg})),e.d(n,"scaleLinear",(function(){return cg})),e.d(n,"scaleLog",(function(){return mg})),e.d(n,"scaleSymlog",(function(){return wg})),e.d(n,"scaleOrdinal",(function(){return Xp})),e.d(n,"scaleImplicit",(function(){return Wp})),e.d(n,"scalePow",(function(){return Sg})),e.d(n,"scaleSqrt",(function(){return Tg})),e.d(n,"scaleQuantile",(function(){return Eg})),e.d(n,"scaleQuantize",(function(){return Ng})),e.d(n,"scaleThreshold",(function(){return Pg})),e.d(n,"scaleTime",(function(){return pm})),e.d(n,"scaleUtc",(function(){return km})),e.d(n,"scaleSequential",(function(){return Sm})),e.d(n,"scaleSequentialLog",(function(){return Tm})),e.d(n,"scaleSequentialPow",(function(){return Nm})),e.d(n,"scaleSequentialSqrt",(function(){return Pm})),e.d(n,"scaleSequentialSymlog",(function(){return Em})),e.d(n,"scaleSequentialQuantile",(function(){return Lm})),e.d(n,"scaleDiverging",(function(){return Om})),e.d(n,"scaleDivergingLog",(function(){return Im})),e.d(n,"scaleDivergingPow",(function(){return Bm})),e.d(n,"scaleDivergingSqrt",(function(){return qm})),e.d(n,"scaleDivergingSymlog",(function(){return zm})),e.d(n,"tickFormat",(function(){return ag})),e.d(n,"schemeCategory10",(function(){return jm})),e.d(n,"schemeAccent",(function(){return Um})),e.d(n,"schemeDark2",(function(){return Fm})),e.d(n,"schemePaired",(function(){return Hm})),e.d(n,"schemePastel1",(function(){return Ym})),e.d(n,"schemePastel2",(function(){return Wm})),e.d(n,"schemeSet1",(function(){return Xm})),e.d(n,"schemeSet2",(function(){return Vm})),e.d(n,"schemeSet3",(function(){return Gm})),e.d(n,"schemeTableau10",(function(){return $m})),e.d(n,"interpolateBrBG",(function(){return Km})),e.d(n,"schemeBrBG",(function(){return Qm})),e.d(n,"interpolatePRGn",(function(){return tb})),e.d(n,"schemePRGn",(function(){return Jm})),e.d(n,"interpolatePiYG",(function(){return eb})),e.d(n,"schemePiYG",(function(){return nb})),e.d(n,"interpolatePuOr",(function(){return ib})),e.d(n,"schemePuOr",(function(){return rb})),e.d(n,"interpolateRdBu",(function(){return ab})),e.d(n,"schemeRdBu",(function(){return ob})),e.d(n,"interpolateRdGy",(function(){return cb})),e.d(n,"schemeRdGy",(function(){return ub})),e.d(n,"interpolateRdYlBu",(function(){return sb})),e.d(n,"schemeRdYlBu",(function(){return fb})),e.d(n,"interpolateRdYlGn",(function(){return hb})),e.d(n,"schemeRdYlGn",(function(){return lb})),e.d(n,"interpolateSpectral",(function(){return pb})),e.d(n,"schemeSpectral",(function(){return db})),e.d(n,"interpolateBuGn",(function(){return yb})),e.d(n,"schemeBuGn",(function(){return gb})),e.d(n,"interpolateBuPu",(function(){return mb})),e.d(n,"schemeBuPu",(function(){return vb})),e.d(n,"interpolateGnBu",(function(){return _b})),e.d(n,"schemeGnBu",(function(){return bb})),e.d(n,"interpolateOrRd",(function(){return wb})),e.d(n,"schemeOrRd",(function(){return xb})),e.d(n,"interpolatePuBuGn",(function(){return kb})),e.d(n,"schemePuBuGn",(function(){return Mb})),e.d(n,"interpolatePuBu",(function(){return Cb})),e.d(n,"schemePuBu",(function(){return Ab})),e.d(n,"interpolatePuRd",(function(){return Tb})),e.d(n,"schemePuRd",(function(){return Sb})),e.d(n,"interpolateRdPu",(function(){return Nb})),e.d(n,"schemeRdPu",(function(){return Eb})),e.d(n,"interpolateYlGnBu",(function(){return Lb})),e.d(n,"schemeYlGnBu",(function(){return Pb})),e.d(n,"interpolateYlGn",(function(){return Ob})),e.d(n,"schemeYlGn",(function(){return Rb})),e.d(n,"interpolateYlOrBr",(function(){return zb})),e.d(n,"schemeYlOrBr",(function(){return Ib})),e.d(n,"interpolateYlOrRd",(function(){return qb})),e.d(n,"schemeYlOrRd",(function(){return Bb})),e.d(n,"interpolateBlues",(function(){return jb})),e.d(n,"schemeBlues",(function(){return Db})),e.d(n,"interpolateGreens",(function(){return Fb})),e.d(n,"schemeGreens",(function(){return Ub})),e.d(n,"interpolateGreys",(function(){return Yb})),e.d(n,"schemeGreys",(function(){return Hb})),e.d(n,"interpolatePurples",(function(){return Xb})),e.d(n,"schemePurples",(function(){return Wb})),e.d(n,"interpolateReds",(function(){return Gb})),e.d(n,"schemeReds",(function(){return Vb})),e.d(n,"interpolateOranges",(function(){return Zb})),e.d(n,"schemeOranges",(function(){return $b})),e.d(n,"interpolateCividis",(function(){return Qb})),e.d(n,"interpolateCubehelixDefault",(function(){return Kb})),e.d(n,"interpolateRainbow",(function(){return e_})),e.d(n,"interpolateWarm",(function(){return Jb})),e.d(n,"interpolateCool",(function(){return t_})),e.d(n,"interpolateSinebow",(function(){return a_})),e.d(n,"interpolateTurbo",(function(){return u_})),e.d(n,"interpolateViridis",(function(){return f_})),e.d(n,"interpolateMagma",(function(){return s_})),e.d(n,"interpolateInferno",(function(){return l_})),e.d(n,"interpolatePlasma",(function(){return h_})),e.d(n,"create",(function(){return d_})),e.d(n,"creator",(function(){return rn})),e.d(n,"local",(function(){return g_})),e.d(n,"matcher",(function(){return yt})),e.d(n,"mouse",(function(){return Re})),e.d(n,"namespace",(function(){return kt})),e.d(n,"namespaces",(function(){return Mt})),e.d(n,"clientPoint",(function(){return Pe})),e.d(n,"select",(function(){return kn})),e.d(n,"selectAll",(function(){return v_})),e.d(n,"selection",(function(){return Mn})),e.d(n,"selector",(function(){return dt})),e.d(n,"selectorAll",(function(){return gt})),e.d(n,"style",(function(){return It})),e.d(n,"touch",(function(){return Le})),e.d(n,"touches",(function(){return m_})),e.d(n,"window",(function(){return Pt})),e.d(n,"event",(function(){return sn})),e.d(n,"customEvent",(function(){return yn})),e.d(n,"arc",(function(){return D_})),e.d(n,"area",(function(){return W_})),e.d(n,"line",(function(){return Y_})),e.d(n,"pie",(function(){return G_})),e.d(n,"areaRadial",(function(){return tx})),e.d(n,"radialArea",(function(){return tx})),e.d(n,"lineRadial",(function(){return J_})),e.d(n,"radialLine",(function(){return J_})),e.d(n,"pointRadial",(function(){return nx})),e.d(n,"linkHorizontal",(function(){return fx})),e.d(n,"linkVertical",(function(){return sx})),e.d(n,"linkRadial",(function(){return lx})),e.d(n,"symbol",(function(){return Ex})),e.d(n,"symbols",(function(){return Tx})),e.d(n,"symbolCircle",(function(){return hx})),e.d(n,"symbolCross",(function(){return dx})),e.d(n,"symbolDiamond",(function(){return yx})),e.d(n,"symbolSquare",(function(){return xx})),e.d(n,"symbolStar",(function(){return _x})),e.d(n,"symbolTriangle",(function(){return Mx})),e.d(n,"symbolWye",(function(){return Sx})),e.d(n,"curveBasisClosed",(function(){return Ix})),e.d(n,"curveBasisOpen",(function(){return Bx})),e.d(n,"curveBasis",(function(){return Rx})),e.d(n,"curveBundle",(function(){return Dx})),e.d(n,"curveCardinalClosed",(function(){return Yx})),e.d(n,"curveCardinalOpen",(function(){return Xx})),e.d(n,"curveCardinal",(function(){return Fx})),e.d(n,"curveCatmullRomClosed",(function(){return Qx})),e.d(n,"curveCatmullRomOpen",(function(){return Jx})),e.d(n,"curveCatmullRom",(function(){return $x})),e.d(n,"curveLinearClosed",(function(){return nw})),e.d(n,"curveLinear",(function(){return U_})),e.d(n,"curveMonotoneX",(function(){return fw})),e.d(n,"curveMonotoneY",(function(){return sw})),e.d(n,"curveNatural",(function(){return dw})),e.d(n,"curveStep",(function(){return gw})),e.d(n,"curveStepAfter",(function(){return vw})),e.d(n,"curveStepBefore",(function(){return yw})),e.d(n,"stack",(function(){return xw})),e.d(n,"stackOffsetExpand",(function(){return ww})),e.d(n,"stackOffsetDiverging",(function(){return Mw})),e.d(n,"stackOffsetNone",(function(){return mw})),e.d(n,"stackOffsetSilhouette",(function(){return kw})),e.d(n,"stackOffsetWiggle",(function(){return Aw})),e.d(n,"stackOrderAppearance",(function(){return Cw})),e.d(n,"stackOrderAscending",(function(){return Tw})),e.d(n,"stackOrderDescending",(function(){return Nw})),e.d(n,"stackOrderInsideOut",(function(){return Pw})),e.d(n,"stackOrderNone",(function(){return bw})),e.d(n,"stackOrderReverse",(function(){return Lw})),e.d(n,"timeInterval",(function(){return Og})),e.d(n,"timeMillisecond",(function(){return gy})),e.d(n,"timeMilliseconds",(function(){return yy})),e.d(n,"utcMillisecond",(function(){return gy})),e.d(n,"utcMilliseconds",(function(){return yy})),e.d(n,"timeSecond",(function(){return hy})),e.d(n,"timeSeconds",(function(){return dy})),e.d(n,"utcSecond",(function(){return hy})),e.d(n,"utcSeconds",(function(){return dy})),e.d(n,"timeMinute",(function(){return fy})),e.d(n,"timeMinutes",(function(){return sy})),e.d(n,"timeHour",(function(){return ay})),e.d(n,"timeHours",(function(){return uy})),e.d(n,"timeDay",(function(){return ry})),e.d(n,"timeDays",(function(){return iy})),e.d(n,"timeWeek",(function(){return Fg})),e.d(n,"timeWeeks",(function(){return $g})),e.d(n,"timeSunday",(function(){return Fg})),e.d(n,"timeSundays",(function(){return $g})),e.d(n,"timeMonday",(function(){return Hg})),e.d(n,"timeMondays",(function(){return Zg})),e.d(n,"timeTuesday",(function(){return Yg})),e.d(n,"timeTuesdays",(function(){return Qg})),e.d(n,"timeWednesday",(function(){return Wg})),e.d(n,"timeWednesdays",(function(){return Kg})),e.d(n,"timeThursday",(function(){return Xg})),e.d(n,"timeThursdays",(function(){return Jg})),e.d(n,"timeFriday",(function(){return Vg})),e.d(n,"timeFridays",(function(){return ty})),e.d(n,"timeSaturday",(function(){return Gg})),e.d(n,"timeSaturdays",(function(){return ny})),e.d(n,"timeMonth",(function(){return Dg})),e.d(n,"timeMonths",(function(){return jg})),e.d(n,"timeYear",(function(){return zg})),e.d(n,"timeYears",(function(){return Bg})),e.d(n,"utcMinute",(function(){return wm})),e.d(n,"utcMinutes",(function(){return Mm})),e.d(n,"utcHour",(function(){return bm})),e.d(n,"utcHours",(function(){return _m})),e.d(n,"utcDay",(function(){return Ry})),e.d(n,"utcDays",(function(){return Oy})),e.d(n,"utcWeek",(function(){return my})),e.d(n,"utcWeeks",(function(){return Ay})),e.d(n,"utcSunday",(function(){return my})),e.d(n,"utcSundays",(function(){return Ay})),e.d(n,"utcMonday",(function(){return by})),e.d(n,"utcMondays",(function(){return Cy})),e.d(n,"utcTuesday",(function(){return _y})),e.d(n,"utcTuesdays",(function(){return Sy})),e.d(n,"utcWednesday",(function(){return xy})),e.d(n,"utcWednesdays",(function(){return Ty})),e.d(n,"utcThursday",(function(){return wy})),e.d(n,"utcThursdays",(function(){return Ey})),e.d(n,"utcFriday",(function(){return My})),e.d(n,"utcFridays",(function(){return Ny})),e.d(n,"utcSaturday",(function(){return ky})),e.d(n,"utcSaturdays",(function(){return Py})),e.d(n,"utcMonth",(function(){return ym})),e.d(n,"utcMonths",(function(){return vm})),e.d(n,"utcYear",(function(){return zy})),e.d(n,"utcYears",(function(){return By})),e.d(n,"timeFormatDefaultLocale",(function(){return sm})),e.d(n,"timeFormat",(function(){return Hy})),e.d(n,"timeParse",(function(){return Yy})),e.d(n,"utcFormat",(function(){return Wy})),e.d(n,"utcParse",(function(){return Xy})),e.d(n,"timeFormatLocale",(function(){return Uy})),e.d(n,"isoFormat",(function(){return Rw})),e.d(n,"isoParse",(function(){return Ow})),e.d(n,"now",(function(){return Fe})),e.d(n,"timer",(function(){return We})),e.d(n,"timerFlush",(function(){return Xe})),e.d(n,"timeout",(function(){return Ze})),e.d(n,"interval",(function(){return Iw})),e.d(n,"transition",(function(){return Fr})),e.d(n,"active",(function(){return Qr})),e.d(n,"interrupt",(function(){return ur})),e.d(n,"voronoi",(function(){return _M})),e.d(n,"zoom",(function(){return OM})),e.d(n,"zoomTransform",(function(){return AM})),e.d(n,"zoomIdentity",(function(){return kM}));var r="5.16.0",i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},o=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var a=o(i),u=a.right,c=a.left,f=u,s=function(t,n){null==n&&(n=l);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function l(t,n){return[t,n]}var h=function(t,n,e){var r,i,o,a,u=t.length,c=n.length,f=new Array(u*c);for(null==e&&(e=l),r=o=0;r<u;++r)for(a=t[r],i=0;i<c;++i,++o)f[o]=e(a,n[i]);return f},d=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},p=function(t){return null===t?NaN:+t},g=function(t,n){var e,r,i=t.length,o=0,a=-1,u=0,c=0;if(null==n)for(;++a<i;)isNaN(e=p(t[a]))||(c+=(r=e-u)*(e-(u+=r/++o)));else for(;++a<i;)isNaN(e=p(n(t[a],a,t)))||(c+=(r=e-u)*(e-(u+=r/++o)));if(o>1)return c/(o-1)},y=function(t,n){var e=g(t,n);return e?Math.sqrt(e):e},v=function(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},m=Array.prototype,b=m.slice,_=m.map,x=function(t){return function(){return t}},w=function(t){return t},M=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},k=Math.sqrt(50),A=Math.sqrt(10),C=Math.sqrt(2),S=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=T(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function T(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=k?10:o>=A?5:o>=C?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=k?10:o>=A?5:o>=C?2:1)}function E(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=k?i*=10:o>=A?i*=5:o>=C&&(i*=2),n<t?-i:i}var N=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},P=function(){var t=w,n=v,e=N;function r(r){var i,o,a=r.length,u=new Array(a);for(i=0;i<a;++i)u[i]=t(r[i],i,r);var c=n(u),s=c[0],l=c[1],h=e(u,s,l);Array.isArray(h)||(h=E(s,l,h),h=M(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,g=new Array(d+1);for(i=0;i<=d;++i)(p=g[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<a;++i)s<=(o=u[i])&&o<=l&&g[f(h,o,0,d)].push(r[i]);return g}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(b.call(t)):x(t),r):e},r},L=function(t,n,e){if(null==e&&(e=p),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}},R=function(t,n,e){return t=_.call(t,p).sort(i),Math.ceil((e-n)/(2*(L(t,.75)-L(t,.25))*Math.pow(t.length,-1/3)))},O=function(t,n,e){return Math.ceil((e-n)/(3.5*y(t)*Math.pow(t.length,-1/3)))},I=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},z=function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=p(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))?--i:a+=e;if(i)return a/i},B=function(t,n){var e,r=t.length,o=-1,a=[];if(null==n)for(;++o<r;)isNaN(e=p(t[o]))||a.push(e);else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))||a.push(e);return L(a.sort(i),.5)},q=function(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--a]=r[n];return e},D=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},j=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},U=function(t,n){if(e=t.length){var e,r,o=0,a=0,u=t[a];for(null==n&&(n=i);++o<e;)(n(r=t[o],u)<0||0!==n(u,u))&&(u=r,a=o);return 0===n(u,u)?a:void 0}},F=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},H=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Y=function(t){if(!(i=t.length))return[];for(var n=-1,e=D(t,W),r=new Array(e);++n<e;)for(var i,o=-1,a=r[n]=new Array(i);++o<i;)a[o]=t[o][n];return r};function W(t){return t.length}var X=function(){return Y(arguments)},V=Array.prototype.slice,G=function(t){return t};function $(t){return"translate("+(t+.5)+",0)"}function Z(t){return"translate(0,"+(t+.5)+")"}function Q(t){return function(n){return+t(n)}}function K(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function J(){return!this.__axis}function tt(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,c=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",s=1===t||3===t?$:Z;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):G:i,p=Math.max(o,0)+u,g=n.range(),y=+g[0]+.5,v=+g[g.length-1]+.5,m=(n.bandwidth?K:Q)(n.copy()),b=l.selection?l.selection():l,_=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),k=x.select("line"),A=x.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),k=k.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",c*o)),A=A.merge(M.append("text").attr("fill","currentColor").attr(f,c*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==b&&(_=_.transition(l),x=x.transition(l),k=k.transition(l),A=A.transition(l),w=w.transition(l).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=m(t))?s(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:m(t))}))),w.remove(),_.attr("d",4===t||2==t?a?"M"+c*a+","+y+"H0.5V"+v+"H"+c*a:"M0.5,"+y+"V"+v:a?"M"+y+","+c*a+"V0.5H"+v+"V"+c*a:"M"+y+",0.5H"+v),x.attr("opacity",1).attr("transform",(function(t){return s(m(t))})),k.attr(f+"2",c*o),A.attr(f,c*p).text(d),b.filter(J).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=m}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=V.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:V.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:V.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=a=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(a=+t,l):a},l.tickPadding=function(t){return arguments.length?(u=+t,l):u},l}function nt(t){return tt(1,t)}function et(t){return tt(2,t)}function rt(t){return tt(3,t)}function it(t){return tt(4,t)}var ot={value:function(){}};function at(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new ut(r)}function ut(t){this._=t}function ct(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ft(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function st(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ot,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ut.prototype=at.prototype={constructor:ut,on:function(t,n){var e,r=this._,i=ct(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=st(r[e],t.name,n);else if(null==n)for(e in r)r[e]=st(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=ft(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ut(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var lt=at;function ht(){}var dt=function(t){return null==t?ht:function(){return this.querySelector(t)}};function pt(){return[]}var gt=function(t){return null==t?pt:function(){return this.querySelectorAll(t)}},yt=function(t){return function(){return this.matches(t)}},vt=function(t){return new Array(t.length)};function mt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}mt.prototype={constructor:mt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function bt(t,n,e,r,i,o){for(var a,u=0,c=n.length,f=o.length;u<f;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new mt(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function _t(t,n,e,r,i,o,a){var u,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(u=0;u<l;++u)(c=n[u])&&(d[u]=f="$"+a.call(c,c.__data__,u,n),f in s?i[u]=c:s[f]=c);for(u=0;u<h;++u)(c=s[f="$"+a.call(t,o[u],u,o)])?(r[u]=c,c.__data__=o[u],s[f]=null):e[u]=new mt(t,o[u]);for(u=0;u<l;++u)(c=n[u])&&s[d[u]]===c&&(i[u]=c)}function xt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var wt="http://www.w3.org/1999/xhtml",Mt={svg:"http://www.w3.org/2000/svg",xhtml:wt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},kt=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Mt.hasOwnProperty(n)?{space:Mt[n],local:t}:t};function At(t){return function(){this.removeAttribute(t)}}function Ct(t){return function(){this.removeAttributeNS(t.space,t.local)}}function St(t,n){return function(){this.setAttribute(t,n)}}function Tt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Et(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Nt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Pt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Lt(t){return function(){this.style.removeProperty(t)}}function Rt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Ot(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function It(t,n){return t.style.getPropertyValue(n)||Pt(t).getComputedStyle(t,null).getPropertyValue(n)}function zt(t){return function(){delete this[t]}}function Bt(t,n){return function(){this[t]=n}}function qt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Dt(t){return t.trim().split(/^|\s+/)}function jt(t){return t.classList||new Ut(t)}function Ut(t){this._node=t,this._names=Dt(t.getAttribute("class")||"")}function Ft(t,n){for(var e=jt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Ht(t,n){for(var e=jt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Yt(t){return function(){Ft(this,t)}}function Wt(t){return function(){Ht(this,t)}}function Xt(t,n){return function(){(n.apply(this,arguments)?Ft:Ht)(this,t)}}Ut.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Vt(){this.textContent=""}function Gt(t){return function(){this.textContent=t}}function $t(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Zt(){this.innerHTML=""}function Qt(t){return function(){this.innerHTML=t}}function Kt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Jt(){this.nextSibling&&this.parentNode.appendChild(this)}function tn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function nn(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===wt&&n.documentElement.namespaceURI===wt?n.createElement(t):n.createElementNS(e,t)}}function en(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var rn=function(t){var n=kt(t);return(n.local?en:nn)(n)};function on(){return null}function an(){var t=this.parentNode;t&&t.removeChild(this)}function un(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function cn(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var fn={},sn=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(fn={mouseenter:"mouseover",mouseleave:"mouseout"}));function ln(t,n,e){return t=hn(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function hn(t,n,e){return function(r){var i=sn;sn=r;try{t.call(this,this.__data__,n,e)}finally{sn=i}}}function dn(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function pn(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function gn(t,n,e){var r=fn.hasOwnProperty(t.type)?ln:hn;return function(i,o,a){var u,c=this.__on,f=r(n,o,a);if(c)for(var s=0,l=c.length;s<l;++s)if((u=c[s]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=f,u.capture=e),void(u.value=n);this.addEventListener(t.type,f,e),u={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(u):this.__on=[u]}}function yn(t,n,e,r){var i=sn;t.sourceEvent=sn,sn=t;try{return n.apply(e,r)}finally{sn=i}}function vn(t,n,e){var r=Pt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function mn(t,n){return function(){return vn(this,t,n)}}function bn(t,n){return function(){return vn(this,t,n.apply(this,arguments))}}var _n=[null];function xn(t,n){this._groups=t,this._parents=n}function wn(){return new xn([[document.documentElement]],_n)}xn.prototype=wn.prototype={constructor:xn,select:function(t){"function"!=typeof t&&(t=dt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=u[s])&&(a=t.call(o,o.__data__,s,u))&&("__data__"in o&&(a.__data__=o.__data__),f[s]=a);return new xn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=gt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,f=0;f<c;++f)(a=u[f])&&(r.push(t.call(a,a.__data__,f,u)),i.push(a));return new xn(r,i)},filter:function(t){"function"!=typeof t&&(t=yt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new xn(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each((function(t){p[++s]=t})),p;var e,r=n?_t:bt,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),f=new Array(a),s=0;s<a;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),g=p.length,y=c[s]=new Array(g),v=u[s]=new Array(g);r(l,h,y,v,f[s]=new Array(d),p,n);for(var m,b,_=0,x=0;_<g;++_)if(m=y[_]){for(_>=x&&(x=_+1);!(b=v[x])&&++x<g;);m._next=b||null}}return(u=new xn(u,i))._enter=c,u._exit=f,u},enter:function(){return new xn(this._enter||this._groups.map(vt),this._parents)},exit:function(){return new xn(this._exit||this._groups.map(vt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new xn(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=xt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,f=i[o]=new Array(c),s=0;s<c;++s)(a=u[s])&&(f[s]=a);f.sort(n)}return new xn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=kt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Ct:At:"function"==typeof n?e.local?Nt:Et:e.local?Tt:St)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Lt:"function"==typeof n?Ot:Rt)(t,n,null==e?"":e)):It(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?zt:"function"==typeof n?qt:Bt)(t,n)):this.node()[t]},classed:function(t,n){var e=Dt(t+"");if(arguments.length<2){for(var r=jt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Xt:n?Yt:Wt)(e,n))},text:function(t){return arguments.length?this.each(null==t?Vt:("function"==typeof t?$t:Gt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Zt:("function"==typeof t?Kt:Qt)(t)):this.node().innerHTML},raise:function(){return this.each(Jt)},lower:function(){return this.each(tn)},append:function(t){var n="function"==typeof t?t:rn(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:rn(t),r=null==n?on:"function"==typeof n?n:dt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(an)},clone:function(t){return this.select(t?cn:un)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=dn(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?gn:pn,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,f=0,s=u.length;f<s;++f)for(r=0,c=u[f];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?bn:mn)(t,n))}};var Mn=wn,kn=function(t){return"string"==typeof t?new xn([[document.querySelector(t)]],[document.documentElement]):new xn([[t]],_n)};function An(){sn.stopImmediatePropagation()}var Cn=function(){sn.preventDefault(),sn.stopImmediatePropagation()},Sn=function(t){var n=t.document.documentElement,e=kn(t).on("dragstart.drag",Cn,!0);"onselectstart"in n?e.on("selectstart.drag",Cn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function Tn(t,n){var e=t.document.documentElement,r=kn(t).on("dragstart.drag",null);n&&(r.on("click.drag",Cn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var En=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Nn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Pn(){}var Ln="\\s*([+-]?\\d+)\\s*",Rn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",On="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",In=/^#([0-9a-f]{3,8})$/,zn=new RegExp("^rgb\\("+[Ln,Ln,Ln]+"\\)$"),Bn=new RegExp("^rgb\\("+[On,On,On]+"\\)$"),qn=new RegExp("^rgba\\("+[Ln,Ln,Ln,Rn]+"\\)$"),Dn=new RegExp("^rgba\\("+[On,On,On,Rn]+"\\)$"),jn=new RegExp("^hsl\\("+[Rn,On,On]+"\\)$"),Un=new RegExp("^hsla\\("+[Rn,On,On,Rn]+"\\)$"),Fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Hn(){return this.rgb().formatHex()}function Yn(){return this.rgb().formatRgb()}function Wn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=In.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Xn(n):3===e?new Zn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Vn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Vn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=zn.exec(t))?new Zn(n[1],n[2],n[3],1):(n=Bn.exec(t))?new Zn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=qn.exec(t))?Vn(n[1],n[2],n[3],n[4]):(n=Dn.exec(t))?Vn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=jn.exec(t))?te(n[1],n[2]/100,n[3]/100,1):(n=Un.exec(t))?te(n[1],n[2]/100,n[3]/100,n[4]):Fn.hasOwnProperty(t)?Xn(Fn[t]):"transparent"===t?new Zn(NaN,NaN,NaN,0):null}function Xn(t){return new Zn(t>>16&255,t>>8&255,255&t,1)}function Vn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Zn(t,n,e,r)}function Gn(t){return t instanceof Pn||(t=Wn(t)),t?new Zn((t=t.rgb()).r,t.g,t.b,t.opacity):new Zn}function $n(t,n,e,r){return 1===arguments.length?Gn(t):new Zn(t,n,e,null==r?1:r)}function Zn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Qn(){return"#"+Jn(this.r)+Jn(this.g)+Jn(this.b)}function Kn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Jn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function te(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new re(t,n,e,r)}function ne(t){if(t instanceof re)return new re(t.h,t.s,t.l,t.opacity);if(t instanceof Pn||(t=Wn(t)),!t)return new re;if(t instanceof re)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new re(a,u,c,t.opacity)}function ee(t,n,e,r){return 1===arguments.length?ne(t):new re(t,n,e,null==r?1:r)}function re(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ie(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function oe(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}En(Pn,Wn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Hn,formatHex:Hn,formatHsl:function(){return ne(this).formatHsl()},formatRgb:Yn,toString:Yn}),En(Zn,$n,Nn(Pn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Qn,formatHex:Qn,formatRgb:Kn,toString:Kn})),En(re,ee,Nn(Pn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Zn(ie(t>=240?t-240:t+120,i,r),ie(t,i,r),ie(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ae=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return oe((e-r/n)*n,a,i,o,u)}},ue=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return oe((e-r/n)*n,i,o,a,u)}},ce=function(t){return function(){return t}};function fe(t,n){return function(e){return t+e*n}}function se(t,n){var e=n-t;return e?fe(t,e>180||e<-180?e-360*Math.round(e/360):e):ce(isNaN(t)?n:t)}function le(t){return 1==(t=+t)?he:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ce(isNaN(n)?e:n)}}function he(t,n){var e=n-t;return e?fe(t,e):ce(isNaN(t)?n:t)}var de=function t(n){var e=le(n);function r(t,n){var r=e((t=$n(t)).r,(n=$n(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=he(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function pe(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=$n(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}var ge=pe(ae),ye=pe(ue),ve=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function me(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}var be=function(t,n){return(me(n)?ve:_e)(t,n)};function _e(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Ee(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}var xe=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},we=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Me=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Ee(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},ke=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ae=new RegExp(ke.source,"g");var Ce,Se,Te=function(t,n){var e,r,i,o=ke.lastIndex=Ae.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=ke.exec(t))&&(r=Ae.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:we(e,r)})),o=Ae.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})},Ee=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?ce(n):("number"===r?we:"string"===r?(e=Wn(n))?(n=e,de):Te:n instanceof Wn?de:n instanceof Date?xe:me(n)?ve:Array.isArray(n)?_e:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Me:we)(t,n)},Ne=function(){for(var t,n=sn;t=n.sourceEvent;)n=t;return n},Pe=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},Le=function(t,n,e){arguments.length<3&&(e=n,n=Ne().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Pe(t,r);return null},Re=function(t){var n=Ne();return n.changedTouches&&(n=n.changedTouches[0]),Pe(t,n)},Oe=0,Ie=0,ze=0,Be=0,qe=0,De=0,je="object"==typeof performance&&performance.now?performance:Date,Ue="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Fe(){return qe||(Ue(He),qe=je.now()+De)}function He(){qe=0}function Ye(){this._call=this._time=this._next=null}function We(t,n,e){var r=new Ye;return r.restart(t,n,e),r}function Xe(){Fe(),++Oe;for(var t,n=Ce;n;)(t=qe-n._time)>=0&&n._call.call(null,t),n=n._next;--Oe}function Ve(){qe=(Be=je.now())+De,Oe=Ie=0;try{Xe()}finally{Oe=0,function(){var t,n,e=Ce,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ce=n);Se=t,$e(r)}(),qe=0}}function Ge(){var t=je.now(),n=t-Be;n>1e3&&(De-=n,Be=t)}function $e(t){Oe||(Ie&&(Ie=clearTimeout(Ie)),t-qe>24?(t<1/0&&(Ie=setTimeout(Ve,t-je.now()-De)),ze&&(ze=clearInterval(ze))):(ze||(Be=je.now(),ze=setInterval(Ge,1e3)),Oe=1,Ue(Ve)))}Ye.prototype=We.prototype={constructor:Ye,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Fe():+e)+(null==n?0:+n),this._next||Se===this||(Se?Se._next=this:Ce=this,Se=this),this._call=t,this._time=e,$e()},stop:function(){this._call&&(this._call=null,this._time=1/0,$e())}};var Ze=function(t,n,e){var r=new Ye;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Qe=lt("start","end","cancel","interrupt"),Ke=[],Je=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(1!==e.state)return u();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return Ze(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(Ze((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=We((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Qe,tween:Ke,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function tr(t,n){var e=er(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function nr(t,n){var e=er(t,n);if(e.state>3)throw new Error("too late; already running");return e}function er(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var rr,ir,or,ar,ur=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}},cr=180/Math.PI,fr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sr=function(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*cr,skewX:Math.atan(c)*cr,scaleX:a,scaleY:u}};function lr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:we(t,i)},{i:c-2,x:we(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:we(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:we(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,c),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:we(t,e)},{i:u-2,x:we(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var hr=lr((function(t){return"none"===t?fr:(rr||(rr=document.createElement("DIV"),ir=document.documentElement,or=document.defaultView),rr.style.transform=t,t=or.getComputedStyle(ir.appendChild(rr),null).getPropertyValue("transform"),ir.removeChild(rr),t=t.slice(7,-1).split(","),sr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),dr=lr((function(t){return null==t?fr:(ar||(ar=document.createElementNS("http://www.w3.org/2000/svg","g")),ar.setAttribute("transform",t),(t=ar.transform.baseVal.consolidate())?(t=t.matrix,sr(t.a,t.b,t.c,t.d,t.e,t.f)):fr)}),", ",")",")");function pr(t,n){var e,r;return function(){var i=nr(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function gr(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=nr(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=u;break}c===f&&i.push(u)}o.tween=i}}function yr(t,n,e){var r=t._id;return t.each((function(){var t=nr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return er(t,r).value[n]}}var vr=function(t,n){var e;return("number"==typeof n?we:n instanceof Wn?de:(e=Wn(n))?(n=e,de):Te)(t,n)};function mr(t){return function(){this.removeAttribute(t)}}function br(t){return function(){this.removeAttributeNS(t.space,t.local)}}function _r(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function xr(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function wr(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttribute(t)}}function Mr(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttributeNS(t.space,t.local)}}function kr(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Ar(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Cr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ar(t,i)),e}return i._value=n,i}function Sr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&kr(t,i)),e}return i._value=n,i}function Tr(t,n){return function(){tr(this,t).delay=+n.apply(this,arguments)}}function Er(t,n){return n=+n,function(){tr(this,t).delay=n}}function Nr(t,n){return function(){nr(this,t).duration=+n.apply(this,arguments)}}function Pr(t,n){return n=+n,function(){nr(this,t).duration=n}}function Lr(t,n){if("function"!=typeof n)throw new Error;return function(){nr(this,t).ease=n}}function Rr(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?tr:nr;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Or=Mn.prototype.constructor;function Ir(t){return function(){this.style.removeProperty(t)}}function zr(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Br(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&zr(t,o,e)),r}return o._value=n,o}function qr(t){return function(n){this.textContent=t.call(this,n)}}function Dr(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&qr(r)),n}return r._value=t,r}var jr=0;function Ur(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Fr(t){return Mn().transition(t)}function Hr(){return++jr}var Yr=Mn.prototype;function Wr(t){return t*t*t}function Xr(t){return--t*t*t+1}function Vr(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Ur.prototype=Fr.prototype={constructor:Ur,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=dt(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,f=r[a],s=f.length,l=o[a]=new Array(s),h=0;h<s;++h)(u=f[h])&&(c=t.call(u,u.__data__,h,f))&&("__data__"in u&&(c.__data__=u.__data__),l[h]=c,Je(l[h],n,e,h,l,er(u,e)));return new Ur(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=gt(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,f=r[u],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=er(c,e),g=0,y=d.length;g<y;++g)(h=d[g])&&Je(h,n,e,g,d,p);o.push(d),a.push(c)}return new Ur(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=yt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new Ur(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new Ur(a,this._parents,this._name,this._id)},selection:function(){return new Or(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Hr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)if(a=u[f]){var s=er(a,n);Je(a,t,e,f,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Ur(r,this._parents,t,e)},call:Yr.call,nodes:Yr.nodes,node:Yr.node,size:Yr.size,empty:Yr.empty,each:Yr.each,on:function(t,n){var e=this._id;return arguments.length<2?er(this.node(),e).on.on(t):this.each(Rr(e,t,n))},attr:function(t,n){var e=kt(t),r="transform"===e?dr:vr;return this.attrTween(t,"function"==typeof n?(e.local?Mr:wr)(e,r,yr(this,"attr."+t,n)):null==n?(e.local?br:mr)(e):(e.local?xr:_r)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=kt(t);return this.tween(e,(r.local?Cr:Sr)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?hr:vr;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=It(this,t),a=(this.style.removeProperty(t),It(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,Ir(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=It(this,t),u=e(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=It(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=n(r=a,u))}}(t,r,yr(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var c=nr(this,t),f=c.on,s=null==c.value[a]?o||(o=Ir(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(u,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=It(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Br(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(yr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Dr(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=er(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?pr:gr)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Tr:Er)(n,t)):er(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Nr:Pr)(n,t)):er(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Lr(n,t)):er(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};e.each((function(){var e=nr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(c)),e.on=n}))}))}};var Gr={time:null,delay:0,duration:250,ease:Vr};function $r(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Gr.time=Fe(),Gr;return e}Mn.prototype.interrupt=function(t){return this.each((function(){ur(this,t)}))},Mn.prototype.transition=function(t){var n,e;t instanceof Ur?(n=t._id,t=t._name):(n=Hr(),(e=Gr).time=Fe(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)(a=u[f])&&Je(a,t,n,f,u,e||$r(a,n));return new Ur(r,this._parents,t,n)};var Zr=[null],Qr=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Ur([[t]],Zr,n,+r);return null},Kr=function(t){return function(){return t}},Jr=function(t,n,e){this.target=t,this.type=n,this.selection=e};function ti(){sn.stopImmediatePropagation()}var ni=function(){sn.preventDefault(),sn.stopImmediatePropagation()},ei={name:"drag"},ri={name:"space"},ii={name:"handle"},oi={name:"center"};function ai(t){return[+t[0],+t[1]]}function ui(t){return[ai(t[0]),ai(t[1])]}function ci(t){return function(n){return Le(n,sn.touches,t)}}var fi={name:"x",handles:["w","e"].map(vi),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},si={name:"y",handles:["n","s"].map(vi),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},li={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(vi),input:function(t){return null==t?null:ui(t)},output:function(t){return t}},hi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},di={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},pi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},gi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},yi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function vi(t){return{type:t}}function mi(){return!sn.ctrlKey&&!sn.button}function bi(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function _i(){return navigator.maxTouchPoints||"ontouchstart"in this}function xi(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function wi(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Mi(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function ki(){return Si(fi)}function Ai(){return Si(si)}var Ci=function(){return Si(li)};function Si(t){var n,e=bi,r=mi,i=_i,o=!0,a=lt("start","brush","end"),u=6;function c(n){var e=n.property("__brush",g).selectAll(".overlay").data([vi("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",hi.overlay).merge(e).each((function(){var t=xi(this).extent;kn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([vi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",hi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return hi[t.type]})),n.each(f).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(){var t=kn(this),n=xi(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-u/2:n[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-u/2:n[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,n,e){var r=t.__brush.emitter;return!r||e&&r.clean?new l(t,n,e):r}function l(t,n,e){this.that=t,this.args=n,this.state=t.__brush,this.active=0,this.clean=e}function h(){if((!n||sn.touches)&&r.apply(this,arguments)){var e,i,a,u,c,l,h,d,p,g,y,v=this,m=sn.target.__data__.type,b="selection"===(o&&sn.metaKey?m="overlay":m)?ei:o&&sn.altKey?oi:ii,_=t===si?null:gi[m],x=t===fi?null:yi[m],w=xi(v),M=w.extent,k=w.selection,A=M[0][0],C=M[0][1],S=M[1][0],T=M[1][1],E=0,N=0,P=_&&x&&o&&sn.shiftKey,L=sn.touches?ci(sn.changedTouches[0].identifier):Re,R=L(v),O=R,I=s(v,arguments,!0).beforestart();"overlay"===m?(k&&(p=!0),w.selection=k=[[e=t===si?A:R[0],a=t===fi?C:R[1]],[c=t===si?S:e,h=t===fi?T:a]]):(e=k[0][0],a=k[0][1],c=k[1][0],h=k[1][1]),i=e,u=a,l=c,d=h;var z=kn(v).attr("pointer-events","none"),B=z.selectAll(".overlay").attr("cursor",hi[m]);if(sn.touches)I.moved=D,I.ended=U;else{var q=kn(sn.view).on("mousemove.brush",D,!0).on("mouseup.brush",U,!0);o&&q.on("keydown.brush",F,!0).on("keyup.brush",H,!0),Sn(sn.view)}ti(),ur(v),f.call(v),I.start()}function D(){var t=L(v);!P||g||y||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?y=!0:g=!0),O=t,p=!0,ni(),j()}function j(){var t;switch(E=O[0]-R[0],N=O[1]-R[1],b){case ri:case ei:_&&(E=Math.max(A-e,Math.min(S-c,E)),i=e+E,l=c+E),x&&(N=Math.max(C-a,Math.min(T-h,N)),u=a+N,d=h+N);break;case ii:_<0?(E=Math.max(A-e,Math.min(S-e,E)),i=e+E,l=c):_>0&&(E=Math.max(A-c,Math.min(S-c,E)),i=e,l=c+E),x<0?(N=Math.max(C-a,Math.min(T-a,N)),u=a+N,d=h):x>0&&(N=Math.max(C-h,Math.min(T-h,N)),u=a,d=h+N);break;case oi:_&&(i=Math.max(A,Math.min(S,e-E*_)),l=Math.max(A,Math.min(S,c+E*_))),x&&(u=Math.max(C,Math.min(T,a-N*x)),d=Math.max(C,Math.min(T,h+N*x)))}l<i&&(_*=-1,t=e,e=c,c=t,t=i,i=l,l=t,m in di&&B.attr("cursor",hi[m=di[m]])),d<u&&(x*=-1,t=a,a=h,h=t,t=u,u=d,d=t,m in pi&&B.attr("cursor",hi[m=pi[m]])),w.selection&&(k=w.selection),g&&(i=k[0][0],l=k[1][0]),y&&(u=k[0][1],d=k[1][1]),k[0][0]===i&&k[0][1]===u&&k[1][0]===l&&k[1][1]===d||(w.selection=[[i,u],[l,d]],f.call(v),I.brush())}function U(){if(ti(),sn.touches){if(sn.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else Tn(sn.view,p),q.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),B.attr("cursor",hi.overlay),w.selection&&(k=w.selection),wi(k)&&(w.selection=null,f.call(v)),I.end()}function F(){switch(sn.keyCode){case 16:P=_&&x;break;case 18:b===ii&&(_&&(c=l-E*_,e=i+E*_),x&&(h=d-N*x,a=u+N*x),b=oi,j());break;case 32:b!==ii&&b!==oi||(_<0?c=l-E:_>0&&(e=i-E),x<0?h=d-N:x>0&&(a=u-N),b=ri,B.attr("cursor",hi.selection),j());break;default:return}ni()}function H(){switch(sn.keyCode){case 16:P&&(g=y=P=!1,j());break;case 18:b===oi&&(_<0?c=l:_>0&&(e=i),x<0?h=d:x>0&&(a=u),b=ii,j());break;case 32:b===ri&&(sn.altKey?(_&&(c=l-E*_,e=i+E*_),x&&(h=d-N*x,a=u+N*x),b=oi):(_<0?c=l:_>0&&(e=i),x<0?h=d:x>0&&(a=u),b=ii),B.attr("cursor",hi[m]),j());break;default:return}ni()}}function d(){s(this,arguments).moved()}function p(){s(this,arguments).ended()}function g(){var n=this.__brush||{selection:null};return n.extent=ui(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e){n.selection?n.on("start.brush",(function(){s(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){s(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=s(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),u=Ee(o,a);function c(t){r.selection=1===t&&null===a?null:u(t),f.call(n),i.brush()}return null!==o&&null!==a?c:c(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),a=s(n,r).beforestart();ur(n),i.selection=null===o?null:o,f.call(n),a.start().brush().end()}))},c.clear=function(t){c.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){yn(new Jr(c,n,t.output(this.state.selection)),a.apply,a,[n,this.that,this.args])}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:Kr(ui(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:Kr(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:Kr(!!t),c):i},c.handleSize=function(t){return arguments.length?(u=+t,c):u},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=a.on.apply(a,arguments);return t===a?c:t},c}var Ti=Math.cos,Ei=Math.sin,Ni=Math.PI,Pi=Ni/2,Li=2*Ni,Ri=Math.max;function Oi(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var Ii=function(){var t=0,n=null,e=null,r=null;function i(i){var o,a,u,c,f,s,l=i.length,h=[],d=M(l),p=[],g=[],y=g.groups=new Array(l),v=new Array(l*l);for(o=0,f=-1;++f<l;){for(a=0,s=-1;++s<l;)a+=i[f][s];h.push(a),p.push(M(l)),o+=a}for(n&&d.sort((function(t,e){return n(h[t],h[e])})),e&&p.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=Ri(0,Li-t*l)/o)?t:Li/l,a=0,f=-1;++f<l;){for(u=a,s=-1;++s<l;){var m=d[f],b=p[m][s],_=i[m][b],x=a,w=a+=_*o;v[b*l+m]={index:m,subindex:b,startAngle:x,endAngle:w,value:_}}y[m]={index:m,startAngle:u,endAngle:a,value:h[m]},a+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var k=v[s*l+f],A=v[f*l+s];(k.value||A.value)&&g.push(k.value<A.value?{source:A,target:k}:{source:k,target:A})}return r?g.sort(r):g}return i.padAngle=function(n){return arguments.length?(t=Ri(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Oi(t))._=t,i):r&&r._},i},zi=Array.prototype.slice,Bi=function(t){return function(){return t}},qi=Math.PI,Di=2*qi,ji=Di-1e-6;function Ui(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Fi(){return new Ui}Ui.prototype=Fi.prototype={constructor:Ui,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,c=r-n,f=o-t,s=a-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*u-c*f)>1e-6&&i){var h=e-o,d=r-a,p=u*u+c*c,g=h*h+d*d,y=Math.sqrt(p),v=Math.sqrt(l),m=i*Math.tan((qi-Math.acos((p+l-g)/(2*y*v)))/2),b=m/v,_=m/y;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*f)+","+(n+b*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+_*u)+","+(this._y1=n+_*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),c=t+a,f=n+u,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%Di+Di),l>ji?this._+="A"+e+","+e+",0,1,"+s+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=qi)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Hi=Fi;function Yi(t){return t.source}function Wi(t){return t.target}function Xi(t){return t.radius}function Vi(t){return t.startAngle}function Gi(t){return t.endAngle}var $i=function(){var t=Yi,n=Wi,e=Xi,r=Vi,i=Gi,o=null;function a(){var a,u=zi.call(arguments),c=t.apply(this,u),f=n.apply(this,u),s=+e.apply(this,(u[0]=c,u)),l=r.apply(this,u)-Pi,h=i.apply(this,u)-Pi,d=s*Ti(l),p=s*Ei(l),g=+e.apply(this,(u[0]=f,u)),y=r.apply(this,u)-Pi,v=i.apply(this,u)-Pi;if(o||(o=a=Hi()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===y&&h===v||(o.quadraticCurveTo(0,0,g*Ti(y),g*Ei(y)),o.arc(0,0,g,y,v)),o.quadraticCurveTo(0,0,d,p),o.closePath(),a)return o=null,a+""||null}return a.radius=function(t){return arguments.length?(e="function"==typeof t?t:Bi(+t),a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Bi(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Bi(+t),a):i},a.source=function(n){return arguments.length?(t=n,a):t},a.target=function(t){return arguments.length?(n=t,a):n},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a};function Zi(){}function Qi(t,n){var e=new Zi;if(t instanceof Zi)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}Zi.prototype=Qi.prototype={constructor:Zi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Ki=Qi,Ji=function(){var t,n,e,r=[],i=[];function o(e,i,a,u){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=Ki(),g=a();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each((function(t,n){u(g,n,o(t,i,a,u))})),g}return e={object:function(t){return o(t,0,to,no)},map:function(t){return o(t,0,eo,ro)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,u=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each((function(n,e){a.push({key:e,values:t(n,o)})}))),null!=u?a.sort((function(t,n){return u(t.key,n.key)})):a}(o(t,0,eo,ro),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function to(){return{}}function no(t,n,e){t[n]=e}function eo(){return Ki()}function ro(t,n,e){t.set(n,e)}function io(){}var oo=Ki.prototype;function ao(t,n){var e=new io;if(t instanceof io)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}io.prototype=ao.prototype={constructor:io,has:oo.has,add:function(t){return this["$"+(t+="")]=t,this},remove:oo.remove,clear:oo.clear,values:oo.keys,size:oo.size,empty:oo.empty,each:oo.each};var uo=ao,co=function(t){var n=[];for(var e in t)n.push(e);return n},fo=function(t){var n=[];for(var e in t)n.push(t[e]);return n},so=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},lo=Math.PI/180,ho=180/Math.PI;function po(t){if(t instanceof vo)return new vo(t.l,t.a,t.b,t.opacity);if(t instanceof Ao)return Co(t);t instanceof Zn||(t=Gn(t));var n,e,r=xo(t.r),i=xo(t.g),o=xo(t.b),a=mo((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=a:(n=mo((.4360747*r+.3850649*i+.1430804*o)/.96422),e=mo((.0139322*r+.0971045*i+.7141733*o)/.82521)),new vo(116*a-16,500*(n-a),200*(a-e),t.opacity)}function go(t,n){return new vo(t,0,0,null==n?1:n)}function yo(t,n,e,r){return 1===arguments.length?po(t):new vo(t,n,e,null==r?1:r)}function vo(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function mo(t){return t>6/29*(6/29)*(6/29)?Math.pow(t,1/3):t/(6/29*3*(6/29))+4/29}function bo(t){return t>6/29?t*t*t:6/29*3*(6/29)*(t-4/29)}function _o(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function xo(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function wo(t){if(t instanceof Ao)return new Ao(t.h,t.c,t.l,t.opacity);if(t instanceof vo||(t=po(t)),0===t.a&&0===t.b)return new Ao(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*ho;return new Ao(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Mo(t,n,e,r){return 1===arguments.length?wo(t):new Ao(e,n,t,null==r?1:r)}function ko(t,n,e,r){return 1===arguments.length?wo(t):new Ao(t,n,e,null==r?1:r)}function Ao(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Co(t){if(isNaN(t.h))return new vo(t.l,0,0,t.opacity);var n=t.h*lo;return new vo(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}En(vo,yo,Nn(Pn,{brighter:function(t){return new vo(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new vo(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Zn(_o(3.1338561*(n=.96422*bo(n))-1.6168667*(t=1*bo(t))-.4906146*(e=.82521*bo(e))),_o(-.9787684*n+1.9161415*t+.033454*e),_o(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),En(Ao,ko,Nn(Pn,{brighter:function(t){return new Ao(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Ao(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Co(this).rgb()}}));var So=-.29227,To=-1.7884503806,Eo=3.5172982438,No=-.6557636667999999;function Po(t){if(t instanceof Ro)return new Ro(t.h,t.s,t.l,t.opacity);t instanceof Zn||(t=Gn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(No*r+To*n-Eo*e)/(No+To-Eo),o=r-i,a=(1.97294*(e-i)-So*o)/-.90649,u=Math.sqrt(a*a+o*o)/(1.97294*i*(1-i)),c=u?Math.atan2(a,o)*ho-120:NaN;return new Ro(c<0?c+360:c,u,i,t.opacity)}function Lo(t,n,e,r){return 1===arguments.length?Po(t):new Ro(t,n,e,null==r?1:r)}function Ro(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}En(Ro,Lo,Nn(Pn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ro(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ro(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*lo,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Zn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(So*r+-.90649*i)),255*(n+e*(1.97294*r)),this.opacity)}}));var Oo=Array.prototype.slice,Io=function(t,n){return t-n},zo=function(t){return function(){return t}},Bo=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=qo(t,n[r]))return e;return 0};function qo(t,n){for(var e=n[0],r=n[1],i=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var c=t[o],f=c[0],s=c[1],l=t[u],h=l[0],d=l[1];if(Do(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function Do(t,n,e){var r,i,o,a;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],a=n[r],i<=o&&o<=a||a<=o&&o<=i)}var jo=function(){},Uo=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],Fo=function(){var t=1,n=1,e=N,r=u;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Io);else{var r=v(t),i=r[0],a=r[1];n=E(i,a,n),n=M(Math.floor(i/n)*n,Math.floor(a/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],u=[];return function(e,r,i){var o,u,c,f,s,l,h=new Array,d=new Array;o=u=-1,f=e[0]>=r,Uo[f<<1].forEach(p);for(;++o<t-1;)c=f,f=e[o+1]>=r,Uo[c|f<<1].forEach(p);Uo[f<<0].forEach(p);for(;++u<n-1;){for(o=-1,f=e[u*t+t]>=r,s=e[u*t]>=r,Uo[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[u*t+t+o+1]>=r,l=s,s=e[u*t+o+1]>=r,Uo[c|f<<1|s<<2|l<<3].forEach(p);Uo[f|s<<3].forEach(p)}o=-1,s=e[u*t]>=r,Uo[s<<2].forEach(p);for(;++o<t-1;)l=s,s=e[u*t+o+1]>=r,Uo[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+u],c=[t[1][0]+o,t[1][1]+u],f=a(r),s=a(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}Uo[s<<3].forEach(p)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):u.push(t)})),u.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==Bo((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function a(n){return 2*n[0]+n[1]*(t+1)*4}function u(e,r,i){e.forEach((function(e){var o,a=e[0],u=e[1],c=0|a,f=0|u,s=r[f*t+c];a>0&&a<t&&c===a&&(o=r[f*t+c-1],e[0]=a+(i-o)/(s-o)-.5),u>0&&u<n&&f===u&&(o=r[(f-1)*t+c],e[1]=u+(i-o)/(s-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?zo(Oo.call(t)):zo(t),i):e},i.smooth=function(t){return arguments.length?(r=t?u:jo,i):r===u},i};function Ho(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),a=0;a<i;++a)for(var u=0,c=0;u<r+e;++u)u<r&&(c+=t.data[u+a*r]),u>=e&&(u>=o&&(c-=t.data[u-o+a*r]),n.data[u-e+a*r]=c/Math.min(u+1,r-1+o-u,o))}function Yo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),a=0;a<r;++a)for(var u=0,c=0;u<i+e;++u)u<i&&(c+=t.data[a+u*r]),u>=e&&(u>=o&&(c-=t.data[a+(u-o)*r]),n.data[a+(u-e)*r]=c/Math.min(u+1,i-1+o-u,o))}function Wo(t){return t[0]}function Xo(t){return t[1]}function Vo(){return 1}var Go=function(){var t=Wo,n=Xo,e=Vo,r=960,i=500,o=20,a=2,u=3*o,c=r+2*u>>a,f=i+2*u>>a,s=zo(20);function l(r){var i=new Float32Array(c*f),l=new Float32Array(c*f);r.forEach((function(r,o,s){var l=+t(r,o,s)+u>>a,h=+n(r,o,s)+u>>a,d=+e(r,o,s);l>=0&&l<c&&h>=0&&h<f&&(i[l+h*c]+=d)})),Ho({width:c,height:f,data:i},{width:c,height:f,data:l},o>>a),Yo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>a),Ho({width:c,height:f,data:i},{width:c,height:f,data:l},o>>a),Yo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>a),Ho({width:c,height:f,data:i},{width:c,height:f,data:l},o>>a),Yo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>a);var d=s(i);if(!Array.isArray(d)){var p=I(i);d=E(0,p,d),(d=M(0,Math.floor(p/d)*d,d)).shift()}return Fo().thresholds(d).size([c,f])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*a),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(g)}function g(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function y(){return c=r+2*(u=3*o)>>a,f=i+2*u>>a,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:zo(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:zo(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:zo(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,y()},l.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),y()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?zo(Oo.call(t)):zo(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),y()},l},$o=function(t){return function(){return t}};function Zo(t,n,e,r,i,o,a,u,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=u,this.dy=c,this._=f}function Qo(){return!sn.ctrlKey&&!sn.button}function Ko(){return this.parentNode}function Jo(t){return null==t?{x:sn.x,y:sn.y}:t}function ta(){return navigator.maxTouchPoints||"ontouchstart"in this}Zo.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var na=function(){var t,n,e,r,i=Qo,o=Ko,a=Jo,u=ta,c={},f=lt("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(u).on("touchstart.drag",y).on("touchmove.drag",v).on("touchend.drag touchcancel.drag",m).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var a=b("mouse",o.apply(this,arguments),Re,this,arguments);a&&(kn(sn.view).on("mousemove.drag",p,!0).on("mouseup.drag",g,!0),Sn(sn.view),An(),e=!1,t=sn.clientX,n=sn.clientY,a("start"))}}function p(){if(Cn(),!e){var r=sn.clientX-t,i=sn.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function g(){kn(sn.view).on("mousemove.drag mouseup.drag",null),Tn(sn.view,e),Cn(),c.mouse("end")}function y(){if(i.apply(this,arguments)){var t,n,e=sn.changedTouches,r=o.apply(this,arguments),a=e.length;for(t=0;t<a;++t)(n=b(e[t].identifier,r,Le,this,arguments))&&(An(),n("start"))}}function v(){var t,n,e=sn.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(Cn(),n("drag"))}function m(){var t,n,e=sn.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(An(),n("end"))}function b(t,n,e,r,i){var o,u,l,d=e(n,t),p=f.copy();if(yn(new Zo(h,"beforestart",o,t,s,d[0],d[1],0,0,p),(function(){return null!=(sn.subject=o=a.apply(r,i))&&(u=o.x-d[0]||0,l=o.y-d[1]||0,!0)})))return function a(f){var g,y=d;switch(f){case"start":c[t]=a,g=s++;break;case"end":delete c[t],--s;case"drag":d=e(n,t),g=s}yn(new Zo(h,f,o,t,g,d[0]+u,d[1]+l,d[0]-y[0],d[1]-y[1],p),p.apply,p,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:$o(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:$o(t),h):o},h.subject=function(t){return arguments.length?(a="function"==typeof t?t:$o(t),h):a},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:$o(!!t),h):u},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},ea={},ra={};function ia(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function oa(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function aa(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function ua(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+aa(-n,6):n>9999?"+"+aa(n,6):aa(n,4))+"-"+aa(t.getUTCMonth()+1,2)+"-"+aa(t.getUTCDate(),2)+(o?"T"+aa(e,2)+":"+aa(r,2)+":"+aa(i,2)+"."+aa(o,3)+"Z":i?"T"+aa(e,2)+":"+aa(r,2)+":"+aa(i,2)+"Z":r||e?"T"+aa(e,2)+":"+aa(r,2)+"Z":"")}var ca=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,c=o<=0,f=!1;function s(){if(c)return ra;if(f)return f=!1,ea;var n,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=o?c=!0:10===(r=t.charCodeAt(a++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(n=a++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=s())!==ra;){for(var l=[];r!==ea&&r!==ra;)l.push(r),r=s();n&&null==(l=n(l,u++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?ua(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=ia(t);return function(r,i){return n(e(r),i,t)}}(t,n):ia(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=oa(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=oa(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}},fa=ca(","),sa=fa.parse,la=fa.parseRows,ha=fa.format,da=fa.formatBody,pa=fa.formatRows,ga=fa.formatRow,ya=fa.formatValue,va=ca("\t"),ma=va.parse,ba=va.parseRows,_a=va.format,xa=va.formatBody,wa=va.formatRows,Ma=va.formatRow,ka=va.formatValue;function Aa(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Ca&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}var Ca=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Sa(t){return+t}function Ta(t){return t*t}function Ea(t){return t*(2-t)}function Na(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var Pa=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),La=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Ra=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Oa=Math.PI,Ia=Oa/2;function za(t){return 1==+t?1:1-Math.cos(t*Ia)}function Ba(t){return Math.sin(t*Ia)}function qa(t){return(1-Math.cos(Oa*t))/2}function Da(t){return 1.0009775171065494*(Math.pow(2,-10*t)-.0009765625)}function ja(t){return Da(1-+t)}function Ua(t){return 1-Da(t)}function Fa(t){return((t*=2)<=1?Da(1-t):2-Da(t-1))/2}function Ha(t){return 1-Math.sqrt(1-t*t)}function Ya(t){return Math.sqrt(1- --t*t)}function Wa(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function Xa(t){return 1-Va(1-t)}function Va(t){return(t=+t)<4/11?7.5625*t*t:t<8/11?7.5625*(t-=6/11)*t+3/4:t<10/11?7.5625*(t-=9/11)*t+15/16:7.5625*(t-=21/22)*t+63/64}function Ga(t){return((t*=2)<=1?1-Va(1-t):Va(t-1)+1)/2}var $a=function t(n){function e(t){return(t=+t)*t*(n*(t-1)+t)}return n=+n,e.overshoot=t,e}(1.70158),Za=function t(n){function e(t){return--t*t*((t+1)*n+t)+1}return n=+n,e.overshoot=t,e}(1.70158),Qa=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),Ka=2*Math.PI,Ja=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ka);function i(t){return n*Da(- --t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Ka)},i.period=function(e){return t(n,e)},i}(1,.3),tu=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ka);function i(t){return 1-n*Da(t=+t)*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Ka)},i.period=function(e){return t(n,e)},i}(1,.3),nu=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ka);function i(t){return((t=2*t-1)<0?n*Da(-t)*Math.sin((r-t)/e):2-n*Da(t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Ka)},i.period=function(e){return t(n,e)},i}(1,.3);function eu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var ru=function(t,n){return fetch(t,n).then(eu)};function iu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var ou=function(t,n){return fetch(t,n).then(iu)};function au(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var uu=function(t,n){return fetch(t,n).then(au)};function cu(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),uu(n,e).then((function(n){return t(n,r)}))}}function fu(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=ca(t);return uu(n,e).then((function(t){return i.parse(t,r)}))}var su=cu(sa),lu=cu(ma),hu=function(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))};function du(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}var pu=function(t,n){return fetch(t,n).then(du)};function gu(t){return function(n,e){return uu(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}var yu=gu("application/xml"),vu=gu("text/html"),mu=gu("image/svg+xml"),bu=function(t,n){var e;function r(){var r,i,o=e.length,a=0,u=0;for(r=0;r<o;++r)a+=(i=e[r]).x,u+=i.y;for(a=a/o-t,u=u/o-n,r=0;r<o;++r)(i=e[r]).x-=a,i.y-=u}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},_u=function(t){return function(){return t}},xu=function(){return 1e-6*(Math.random()-.5)};function wu(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,c,f,s,l,h,d=t._root,p={data:r},g=t._x0,y=t._y0,v=t._x1,m=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(g+v)/2))?g=o:v=o,(s=e>=(a=(y+m)/2))?y=a:m=a,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(u=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===u&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(g+v)/2))?g=o:v=o,(s=e>=(a=(y+m)/2))?y=a:m=a}while((l=s<<1|f)==(h=(c>=a)<<1|u>=o));return i[h]=d,i[l]=p,t}var Mu=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function ku(t){return t[0]}function Au(t){return t[1]}function Cu(t,n,e){var r=new Su(null==n?ku:n,null==e?Au:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Su(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Tu(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Eu=Cu.prototype=Su.prototype;function Nu(t){return t.x+t.vx}function Pu(t){return t.y+t.vy}Eu.copy=function(){var t,n,e=new Su(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Tu(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Tu(n));return e},Eu.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return wu(this.cover(n,e),n,e,t)},Eu.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));if(c>s||f>l)return this;for(this.cover(c,f).cover(s,l),e=0;e<o;++e)wu(this,a[e],u[e],t[e]);return this},Eu.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,u,c=i-e,f=this._root;e>t||t>=i||r>n||n>=o;)switch(u=(n<r)<<1|t<e,(a=new Array(4))[u]=f,f=a,c*=2,u){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Eu.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Eu.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Eu.find=function(t,n,e){var r,i,o,a,u,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new Mu(g,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(g=c.node)||(i=c.x0)>h||(o=c.y0)>d||(a=c.x1)<s||(u=c.y1)<l))if(g.length){var y=(i+a)/2,v=(o+u)/2;p.push(new Mu(g[3],y,v,a,u),new Mu(g[2],i,v,y,u),new Mu(g[1],y,o,a,v),new Mu(g[0],i,o,y,v)),(f=(n>=v)<<1|t>=y)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var m=t-+this._x.call(null,g.data),b=n-+this._y.call(null,g.data),_=m*m+b*b;if(_<e){var x=Math.sqrt(e=_);s=t-x,l=n-x,h=t+x,d=n+x,r=g.data}}return r},Eu.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,c,f,s,l,h,d=this._root,p=this._x0,g=this._y0,y=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(u=(p+y)/2))?p=u:y=u,(s=a>=(c=(g+v)/2))?g=c:v=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Eu.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Eu.root=function(){return this._root},Eu.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Eu.visit=function(t){var n,e,r,i,o,a,u=[],c=this._root;for(c&&u.push(new Mu(c,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&c.length){var f=(r+o)/2,s=(i+a)/2;(e=c[3])&&u.push(new Mu(e,f,s,o,a)),(e=c[2])&&u.push(new Mu(e,r,s,f,a)),(e=c[1])&&u.push(new Mu(e,f,i,o,s)),(e=c[0])&&u.push(new Mu(e,r,i,f,s))}return this},Eu.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Mu(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,c=n.x1,f=n.y1,s=(a+c)/2,l=(u+f)/2;(o=i[0])&&e.push(new Mu(o,a,u,s,l)),(o=i[1])&&e.push(new Mu(o,s,u,c,l)),(o=i[2])&&e.push(new Mu(o,a,l,s,f)),(o=i[3])&&e.push(new Mu(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Eu.x=function(t){return arguments.length?(this._x=t,this):this._x},Eu.y=function(t){return arguments.length?(this._y=t,this):this._y};var Lu=function(t){var n,e,r=1,i=1;function o(){for(var t,o,u,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=Cu(n,Nu,Pu).visitAfter(a),t=0;t<h;++t)u=n[t],s=e[u.index],l=s*s,c=u.x+u.vx,f=u.y+u.vy,o.visit(p);function p(t,n,e,i,o){var a=t.data,h=t.r,d=s+h;if(!a)return n>c+d||i<c-d||e>f+d||o<f-d;if(a.index>u.index){var p=c-a.x-a.vx,g=f-a.y-a.vy,y=p*p+g*g;y<d*d&&(0===p&&(y+=(p=xu())*p),0===g&&(y+=(g=xu())*g),y=(d-(y=Math.sqrt(y)))/y*r,u.vx+=(p*=y)*(d=(h*=h)/(l+h)),u.vy+=(g*=y)*d,a.vx-=p*(d=1-d),a.vy-=g*d)}}}function a(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function u(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=_u(null==t?1:+t)),o.initialize=function(t){n=t,u()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:_u(+n),u(),o):t},o};function Ru(t){return t.index}function Ou(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var Iu=function(t){var n,e,r,i,o,a=Ru,u=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=_u(30),f=1;function s(r){for(var i=0,a=t.length;i<f;++i)for(var u,c,s,l,h,d,p,g=0;g<a;++g)c=(u=t[g]).source,l=(s=u.target).x+s.vx-c.x-c.vx||xu(),h=s.y+s.vy-c.y-c.vy||xu(),l*=d=((d=Math.sqrt(l*l+h*h))-e[g])/d*r*n[g],h*=d,s.vx-=l*(p=o[g]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var u,c,f=r.length,s=t.length,l=Ki(r,a);for(u=0,i=new Array(f);u<s;++u)(c=t[u]).index=u,"object"!=typeof c.source&&(c.source=Ou(l,c.source)),"object"!=typeof c.target&&(c.target=Ou(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(u=0,o=new Array(s);u<s;++u)c=t[u],o[u]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+u(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(a=t,s):a},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(u="function"==typeof t?t:_u(+t),h(),s):u},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:_u(+t),d(),s):c},s};function zu(t){return t.x}function Bu(t){return t.y}var qu=Math.PI*(3-Math.sqrt(5)),Du=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,u=Ki(),c=We(s),f=lt("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,u.each((function(t){t(e)})),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=a:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=a:(f.y=f.fy,f.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*qu;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),u.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(a=1-t,n):1-a},force:function(t,e){return arguments.length>1?(null==e?u.remove(t):u.set(t,d(e)),n):u.get(t)},find:function(n,e,r){var i,o,a,u,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(a=(i=n-(u=t[f]).x)*i+(o=e-u.y)*o)<r&&(c=u,r=a);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}},ju=function(){var t,n,e,r,i=_u(-30),o=1,a=1/0,u=.81;function c(r){var i,o=t.length,a=Cu(t,zu,Bu).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],a.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,a,u=0,c=0;if(t.length){for(i=o=a=0;a<4;++a)(n=t[a])&&(e=Math.abs(n.value))&&(u+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{u+=r[n.data.index]}while(n=n.next)}t.value=u}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/u<d)return d<a&&(0===s&&(d+=(s=xu())*s),0===l&&(d+=(l=xu())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=a)){(t.data!==n||t.next)&&(0===s&&(d+=(s=xu())*s),0===l&&(d+=(l=xu())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:_u(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c.theta=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c},Uu=function(t,n,e){var r,i,o,a=_u(.1);function u(t){for(var a=0,u=r.length;a<u;++a){var c=r[a],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[a]-l)*i[a]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+a(r[n],n,r)}}return"function"!=typeof t&&(t=_u(+t)),null==n&&(n=0),null==e&&(e=0),u.initialize=function(t){r=t,c()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:_u(+t),c(),u):a},u.radius=function(n){return arguments.length?(t="function"==typeof n?n:_u(+n),c(),u):t},u.x=function(t){return arguments.length?(n=+t,u):n},u.y=function(t){return arguments.length?(e=+t,u):e},u},Fu=function(t){var n,e,r,i=_u(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_u(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_u(+t),a(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:_u(+n),a(),o):t},o},Hu=function(t){var n,e,r,i=_u(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_u(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_u(+t),a(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:_u(+n),a(),o):t},o};function Yu(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}var Wu=function(t){return(t=Yu(Math.abs(t)))?t[1]:NaN},Xu=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Vu(t){if(!(n=Xu.exec(t)))throw new Error("invalid format: "+t);var n;return new Gu({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Gu(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Vu.prototype=Gu.prototype,Gu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var $u,Zu,Qu,Ku,Ju=function(t,n){var e=Yu(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},tc={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ju(100*t,n)},r:Ju,s:function(t,n){var e=Yu(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-($u=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Yu(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},nc=function(t){return t},ec=Array.prototype.map,rc=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],ic=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?nc:(n=ec.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?nc:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(ec.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"-":t.minus+"",s=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=Vu(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,y=t.precision,v=t.trim,m=t.type;"n"===m?(g=!0,m="g"):tc[m]||(void 0===y&&(y=12),v=!0,m="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",_="$"===h?o:/[%p]/.test(m)?c:"",x=tc[m],w=/[defgprs%]/.test(m);function M(t){var i,o,c,h=b,M=_;if("c"===m)M=x(t)+M,t="";else{var k=(t=+t)<0||1/t<0;if(t=isNaN(t)?s:x(Math.abs(t),y),v&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),k&&0==+t&&"+"!==l&&(k=!1),h=(k?"("===l?l:f:"-"===l||"("===l?"":l)+h,M=("s"===m?rc[8+$u/3]:"")+M+(k&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){M=(46===c?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var A=h.length+t.length+M.length,C=A<p?new Array(p-A+1).join(n):"";switch(g&&d&&(t=r(C+t,C.length?p-M.length:1/0),C=""),e){case"<":t=h+t+M+C;break;case"=":t=h+C+t+M;break;case"^":t=C.slice(0,A=C.length>>1)+h+t+M+C.slice(A);break;default:t=C+h+t+M}return u(t)}return y=void 0===y?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=Vu(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Wu(n)/3))),i=Math.pow(10,-r),o=rc[8+r/3];return function(t){return e(i*t)+o}}}};function oc(t){return Zu=ic(t),Qu=Zu.format,Ku=Zu.formatPrefix,Zu}oc({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var ac=function(t){return Math.max(0,-Wu(Math.abs(t)))},uc=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Wu(n)/3)))-Wu(Math.abs(t)))},cc=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Wu(n)-Wu(t))+1},fc=function(){return new sc};function sc(){this.reset()}sc.prototype={constructor:sc,reset:function(){this.s=this.t=0},add:function(t){hc(lc,t,this.t),hc(this,lc.s,this.s),this.s?this.t+=lc.t:this.s=lc.t},valueOf:function(){return this.s}};var lc=new sc;function hc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var dc=Math.PI,pc=dc/2,gc=dc/4,yc=2*dc,vc=180/dc,mc=dc/180,bc=Math.abs,_c=Math.atan,xc=Math.atan2,wc=Math.cos,Mc=Math.ceil,kc=Math.exp,Ac=(Math.floor,Math.log),Cc=Math.pow,Sc=Math.sin,Tc=Math.sign||function(t){return t>0?1:t<0?-1:0},Ec=Math.sqrt,Nc=Math.tan;function Pc(t){return t>1?0:t<-1?dc:Math.acos(t)}function Lc(t){return t>1?pc:t<-1?-pc:Math.asin(t)}function Rc(t){return(t=Sc(t/2))*t}function Oc(){}function Ic(t,n){t&&Bc.hasOwnProperty(t.type)&&Bc[t.type](t,n)}var zc={Feature:function(t,n){Ic(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Ic(e[r].geometry,n)}},Bc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){qc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)qc(e[r],n,0)},Polygon:function(t,n){Dc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Dc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Ic(e[r],n)}};function qc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Dc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)qc(t[e],n,1);n.polygonEnd()}var jc,Uc,Fc,Hc,Yc,Wc=function(t,n){t&&zc.hasOwnProperty(t.type)?zc[t.type](t,n):Ic(t,n)},Xc=fc(),Vc=fc(),Gc={point:Oc,lineStart:Oc,lineEnd:Oc,polygonStart:function(){Xc.reset(),Gc.lineStart=$c,Gc.lineEnd=Zc},polygonEnd:function(){var t=+Xc;Vc.add(t<0?yc+t:t),this.lineStart=this.lineEnd=this.point=Oc},sphere:function(){Vc.add(yc)}};function $c(){Gc.point=Qc}function Zc(){Kc(jc,Uc)}function Qc(t,n){Gc.point=Kc,jc=t,Uc=n,Fc=t*=mc,Hc=wc(n=(n*=mc)/2+gc),Yc=Sc(n)}function Kc(t,n){var e=(t*=mc)-Fc,r=e>=0?1:-1,i=r*e,o=wc(n=(n*=mc)/2+gc),a=Sc(n),u=Yc*a,c=Hc*o+u*wc(i),f=u*r*Sc(i);Xc.add(xc(f,c)),Fc=t,Hc=o,Yc=a}var Jc=function(t){return Vc.reset(),Wc(t,Gc),2*Vc};function tf(t){return[xc(t[1],t[0]),Lc(t[2])]}function nf(t){var n=t[0],e=t[1],r=wc(e);return[r*wc(n),r*Sc(n),Sc(e)]}function ef(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function rf(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function of(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function af(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function uf(t){var n=Ec(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var cf,ff,sf,lf,hf,df,pf,gf,yf,vf,mf=fc(),bf={point:_f,lineStart:wf,lineEnd:Mf,polygonStart:function(){bf.point=kf,bf.lineStart=Af,bf.lineEnd=Cf,mf.reset(),Gc.polygonStart()},polygonEnd:function(){Gc.polygonEnd(),bf.point=_f,bf.lineStart=wf,bf.lineEnd=Mf,Xc<0?(cf=-(sf=180),ff=-(lf=90)):mf>1e-6?lf=90:mf<-1e-6&&(ff=-90),vf[0]=cf,vf[1]=sf},sphere:function(){cf=-(sf=180),ff=-(lf=90)}};function _f(t,n){yf.push(vf=[cf=t,sf=t]),n<ff&&(ff=n),n>lf&&(lf=n)}function xf(t,n){var e=nf([t*mc,n*mc]);if(gf){var r=rf(gf,e),i=rf([r[1],-r[0],0],r);uf(i),i=tf(i);var o,a=t-hf,u=a>0?1:-1,c=i[0]*vc*u,f=bc(a)>180;f^(u*hf<c&&c<u*t)?(o=i[1]*vc)>lf&&(lf=o):f^(u*hf<(c=(c+360)%360-180)&&c<u*t)?(o=-i[1]*vc)<ff&&(ff=o):(n<ff&&(ff=n),n>lf&&(lf=n)),f?t<hf?Sf(cf,t)>Sf(cf,sf)&&(sf=t):Sf(t,sf)>Sf(cf,sf)&&(cf=t):sf>=cf?(t<cf&&(cf=t),t>sf&&(sf=t)):t>hf?Sf(cf,t)>Sf(cf,sf)&&(sf=t):Sf(t,sf)>Sf(cf,sf)&&(cf=t)}else yf.push(vf=[cf=t,sf=t]);n<ff&&(ff=n),n>lf&&(lf=n),gf=e,hf=t}function wf(){bf.point=xf}function Mf(){vf[0]=cf,vf[1]=sf,bf.point=_f,gf=null}function kf(t,n){if(gf){var e=t-hf;mf.add(bc(e)>180?e+(e>0?360:-360):e)}else df=t,pf=n;Gc.point(t,n),xf(t,n)}function Af(){Gc.lineStart()}function Cf(){kf(df,pf),Gc.lineEnd(),bc(mf)>1e-6&&(cf=-(sf=180)),vf[0]=cf,vf[1]=sf,gf=null}function Sf(t,n){return(n-=t)<0?n+360:n}function Tf(t,n){return t[0]-n[0]}function Ef(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var Nf,Pf,Lf,Rf,Of,If,zf,Bf,qf,Df,jf,Uf,Ff,Hf,Yf,Wf,Xf=function(t){var n,e,r,i,o,a,u;if(lf=sf=-(cf=ff=1/0),yf=[],Wc(t,bf),e=yf.length){for(yf.sort(Tf),n=1,o=[r=yf[0]];n<e;++n)Ef(r,(i=yf[n])[0])||Ef(r,i[1])?(Sf(r[0],i[1])>Sf(r[0],r[1])&&(r[1]=i[1]),Sf(i[0],r[1])>Sf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(u=Sf(r[1],i[0]))>a&&(a=u,cf=i[0],sf=r[1])}return yf=vf=null,cf===1/0||ff===1/0?[[NaN,NaN],[NaN,NaN]]:[[cf,ff],[sf,lf]]},Vf={sphere:Oc,point:Gf,lineStart:Zf,lineEnd:Jf,polygonStart:function(){Vf.lineStart=ts,Vf.lineEnd=ns},polygonEnd:function(){Vf.lineStart=Zf,Vf.lineEnd=Jf}};function Gf(t,n){t*=mc;var e=wc(n*=mc);$f(e*wc(t),e*Sc(t),Sc(n))}function $f(t,n,e){++Nf,Lf+=(t-Lf)/Nf,Rf+=(n-Rf)/Nf,Of+=(e-Of)/Nf}function Zf(){Vf.point=Qf}function Qf(t,n){t*=mc;var e=wc(n*=mc);Hf=e*wc(t),Yf=e*Sc(t),Wf=Sc(n),Vf.point=Kf,$f(Hf,Yf,Wf)}function Kf(t,n){t*=mc;var e=wc(n*=mc),r=e*wc(t),i=e*Sc(t),o=Sc(n),a=xc(Ec((a=Yf*o-Wf*i)*a+(a=Wf*r-Hf*o)*a+(a=Hf*i-Yf*r)*a),Hf*r+Yf*i+Wf*o);Pf+=a,If+=a*(Hf+(Hf=r)),zf+=a*(Yf+(Yf=i)),Bf+=a*(Wf+(Wf=o)),$f(Hf,Yf,Wf)}function Jf(){Vf.point=Gf}function ts(){Vf.point=es}function ns(){rs(Uf,Ff),Vf.point=Gf}function es(t,n){Uf=t,Ff=n,t*=mc,n*=mc,Vf.point=rs;var e=wc(n);Hf=e*wc(t),Yf=e*Sc(t),Wf=Sc(n),$f(Hf,Yf,Wf)}function rs(t,n){t*=mc;var e=wc(n*=mc),r=e*wc(t),i=e*Sc(t),o=Sc(n),a=Yf*o-Wf*i,u=Wf*r-Hf*o,c=Hf*i-Yf*r,f=Ec(a*a+u*u+c*c),s=Lc(f),l=f&&-s/f;qf+=l*a,Df+=l*u,jf+=l*c,Pf+=s,If+=s*(Hf+(Hf=r)),zf+=s*(Yf+(Yf=i)),Bf+=s*(Wf+(Wf=o)),$f(Hf,Yf,Wf)}var is=function(t){Nf=Pf=Lf=Rf=Of=If=zf=Bf=qf=Df=jf=0,Wc(t,Vf);var n=qf,e=Df,r=jf,i=n*n+e*e+r*r;return i<1e-12&&(n=If,e=zf,r=Bf,Pf<1e-6&&(n=Lf,e=Rf,r=Of),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[xc(e,n)*vc,Lc(r/Ec(i))*vc]},os=function(t){return function(){return t}},as=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function us(t,n){return[bc(t)>dc?t+Math.round(-t/yc)*yc:t,n]}function cs(t,n,e){return(t%=yc)?n||e?as(ss(t),ls(n,e)):ss(t):n||e?ls(n,e):us}function fs(t){return function(n,e){return[(n+=t)>dc?n-yc:n<-dc?n+yc:n,e]}}function ss(t){var n=fs(t);return n.invert=fs(-t),n}function ls(t,n){var e=wc(t),r=Sc(t),i=wc(n),o=Sc(n);function a(t,n){var a=wc(n),u=wc(t)*a,c=Sc(t)*a,f=Sc(n),s=f*e+u*r;return[xc(c*i-s*o,u*e-f*r),Lc(s*i+c*o)]}return a.invert=function(t,n){var a=wc(n),u=wc(t)*a,c=Sc(t)*a,f=Sc(n),s=f*i-c*o;return[xc(c*i+f*o,u*e+s*r),Lc(s*e-u*r)]},a}us.invert=us;var hs=function(t){function n(n){return(n=t(n[0]*mc,n[1]*mc))[0]*=vc,n[1]*=vc,n}return t=cs(t[0]*mc,t[1]*mc,t.length>2?t[2]*mc:0),n.invert=function(n){return(n=t.invert(n[0]*mc,n[1]*mc))[0]*=vc,n[1]*=vc,n},n};function ds(t,n,e,r,i,o){if(e){var a=wc(n),u=Sc(n),c=r*e;null==i?(i=n+r*yc,o=n-c/2):(i=ps(a,i),o=ps(a,o),(r>0?i<o:i>o)&&(i+=r*yc));for(var f,s=i;r>0?s>o:s<o;s-=c)f=tf([a,-u*wc(s),-u*Sc(s)]),t.point(f[0],f[1])}}function ps(t,n){(n=nf(n))[0]-=t,uf(n);var e=Pc(-n[1]);return((-n[2]<0?-e:e)+yc-1e-6)%yc}var gs=function(){var t,n,e=os([0,0]),r=os(90),i=os(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=vc,e[1]*=vc}};function a(){var a=e.apply(this,arguments),u=r.apply(this,arguments)*mc,c=i.apply(this,arguments)*mc;return t=[],n=cs(-a[0]*mc,-a[1]*mc,0).invert,ds(o,u,c,1),a={type:"Polygon",coordinates:[t]},t=n=null,a}return a.center=function(t){return arguments.length?(e="function"==typeof t?t:os([+t[0],+t[1]]),a):e},a.radius=function(t){return arguments.length?(r="function"==typeof t?t:os(+t),a):r},a.precision=function(t){return arguments.length?(i="function"==typeof t?t:os(+t),a):i},a},ys=function(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:Oc,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},vs=function(t,n){return bc(t[0]-n[0])<1e-6&&bc(t[1]-n[1])<1e-6};function ms(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var bs=function(t,n,e,r,i){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(vs(r,a)){if(!r[2]&&!a[2]){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}a[0]+=2e-6}u.push(e=new ms(r,t,null,!0)),c.push(e.o=new ms(r,null,e,!1)),u.push(e=new ms(a,t,null,!1)),c.push(e.o=new ms(a,null,e,!0))}})),u.length){for(c.sort(n),_s(u),_s(c),o=0,a=c.length;o<a;++o)c[o].e=e=!e;for(var f,s,l=u[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=f.length;o<a;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function _s(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var xs=fc();function ws(t){return bc(t[0])<=dc?t[0]:Tc(t[0])*((bc(t[0])+dc)%yc-dc)}var Ms=function(t,n){var e=ws(n),r=n[1],i=Sc(r),o=[Sc(e),-wc(e),0],a=0,u=0;xs.reset(),1===i?r=pc+1e-6:-1===i&&(r=-pc-1e-6);for(var c=0,f=t.length;c<f;++c)if(l=(s=t[c]).length)for(var s,l,h=s[l-1],d=ws(h),p=h[1]/2+gc,g=Sc(p),y=wc(p),v=0;v<l;++v,d=b,g=x,y=w,h=m){var m=s[v],b=ws(m),_=m[1]/2+gc,x=Sc(_),w=wc(_),M=b-d,k=M>=0?1:-1,A=k*M,C=A>dc,S=g*x;if(xs.add(xc(S*k*Sc(A),y*w+S*wc(A))),a+=C?M+k*yc:M,C^d>=e^b>=e){var T=rf(nf(h),nf(m));uf(T);var E=rf(o,T);uf(E);var N=(C^M>=0?-1:1)*Lc(E[2]);(r>N||r===N&&(T[0]||T[1]))&&(u+=C^M>=0?1:-1)}}return(a<-1e-6||a<1e-6&&xs<-1e-6)^1&u},ks=function(t,n,e,r){return function(i){var o,a,u,c=n(i),f=ys(),s=n(f),l=!1,h={point:d,lineStart:g,lineEnd:y,polygonStart:function(){h.point=v,h.lineStart=m,h.lineEnd=b,a=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=g,h.lineEnd=y,a=q(a);var t=Ms(o,r);a.length?(l||(i.polygonStart(),l=!0),bs(a,Cs,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function g(){h.point=p,c.lineStart()}function y(){h.point=d,c.lineEnd()}function v(t,n){u.push([t,n]),s.point(t,n)}function m(){s.lineStart(),u=[]}function b(){v(u[0][0],u[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(u.pop(),o.push(u),u=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),a.push(h.filter(As))}return h}};function As(t){return t.length>1}function Cs(t,n){return((t=t.x)[0]<0?t[1]-pc-1e-6:pc-t[1])-((n=n.x)[0]<0?n[1]-pc-1e-6:pc-n[1])}var Ss=ks((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?dc:-dc,c=bc(o-e);bc(c-dc)<1e-6?(t.point(e,r=(r+a)/2>0?pc:-pc),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&c>=dc&&(bc(e-i)<1e-6&&(e-=1e-6*i),bc(o-u)<1e-6&&(o-=1e-6*u),r=function(t,n,e,r){var i,o,a=Sc(t-e);return bc(a)>1e-6?_c((Sc(n)*(o=wc(r))*Sc(e)-Sc(r)*(i=wc(n))*Sc(t))/(i*o*a)):(n+r)/2}(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*pc,r.point(-dc,i),r.point(0,i),r.point(dc,i),r.point(dc,0),r.point(dc,-i),r.point(0,-i),r.point(-dc,-i),r.point(-dc,0),r.point(-dc,i);else if(bc(t[0]-n[0])>1e-6){var o=t[0]<n[0]?dc:-dc;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-dc,-pc]);var Ts=function(t){var n=wc(t),e=6*mc,r=n>0,i=bc(n)>1e-6;function o(t,e){return wc(t)*wc(e)>n}function a(t,e,r){var i=[1,0,0],o=rf(nf(t),nf(e)),a=ef(o,o),u=o[0],c=a-u*u;if(!c)return!r&&t;var f=n*a/c,s=-n*u/c,l=rf(i,o),h=af(i,f);of(h,af(o,s));var d=l,p=ef(h,d),g=ef(d,d),y=p*p-g*(ef(h,h)-1);if(!(y<0)){var v=Ec(y),m=af(d,(-p-v)/g);if(of(m,h),m=tf(m),!r)return m;var b,_=t[0],x=e[0],w=t[1],M=e[1];x<_&&(b=_,_=x,x=b);var k=x-_,A=bc(k-dc)<1e-6;if(!A&&M<w&&(b=w,w=M,M=b),A||k<1e-6?A?w+M>0^m[1]<(bc(m[0]-_)<1e-6?w:M):w<=m[1]&&m[1]<=M:k>dc^(_<=m[0]&&m[0]<=x)){var C=af(d,(-p+v)/g);return of(C,h),[m,tf(C)]}}}function u(n,e){var i=r?t:dc-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return ks(o,(function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],g=o(l,h),y=r?g?0:u(l,h):g?u(l+(l<0?dc:-dc),h):0;if(!n&&(f=c=g)&&t.lineStart(),g!==c&&(!(d=a(n,p))||vs(n,d)||vs(p,d))&&(p[2]=1),g!==c)s=0,g?(t.lineStart(),d=a(p,n),t.point(d[0],d[1])):(d=a(n,p),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(i&&n&&r^g){var v;y&e||!(v=a(p,n,!0))||(s=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1],3)))}!g||n&&vs(n,p)||t.point(p[0],p[1]),n=p,c=g,e=y},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}}),(function(n,r,i,o){ds(o,t,e,i,n,r)}),r?[0,-t]:[-dc,t-dc])};function Es(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,f){var s=0,l=0;if(null==i||(s=a(i,u))!==(l=a(o,u))||c(i,o)<0^u>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+u+4)%4)!==l);else f.point(o[0],o[1])}function a(r,i){return bc(r[0]-t)<1e-6?i>0?0:3:bc(r[0]-e)<1e-6?i>0?2:1:bc(r[1]-n)<1e-6?i>0?1:0:i>0?3:2}function u(t,n){return c(t.x,n.x)}function c(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){var c,f,s,l,h,d,p,g,y,v,m,b=a,_=ys(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]);v=!0,y=!1,p=g=NaN},lineEnd:function(){c&&(M(l,h),d&&y&&_.rejoin(),c.push(_.result()));x.point=w,y&&b.lineEnd()},polygonStart:function(){b=_,c=[],f=[],m=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,a,u=f[e],c=1,s=u.length,l=u[0],h=l[0],d=l[1];c<s;++c)o=h,a=d,l=u[c],h=l[0],d=l[1],a<=r?d>r&&(h-o)*(r-a)>(d-a)*(t-o)&&++n:d<=r&&(h-o)*(r-a)<(d-a)*(t-o)&&--n;return n}(),e=m&&n,i=(c=q(c)).length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&bs(c,u,n,o,a),a.polygonEnd());b=a,c=f=s=null}};function w(t,n){i(t,n)&&b.point(t,n)}function M(o,a){var u=i(o,a);if(f&&s.push([o,a]),v)l=o,h=a,d=u,v=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&y)b.point(o,a);else{var c=[p=Math.max(-1e9,Math.min(1e9,p)),g=Math.max(-1e9,Math.min(1e9,g))],_=[o=Math.max(-1e9,Math.min(1e9,o)),a=Math.max(-1e9,Math.min(1e9,a))];!function(t,n,e,r,i,o){var a,u=t[0],c=t[1],f=0,s=1,l=n[0]-u,h=n[1]-c;if(a=e-u,l||!(a>0)){if(a/=l,l<0){if(a<f)return;a<s&&(s=a)}else if(l>0){if(a>s)return;a>f&&(f=a)}if(a=i-u,l||!(a<0)){if(a/=l,l<0){if(a>s)return;a>f&&(f=a)}else if(l>0){if(a<f)return;a<s&&(s=a)}if(a=r-c,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<s&&(s=a)}else if(h>0){if(a>s)return;a>f&&(f=a)}if(a=o-c,h||!(a<0)){if(a/=h,h<0){if(a>s)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<s&&(s=a)}return f>0&&(t[0]=u+f*l,t[1]=c+f*h),s<1&&(n[0]=u+s*l,n[1]=c+s*h),!0}}}}}(c,_,t,n,e,r)?u&&(b.lineStart(),b.point(o,a),m=!1):(y||(b.lineStart(),b.point(c[0],c[1])),b.point(_[0],_[1]),u||b.lineEnd(),m=!1)}p=o,g=a,y=u}return x}}var Ns,Ps,Ls,Rs=function(){var t,n,e,r=0,i=0,o=960,a=500;return e={stream:function(e){return t&&n===e?t:t=Es(r,i,o,a)(n=e)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],t=n=null,e):[[r,i],[o,a]]}}},Os=fc(),Is={sphere:Oc,point:Oc,lineStart:function(){Is.point=Bs,Is.lineEnd=zs},lineEnd:Oc,polygonStart:Oc,polygonEnd:Oc};function zs(){Is.point=Is.lineEnd=Oc}function Bs(t,n){Ns=t*=mc,Ps=Sc(n*=mc),Ls=wc(n),Is.point=qs}function qs(t,n){t*=mc;var e=Sc(n*=mc),r=wc(n),i=bc(t-Ns),o=wc(i),a=r*Sc(i),u=Ls*e-Ps*r*o,c=Ps*e+Ls*r*o;Os.add(xc(Ec(a*a+u*u),c)),Ns=t,Ps=e,Ls=r}var Ds=function(t){return Os.reset(),Wc(t,Is),+Os},js=[null,null],Us={type:"LineString",coordinates:js},Fs=function(t,n){return js[0]=t,js[1]=n,Ds(Us)},Hs={Feature:function(t,n){return Ws(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Ws(e[r].geometry,n))return!0;return!1}},Ys={Sphere:function(){return!0},Point:function(t,n){return Xs(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Xs(e[r],n))return!0;return!1},LineString:function(t,n){return Vs(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Vs(e[r],n))return!0;return!1},Polygon:function(t,n){return Gs(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Gs(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Ws(e[r],n))return!0;return!1}};function Ws(t,n){return!(!t||!Ys.hasOwnProperty(t.type))&&Ys[t.type](t,n)}function Xs(t,n){return 0===Fs(t,n)}function Vs(t,n){for(var e,r,i,o=0,a=t.length;o<a;o++){if(0===(r=Fs(t[o],n)))return!0;if(o>0&&(i=Fs(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<1e-12*i)return!0;e=r}return!1}function Gs(t,n){return!!Ms(t.map($s),Zs(n))}function $s(t){return(t=t.map(Zs)).pop(),t}function Zs(t){return[t[0]*mc,t[1]*mc]}var Qs=function(t,n){return(t&&Hs.hasOwnProperty(t.type)?Hs[t.type]:Ws)(t,n)};function Ks(t,n,e){var r=M(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function Js(t,n,e){var r=M(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function tl(){var t,n,e,r,i,o,a,u,c,f,s,l,h=10,d=h,p=90,g=360,y=2.5;function v(){return{type:"MultiLineString",coordinates:m()}}function m(){return M(Mc(r/p)*p,e,p).map(s).concat(M(Mc(u/g)*g,a,g).map(l)).concat(M(Mc(n/h)*h,t,h).filter((function(t){return bc(t%p)>1e-6})).map(c)).concat(M(Mc(o/d)*d,i,d).filter((function(t){return bc(t%g)>1e-6})).map(f))}return v.lines=function(){return m().map((function(t){return{type:"LineString",coordinates:t}}))},v.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(a).slice(1),s(e).reverse().slice(1),l(u).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],u=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),u>a&&(t=u,u=a,a=t),v.precision(y)):[[r,u],[e,a]]},v.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),v.precision(y)):[[n,o],[t,i]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(p=+t[0],g=+t[1],v):[p,g]},v.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],v):[h,d]},v.precision=function(h){return arguments.length?(y=+h,c=Ks(o,i,90),f=Js(n,t,y),s=Ks(u,a,90),l=Js(r,e,y),v):y},v.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function nl(){return tl()()}var el,rl,il,ol,al=function(t,n){var e=t[0]*mc,r=t[1]*mc,i=n[0]*mc,o=n[1]*mc,a=wc(r),u=Sc(r),c=wc(o),f=Sc(o),s=a*wc(e),l=a*Sc(e),h=c*wc(i),d=c*Sc(i),p=2*Lc(Ec(Rc(o-r)+a*c*Rc(i-e))),g=Sc(p),y=p?function(t){var n=Sc(t*=p)/g,e=Sc(p-t)/g,r=e*s+n*h,i=e*l+n*d,o=e*u+n*f;return[xc(i,r)*vc,xc(o,Ec(r*r+i*i))*vc]}:function(){return[e*vc,r*vc]};return y.distance=p,y},ul=function(t){return t},cl=fc(),fl=fc(),sl={point:Oc,lineStart:Oc,lineEnd:Oc,polygonStart:function(){sl.lineStart=ll,sl.lineEnd=pl},polygonEnd:function(){sl.lineStart=sl.lineEnd=sl.point=Oc,cl.add(bc(fl)),fl.reset()},result:function(){var t=cl/2;return cl.reset(),t}};function ll(){sl.point=hl}function hl(t,n){sl.point=dl,el=il=t,rl=ol=n}function dl(t,n){fl.add(ol*t-il*n),il=t,ol=n}function pl(){dl(el,rl)}var gl=sl,yl=1/0,vl=yl,ml=-yl,bl=ml;var _l,xl,wl,Ml,kl={point:function(t,n){t<yl&&(yl=t);t>ml&&(ml=t);n<vl&&(vl=n);n>bl&&(bl=n)},lineStart:Oc,lineEnd:Oc,polygonStart:Oc,polygonEnd:Oc,result:function(){var t=[[yl,vl],[ml,bl]];return ml=bl=-(vl=yl=1/0),t}},Al=0,Cl=0,Sl=0,Tl=0,El=0,Nl=0,Pl=0,Ll=0,Rl=0,Ol={point:Il,lineStart:zl,lineEnd:Dl,polygonStart:function(){Ol.lineStart=jl,Ol.lineEnd=Ul},polygonEnd:function(){Ol.point=Il,Ol.lineStart=zl,Ol.lineEnd=Dl},result:function(){var t=Rl?[Pl/Rl,Ll/Rl]:Nl?[Tl/Nl,El/Nl]:Sl?[Al/Sl,Cl/Sl]:[NaN,NaN];return Al=Cl=Sl=Tl=El=Nl=Pl=Ll=Rl=0,t}};function Il(t,n){Al+=t,Cl+=n,++Sl}function zl(){Ol.point=Bl}function Bl(t,n){Ol.point=ql,Il(wl=t,Ml=n)}function ql(t,n){var e=t-wl,r=n-Ml,i=Ec(e*e+r*r);Tl+=i*(wl+t)/2,El+=i*(Ml+n)/2,Nl+=i,Il(wl=t,Ml=n)}function Dl(){Ol.point=Il}function jl(){Ol.point=Fl}function Ul(){Hl(_l,xl)}function Fl(t,n){Ol.point=Hl,Il(_l=wl=t,xl=Ml=n)}function Hl(t,n){var e=t-wl,r=n-Ml,i=Ec(e*e+r*r);Tl+=i*(wl+t)/2,El+=i*(Ml+n)/2,Nl+=i,Pl+=(i=Ml*t-wl*n)*(wl+t),Ll+=i*(Ml+n),Rl+=3*i,Il(wl=t,Ml=n)}var Yl=Ol;function Wl(t){this._context=t}Wl.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,yc)}},result:Oc};var Xl,Vl,Gl,$l,Zl,Ql=fc(),Kl={point:Oc,lineStart:function(){Kl.point=Jl},lineEnd:function(){Xl&&th(Vl,Gl),Kl.point=Oc},polygonStart:function(){Xl=!0},polygonEnd:function(){Xl=null},result:function(){var t=+Ql;return Ql.reset(),t}};function Jl(t,n){Kl.point=th,Vl=$l=t,Gl=Zl=n}function th(t,n){$l-=t,Zl-=n,Ql.add(Ec($l*$l+Zl*Zl)),$l=t,Zl=n}var nh=Kl;function eh(){this._string=[]}function rh(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}eh.prototype={_radius:4.5,_circle:rh(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=rh(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var ih=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Wc(t,e(r))),r.result()}return o.area=function(t){return Wc(t,e(gl)),gl.result()},o.measure=function(t){return Wc(t,e(nh)),nh.result()},o.bounds=function(t){return Wc(t,e(kl)),kl.result()},o.centroid=function(t){return Wc(t,e(Yl)),Yl.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,ul):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new eh):new Wl(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},oh=function(t){return{stream:ah(t)}};function ah(t){return function(n){var e=new uh;for(var r in t)e[r]=t[r];return e.stream=n,e}}function uh(){}function ch(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Wc(e,t.stream(kl)),n(kl.result()),null!=r&&t.clipExtent(r),t}function fh(t,n,e){return ch(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),a=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([a,u])}),e)}function sh(t,n,e){return fh(t,[[0,0],n],e)}function lh(t,n,e){return ch(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,a=-i*e[0][1];t.scale(150*i).translate([o,a])}),e)}function hh(t,n,e){return ch(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],a=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,a])}),e)}uh.prototype={constructor:uh,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var dh=wc(30*mc),ph=function(t,n){return+n?function(t,n){function e(r,i,o,a,u,c,f,s,l,h,d,p,g,y){var v=f-r,m=s-i,b=v*v+m*m;if(b>4*n&&g--){var _=a+h,x=u+d,w=c+p,M=Ec(_*_+x*x+w*w),k=Lc(w/=M),A=bc(bc(w)-1)<1e-6||bc(o-l)<1e-6?(o+l)/2:xc(x,_),C=t(A,k),S=C[0],T=C[1],E=S-r,N=T-i,P=m*E-v*N;(P*P/b>n||bc((v*E+m*N)/b-.5)>.3||a*h+u*d+c*p<dh)&&(e(r,i,o,a,u,c,S,T,A,_/=M,x/=M,w,g,y),y.point(S,T),e(S,T,A,_,x,w,f,s,l,h,d,p,g,y))}}return function(n){var r,i,o,a,u,c,f,s,l,h,d,p,g={point:y,lineStart:v,lineEnd:b,polygonStart:function(){n.polygonStart(),g.lineStart=_},polygonEnd:function(){n.polygonEnd(),g.lineStart=v}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function v(){s=NaN,g.point=m,n.lineStart()}function m(r,i){var o=nf([r,i]),a=t(r,i);e(s,l,f,h,d,p,s=a[0],l=a[1],f=r,h=o[0],d=o[1],p=o[2],16,n),n.point(s,l)}function b(){g.point=y,n.lineEnd()}function _(){v(),g.point=x,g.lineEnd=w}function x(t,n){m(r=t,n),i=s,o=l,a=h,u=d,c=p,g.point=m}function w(){e(s,l,f,h,d,p,i,o,r,a,u,c,16,n),g.lineEnd=b,b()}return g}}(t,n):function(t){return ah({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var gh=ah({point:function(t,n){this.stream.point(t*mc,n*mc)}});function yh(t,n,e,r,i){function o(o,a){return[n+t*(o*=r),e-t*(a*=i)]}return o.invert=function(o,a){return[(o-n)/t*r,(e-a)/t*i]},o}function vh(t,n,e,r,i,o){var a=wc(o),u=Sc(o),c=a*t,f=u*t,s=a/t,l=u/t,h=(u*e-a*n)/t,d=(u*n+a*e)/t;function p(t,o){return[c*(t*=r)-f*(o*=i)+n,e-f*t-c*o]}return p.invert=function(t,n){return[r*(s*t-l*n+h),i*(d-l*t-s*n)]},p}function mh(t){return bh((function(){return t}))()}function bh(t){var n,e,r,i,o,a,u,c,f,s,l=150,h=480,d=250,p=0,g=0,y=0,v=0,m=0,b=0,_=1,x=1,w=null,M=Ss,k=null,A=ul,C=.5;function S(t){return c(t[0]*mc,t[1]*mc)}function T(t){return(t=c.invert(t[0],t[1]))&&[t[0]*vc,t[1]*vc]}function E(){var t=vh(l,0,0,_,x,b).apply(null,n(p,g)),r=(b?vh:yh)(l,h-t[0],d-t[1],_,x,b);return e=cs(y,v,m),u=as(n,r),c=as(e,u),a=ph(u,C),N()}function N(){return f=s=null,S}return S.stream=function(t){return f&&s===t?f:f=gh(function(t){return ah({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(a(A(s=t)))))},S.preclip=function(t){return arguments.length?(M=t,w=void 0,N()):M},S.postclip=function(t){return arguments.length?(A=t,k=r=i=o=null,N()):A},S.clipAngle=function(t){return arguments.length?(M=+t?Ts(w=t*mc):(w=null,Ss),N()):w*vc},S.clipExtent=function(t){return arguments.length?(A=null==t?(k=r=i=o=null,ul):Es(k=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),N()):null==k?null:[[k,r],[i,o]]},S.scale=function(t){return arguments.length?(l=+t,E()):l},S.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],E()):[h,d]},S.center=function(t){return arguments.length?(p=t[0]%360*mc,g=t[1]%360*mc,E()):[p*vc,g*vc]},S.rotate=function(t){return arguments.length?(y=t[0]%360*mc,v=t[1]%360*mc,m=t.length>2?t[2]%360*mc:0,E()):[y*vc,v*vc,m*vc]},S.angle=function(t){return arguments.length?(b=t%360*mc,E()):b*vc},S.reflectX=function(t){return arguments.length?(_=t?-1:1,E()):_<0},S.reflectY=function(t){return arguments.length?(x=t?-1:1,E()):x<0},S.precision=function(t){return arguments.length?(a=ph(u,C=t*t),N()):Ec(C)},S.fitExtent=function(t,n){return fh(S,t,n)},S.fitSize=function(t,n){return sh(S,t,n)},S.fitWidth=function(t,n){return lh(S,t,n)},S.fitHeight=function(t,n){return hh(S,t,n)},function(){return n=t.apply(this,arguments),S.invert=n.invert&&T,E()}}function _h(t){var n=0,e=dc/3,r=bh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*mc,e=t[1]*mc):[n*vc,e*vc]},i}function xh(t,n){var e=Sc(t),r=(e+Sc(n))/2;if(bc(r)<1e-6)return function(t){var n=wc(t);function e(t,e){return[t*n,Sc(e)/n]}return e.invert=function(t,e){return[t/n,Lc(e*n)]},e}(t);var i=1+e*(2*r-e),o=Ec(i)/r;function a(t,n){var e=Ec(i-2*r*Sc(n))/r;return[e*Sc(t*=r),o-e*wc(t)]}return a.invert=function(t,n){var e=o-n,a=xc(t,bc(e))*Tc(e);return e*r<0&&(a-=dc*Tc(t)*Tc(e)),[a/r,Lc((i-(t*t+e*e)*r*r)/(2*r))]},a}var wh=function(){return _h(xh).scale(155.424).center([0,33.6442])},Mh=function(){return wh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var kh=function(){var t,n,e,r,i,o,a=Mh(),u=wh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=wh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],a=t[1];return o=null,e.point(n,a),o||(r.point(n,a),o)||(i.point(n,a),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=a.scale(),e=a.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:a).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[a.stream(n=e),u.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),c.precision(t),l()):a.precision()},s.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),c.scale(t),s.translate(a.translate())):a.scale()},s.translate=function(t){if(!arguments.length)return a.translate();var n=a.scale(),o=+t[0],s=+t[1];return e=a.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=u.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+1e-6,s+.12*n+1e-6],[o-.214*n-1e-6,s+.234*n-1e-6]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+1e-6,s+.166*n+1e-6],[o-.115*n-1e-6,s+.234*n-1e-6]]).stream(f),l()},s.fitExtent=function(t,n){return fh(s,t,n)},s.fitSize=function(t,n){return sh(s,t,n)},s.fitWidth=function(t,n){return lh(s,t,n)},s.fitHeight=function(t,n){return hh(s,t,n)},s.scale(1070)};function Ah(t){return function(n,e){var r=wc(n),i=wc(e),o=t(r*i);return[o*i*Sc(n),o*Sc(e)]}}function Ch(t){return function(n,e){var r=Ec(n*n+e*e),i=t(r),o=Sc(i),a=wc(i);return[xc(n*o,r*a),Lc(r&&e*o/r)]}}var Sh=Ah((function(t){return Ec(2/(1+t))}));Sh.invert=Ch((function(t){return 2*Lc(t/2)}));var Th=function(){return mh(Sh).scale(124.75).clipAngle(179.999)},Eh=Ah((function(t){return(t=Pc(t))&&t/Sc(t)}));Eh.invert=Ch((function(t){return t}));var Nh=function(){return mh(Eh).scale(79.4188).clipAngle(179.999)};function Ph(t,n){return[t,Ac(Nc((pc+n)/2))]}Ph.invert=function(t,n){return[t,2*_c(kc(n))-pc]};var Lh=function(){return Rh(Ph).scale(961/yc)};function Rh(t){var n,e,r,i=mh(t),o=i.center,a=i.scale,u=i.translate,c=i.clipExtent,f=null;function s(){var o=dc*a(),u=i(hs(i.rotate()).invert([0,0]));return c(null==f?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:t===Ph?[[Math.max(u[0]-o,f),n],[Math.min(u[0]+o,e),r]]:[[f,Math.max(u[1]-o,n)],[e,Math.min(u[1]+o,r)]])}return i.scale=function(t){return arguments.length?(a(t),s()):a()},i.translate=function(t){return arguments.length?(u(t),s()):u()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Oh(t){return Nc((pc+t)/2)}function Ih(t,n){var e=wc(t),r=t===n?Sc(t):Ac(e/wc(n))/Ac(Oh(n)/Oh(t)),i=e*Cc(Oh(t),r)/r;if(!r)return Ph;function o(t,n){i>0?n<1e-6-pc&&(n=1e-6-pc):n>pc-1e-6&&(n=pc-1e-6);var e=i/Cc(Oh(n),r);return[e*Sc(r*t),i-e*wc(r*t)]}return o.invert=function(t,n){var e=i-n,o=Tc(r)*Ec(t*t+e*e),a=xc(t,bc(e))*Tc(e);return e*r<0&&(a-=dc*Tc(t)*Tc(e)),[a/r,2*_c(Cc(i/o,1/r))-pc]},o}var zh=function(){return _h(Ih).scale(109.5).parallels([30,30])};function Bh(t,n){return[t,n]}Bh.invert=Bh;var qh=function(){return mh(Bh).scale(152.63)};function Dh(t,n){var e=wc(t),r=t===n?Sc(t):(e-wc(n))/(n-t),i=e/r+t;if(bc(r)<1e-6)return Bh;function o(t,n){var e=i-n,o=r*t;return[e*Sc(o),i-e*wc(o)]}return o.invert=function(t,n){var e=i-n,o=xc(t,bc(e))*Tc(e);return e*r<0&&(o-=dc*Tc(t)*Tc(e)),[o/r,i-Tc(r)*Ec(t*t+e*e)]},o}var jh=function(){return _h(Dh).scale(131.154).center([0,13.9389])},Uh=1.340264,Fh=-.081106,Hh=893e-6,Yh=.003796,Wh=Ec(3)/2;function Xh(t,n){var e=Lc(Wh*Sc(n)),r=e*e,i=r*r*r;return[t*wc(e)/(Wh*(Uh+3*Fh*r+i*(7*Hh+9*Yh*r))),e*(Uh+Fh*r+i*(Hh+Yh*r))]}Xh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=e=(r*(Uh+Fh*i+o*(Hh+Yh*i))-n)/(Uh+3*Fh*i+o*(7*Hh+9*Yh*i)))*r)*i*i,!(bc(e)<1e-12));++a);return[Wh*t*(Uh+3*Fh*i+o*(7*Hh+9*Yh*i))/wc(r),Lc(Sc(r)/Wh)]};var Vh=function(){return mh(Xh).scale(177.158)};function Gh(t,n){var e=wc(n),r=wc(t)*e;return[e*Sc(t)/r,Sc(n)/r]}Gh.invert=Ch(_c);var $h=function(){return mh(Gh).scale(144.049).clipAngle(60)},Zh=function(){var t,n,e,r,i,o,a,u=1,c=0,f=0,s=1,l=1,h=0,d=null,p=1,g=1,y=ah({point:function(t,n){var e=b([t,n]);this.stream.point(e[0],e[1])}}),v=ul;function m(){return p=u*s,g=u*l,o=a=null,b}function b(e){var r=e[0]*p,i=e[1]*g;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+f]}return b.invert=function(e){var r=e[0]-c,i=e[1]-f;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/g]},b.stream=function(t){return o&&a===t?o:o=y(v(a=t))},b.postclip=function(t){return arguments.length?(v=t,d=e=r=i=null,m()):v},b.clipExtent=function(t){return arguments.length?(v=null==t?(d=e=r=i=null,ul):Es(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),m()):null==d?null:[[d,e],[r,i]]},b.scale=function(t){return arguments.length?(u=+t,m()):u},b.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],m()):[c,f]},b.angle=function(e){return arguments.length?(n=Sc(h=e%360*mc),t=wc(h),m()):h*vc},b.reflectX=function(t){return arguments.length?(s=t?-1:1,m()):s<0},b.reflectY=function(t){return arguments.length?(l=t?-1:1,m()):l<0},b.fitExtent=function(t,n){return fh(b,t,n)},b.fitSize=function(t,n){return sh(b,t,n)},b.fitWidth=function(t,n){return lh(b,t,n)},b.fitHeight=function(t,n){return hh(b,t,n)},b};function Qh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Qh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,a=o*o;r-=e=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-n)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(bc(e)>1e-6&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Kh=function(){return mh(Qh).scale(175.295)};function Jh(t,n){return[wc(n)*Sc(t),Sc(n)]}Jh.invert=Ch(Lc);var td=function(){return mh(Jh).scale(249.5).clipAngle(90.000001)};function nd(t,n){var e=wc(n),r=1+wc(t)*e;return[e*Sc(t)/r,Sc(n)/r]}nd.invert=Ch((function(t){return 2*_c(t)}));var ed=function(){return mh(nd).scale(250).clipAngle(142)};function rd(t,n){return[Ac(Nc((pc+n)/2)),-t]}rd.invert=function(t,n){return[-n,2*_c(kc(t))-pc]};var id=function(){var t=Rh(rd),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function od(t,n){return t.parent===n.parent?1:2}function ad(t,n){return t+n.x}function ud(t,n){return Math.max(t,n.y)}var cd=function(){var t=od,n=1,e=1,r=!1;function i(i){var o,a=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(ad,0)/t.length}(e),n.y=function(t){return 1+t.reduce(ud,0)}(e)):(n.x=o?a+=t(n,o):0,n.y=0,o=n)}));var u=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=u.x-t(u,c)/2,s=c.x+t(c,u)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function fd(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function sd(t,n){var e,r,i,o,a,u=new pd(t),c=+t.value&&(u.value=t.value),f=[u];for(null==n&&(n=ld);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(a=i.length))for(e.children=new Array(a),o=a-1;o>=0;--o)f.push(r=e.children[o]=new pd(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(dd)}function ld(t){return t.children}function hd(t){t.data=t.data.data}function dd(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function pd(t){this.data=t,this.depth=this.height=0,this.parent=null}pd.prototype=sd.prototype={constructor:pd,count:function(){return this.eachAfter(fd)},each:function(t){var n,e,r,i,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r])}while(a.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=a.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return sd(this).eachBefore(hd)}};var gd=Array.prototype.slice;var yd=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(gd.call(t))).length,o=[];r<i;)n=t[r],e&&bd(e,n)?++r:(e=xd(o=vd(o,n)),r=0);return e};function vd(t,n){var e,r;if(_d(n,t))return[n];for(e=0;e<t.length;++e)if(md(n,t[e])&&_d(wd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(md(wd(t[e],t[r]),n)&&md(wd(t[e],n),t[r])&&md(wd(t[r],n),t[e])&&_d(Md(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function md(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function bd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function _d(t,n){for(var e=0;e<n.length;++e)if(!bd(t,n[e]))return!1;return!0}function xd(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return wd(t[0],t[1]);case 3:return Md(t[0],t[1],t[2])}var n}function wd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,c=o-e,f=a-r,s=u-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+a+f/l*s)/2,r:(l+i+u)/2}}function Md(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-a,d=r-f,p=i-u,g=i-s,y=c-o,v=l-o,m=r*r+i*i-o*o,b=m-a*a-u*u+c*c,_=m-f*f-s*s+l*l,x=d*p-h*g,w=(p*_-g*b)/(2*x)-r,M=(g*y-p*v)/x,k=(d*b-h*_)/(2*x)-i,A=(h*v-d*y)/x,C=M*M+A*A-1,S=2*(o+w*M+k*A),T=w*w+k*k-o*o,E=-(C?(S+Math.sqrt(S*S-4*C*T))/(2*C):T/S);return{x:r+w+M*E,y:i+k+A*E,r:E}}function kd(t,n,e){var r,i,o,a,u=t.x-n.x,c=t.y-n.y,f=u*u+c*c;f?(i=n.r+e.r,i*=i,a=t.r+e.r,i>(a*=a)?(r=(f+a-i)/(2*f),o=Math.sqrt(Math.max(0,a/f-r*r)),e.x=t.x-r*u-o*c,e.y=t.y-r*c+o*u):(r=(f+i-a)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*u-o*c,e.y=n.y+r*c+o*u)):(e.x=n.x+e.r,e.y=n.y)}function Ad(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Cd(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Sd(t){this._=t,this.next=null,this.previous=null}function Td(t){if(!(i=t.length))return 0;var n,e,r,i,o,a,u,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;kd(e,n,r=t[2]),n=new Sd(n),e=new Sd(e),r=new Sd(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(u=3;u<i;++u){kd(n._,e._,r=t[u]),r=new Sd(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(Ad(c._,r._)){e=c,n.next=e,e.previous=n,--u;continue t}s+=c._.r,c=c.next}else{if(Ad(f._,r._)){(n=f).next=e,e.previous=n,--u;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Cd(n);(r=r.next)!==e;)(a=Cd(r))<o&&(n=r,o=a);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=yd(n),u=0;u<i;++u)(n=t[u]).x-=r.x,n.y-=r.y;return r.r}var Ed=function(t){return Td(t),t};function Nd(t){return null==t?null:Pd(t)}function Pd(t){if("function"!=typeof t)throw new Error;return t}function Ld(){return 0}var Rd=function(t){return function(){return t}};function Od(t){return Math.sqrt(t.value)}var Id=function(){var t=null,n=1,e=1,r=Ld;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(zd(t)).eachAfter(Bd(r,.5)).eachBefore(qd(1)):i.eachBefore(zd(Od)).eachAfter(Bd(Ld,1)).eachAfter(Bd(r,i.r/Math.min(n,e))).eachBefore(qd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Nd(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Rd(+t),i):r},i};function zd(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Bd(t,n){return function(e){if(r=e.children){var r,i,o,a=r.length,u=t(e)*n||0;if(u)for(i=0;i<a;++i)r[i].r+=u;if(o=Td(r),u)for(i=0;i<a;++i)r[i].r-=u;e.r=o+u}}}function qd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var Dd=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},jd=function(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(r-n)/t.value;++u<c;)(o=a[u]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f},Ud=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&jd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,a=r.x1-e,u=r.y1-e;a<i&&(i=a=(i+a)/2),u<o&&(o=u=(o+u)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=u}}(n,o)),r&&i.eachBefore(Dd),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},Fd={depth:-1},Hd={};function Yd(t){return t.id}function Wd(t){return t.parentId}var Xd=function(){var t=Yd,n=Wd;function e(e){var r,i,o,a,u,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],u=l[i]=new pd(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f="$"+(u.id=c)]=f in h?Hd:u);for(i=0;i<s;++i)if(u=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(a=h["$"+c]))throw new Error("missing: "+c);if(a===Hd)throw new Error("ambiguous: "+c);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(o)throw new Error("multiple roots");o=u}if(!o)throw new Error("no root");if(o.parent=Fd,o.eachBefore((function(t){t.depth=t.parent.depth+1,--s})).eachBefore(dd),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Pd(n),e):t},e.parentId=function(t){return arguments.length?(n=Pd(t),e):n},e};function Vd(t,n){return t.parent===n.parent?1:2}function Gd(t){var n=t.children;return n?n[0]:t.t}function $d(t){var n=t.children;return n?n[n.length-1]:t.t}function Zd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Qd(t,n,e){return t.a.parent===n.parent?t.a:e}function Kd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Kd.prototype=Object.create(pd.prototype);var Jd=function(){var t=Vd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,a=new Kd(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new Kd(r[i],i)),e.parent=n;return(a.parent=new Kd(null,0)).children=[a],a}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(a),r)i.eachBefore(u);else{var f=i,s=i,l=i;i.eachBefore((function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)}));var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),g=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*g}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,a=n,u=e,c=o.parent.children[0],f=o.m,s=a.m,l=u.m,h=c.m;u=$d(u),o=Gd(o),u&&o;)c=Gd(c),(a=$d(a)).a=n,(i=u.z+l-o.z-f+t(u._,o._))>0&&(Zd(Qd(u,n,r),n,i),f+=i,s+=i),l+=u.m,f+=o.m,h+=c.m,s+=a.m;u&&!$d(a)&&(a.t=u,a.m+=l-s),o&&!Gd(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},tp=function(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(i-e)/t.value;++u<c;)(o=a[u]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f},np=(1+Math.sqrt(5))/2;function ep(t,n,e,r,i,o){for(var a,u,c,f,s,l,h,d,p,g,y,v=[],m=n.children,b=0,_=0,x=m.length,w=n.value;b<x;){c=i-e,f=o-r;do{s=m[_++].value}while(!s&&_<x);for(l=h=s,y=s*s*(g=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/y,y/l);_<x;++_){if(s+=u=m[_].value,u<l&&(l=u),u>h&&(h=u),y=s*s*g,(d=Math.max(h/y,y/l))>p){s-=u;break}p=d}v.push(a={value:s,dice:c<f,children:m.slice(b,_)}),a.dice?jd(a,e,r,i,w?r+=f*s/w:o):tp(a,e,r,w?e+=c*s/w:i,o),w-=s,b=_}return v}var rp=function t(n){function e(t,e,r,i,o){ep(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(np),ip=function(){var t=rp,n=!1,e=1,r=1,i=[0],o=Ld,a=Ld,u=Ld,c=Ld,f=Ld;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Dd),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=a(n)-e,(l-=u(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=Pd(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Rd(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:Rd(+t),s):a},s.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:Rd(+t),s):u},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Rd(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Rd(+t),s):f},s},op=function(t,n,e,r,i){var o,a,u=t.children,c=u.length,f=new Array(c+1);for(f[0]=a=o=0;o<c;++o)f[o+1]=a+=u[o].value;!function t(n,e,r,i,o,a,c){if(n>=e-1){var s=u[n];return s.x0=i,s.y0=o,s.x1=a,void(s.y1=c)}var l=f[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var g=d+p>>>1;f[g]<h?d=g+1:p=g}h-f[d-1]<f[d]-h&&n+1<d&&--d;var y=f[d]-l,v=r-y;if(a-i>c-o){var m=(i*v+a*y)/r;t(n,d,y,i,o,m,c),t(d,e,v,m,o,a,c)}else{var b=(o*v+c*y)/r;t(n,d,y,i,o,a,b),t(d,e,v,i,b,a,c)}}(0,c,t.value,n,e,r,i)},ap=function(t,n,e,r,i){(1&t.depth?tp:jd)(t,n,e,r,i)},up=function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,c,f,s,l=-1,h=a.length,d=t.value;++l<h;){for(c=(u=a[l]).children,f=u.value=0,s=c.length;f<s;++f)u.value+=c[f].value;u.dice?jd(u,e,r,i,r+=(o-r)*u.value/d):tp(u,e,r,e+=(i-e)*u.value/d,o),d-=u.value}else t._squarify=a=ep(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(np),cp=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},fp=function(t,n){var e=se(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},sp=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},lp=Math.SQRT2;function hp(t){return((t=Math.exp(t))+1/t)/2}var dp=function(t,n){var e,r,i=t[0],o=t[1],a=t[2],u=n[0],c=n[1],f=n[2],s=u-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/a)/lp,e=function(t){return[i+t*s,o+t*l,a*Math.exp(lp*t*r)]};else{var d=Math.sqrt(h),p=(f*f-a*a+4*h)/(2*a*2*d),g=(f*f-a*a-4*h)/(2*f*2*d),y=Math.log(Math.sqrt(p*p+1)-p),v=Math.log(Math.sqrt(g*g+1)-g);r=(v-y)/lp,e=function(t){var n,e=t*r,u=hp(y),c=a/(2*d)*(u*(n=lp*e+y,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(y));return[i+c*s,o+c*l,a*u/hp(lp*e+y)]}}return e.duration=1e3*r,e};function pp(t){return function(n,e){var r=t((n=ee(n)).h,(e=ee(e)).h),i=he(n.s,e.s),o=he(n.l,e.l),a=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}var gp=pp(se),yp=pp(he);function vp(t,n){var e=he((t=yo(t)).l,(n=yo(n)).l),r=he(t.a,n.a),i=he(t.b,n.b),o=he(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function mp(t){return function(n,e){var r=t((n=ko(n)).h,(e=ko(e)).h),i=he(n.c,e.c),o=he(n.l,e.l),a=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}var bp=mp(se),_p=mp(he);function xp(t){return function n(e){function r(n,r){var i=t((n=Lo(n)).h,(r=Lo(r)).h),o=he(n.s,r.s),a=he(n.l,r.l),u=he(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}var wp=xp(se),Mp=xp(he);function kp(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var Ap=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},Cp=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},Sp=function(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],c=0;++r<i;)n=u,u=t[r],c+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return[o/(c*=3),a/c]};function Tp(t,n){return t[0]-n[0]||t[1]-n[1]}function Ep(t){for(var n,e,r,i=t.length,o=[0,1],a=2,u=2;u<i;++u){for(;a>1&&(n=t[o[a-2]],e=t[o[a-1]],r=t[u],(e[0]-n[0])*(r[1]-n[1])-(e[1]-n[1])*(r[0]-n[0])<=0);)--a;o[a++]=u}return o.slice(0,a)}var Np=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Tp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Ep(r),a=Ep(i),u=a[0]===o[0],c=a[a.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+u;n<a.length-c;++n)f.push(t[r[a[n]][2]]);return f},Pp=function(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>u!=f>u&&a<(c-e)*(u-r)/(f-r)+e&&(s=!s),c=e,f=r;return s},Lp=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],c=0;++r<i;)n=a,e=u,n-=a=(o=t[r])[0],e-=u=o[1],c+=Math.sqrt(n*n+e*e);return c},Rp=function(){return Math.random()},Op=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Rp),Ip=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Rp),zp=function t(n){function e(){var t=Ip.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Rp),Bp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Rp),qp=function t(n){function e(t){var e=Bp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Rp),Dp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Rp);function jp(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Up(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var Fp=Array.prototype,Hp=Fp.map,Yp=Fp.slice,Wp={name:"implicit"};function Xp(){var t=Ki(),n=[],e=[],r=Wp;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Wp)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Ki();for(var r,o,a=-1,u=e.length;++a<u;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=Yp.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Xp(n,e).unknown(r)},jp.apply(i,arguments),i}function Vp(){var t,n,e=Xp().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,u=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-u+2*c),a&&(t=Math.floor(t)),l+=(h-l-t*(e-u))*f,n=t*(1-u),a&&(l=Math.round(l),n=Math.round(n));var d=M(e).map((function(n){return l+t*n}));return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,s()):a},e.padding=function(t){return arguments.length?(u=Math.min(1,c=+t),s()):u},e.paddingInner=function(t){return arguments.length?(u=Math.min(1,t),s()):u},e.paddingOuter=function(t){return arguments.length?(c=+t,s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return Vp(r(),o).round(a).paddingInner(u).paddingOuter(c).align(f)},jp.apply(s(),arguments)}function Gp(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return Gp(n())},t}function $p(){return Gp(Vp.apply(null,arguments).paddingInner(1))}var Zp=function(t){return+t},Qp=[0,1];function Kp(t){return t}function Jp(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function tg(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function ng(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=Jp(i,r),o=e(a,o)):(r=Jp(r,i),o=e(o,a)),function(t){return o(r(t))}}function eg(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=Jp(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=f(t,n,1,r)-1;return o[e](i[e](n))}}function rg(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ig(){var t,n,e,r,i,o,a=Qp,u=Qp,c=Ee,f=Kp;function s(){return r=Math.min(a.length,u.length)>2?eg:ng,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(u,a.map(t),we)))(e)))},l.domain=function(t){return arguments.length?(a=Hp.call(t,Zp),f===Kp||(f=tg(a)),s()):a.slice()},l.range=function(t){return arguments.length?(u=Yp.call(t),s()):u.slice()},l.rangeRound=function(t){return u=Yp.call(t),c=sp,s()},l.clamp=function(t){return arguments.length?(f=t?tg(a):Kp,l):f!==Kp},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function og(t,n){return ig()(t,n)}var ag=function(t,n,e,r){var i,o=E(t,n,e);switch((r=Vu(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=uc(o,a))||(r.precision=i),Ku(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=cc(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=ac(o))||(r.precision=i-2*("%"===r.type))}return Qu(r)};function ug(t){var n=t.domain;return t.ticks=function(t){var e=n();return S(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ag(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],c=i[a];return c<u&&(r=u,u=c,c=r,r=o,o=a,a=r),(r=T(u,c,e))>0?r=T(u=Math.floor(u/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=T(u=Math.ceil(u*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(c*r)/r,n(i)),t},t}function cg(){var t=og(Kp,Kp);return t.copy=function(){return rg(t,cg())},jp.apply(t,arguments),ug(t)}function fg(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Hp.call(n,Zp),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return fg(t).unknown(n)},t=arguments.length?Hp.call(t,Zp):[0,1],ug(e)}var sg=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t};function lg(t){return Math.log(t)}function hg(t){return Math.exp(t)}function dg(t){return-Math.log(-t)}function pg(t){return-Math.exp(-t)}function gg(t){return isFinite(t)?+("1e"+t):t<0?0:t}function yg(t){return function(n){return-t(-n)}}function vg(t){var n,e,r=t(lg,hg),i=r.domain,o=10;function a(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?gg:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=yg(n),e=yg(e),t(dg,pg)):t(lg,hg),r}return r.base=function(t){return arguments.length?(o=+t,a()):o},r.domain=function(t){return arguments.length?(i(t),a()):i()},r.ticks=function(t){var r,a=i(),u=a[0],c=a[a.length-1];(r=c<u)&&(h=u,u=c,c=h);var f,s,l,h=n(u),d=n(c),p=null==t?10:+t,g=[];if(!(o%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,u>0){for(;h<d;++h)for(s=1,f=e(h);s<o;++s)if(!((l=f*s)<u)){if(l>c)break;g.push(l)}}else for(;h<d;++h)for(s=o-1,f=e(h);s>=1;--s)if(!((l=f*s)<u)){if(l>c)break;g.push(l)}}else g=S(h,d,Math.min(d-h,p)).map(e);return r?g.reverse():g},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=Qu(i)),t===1/0)return i;null==t&&(t=10);var a=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=a?i(t):""}},r.nice=function(){return i(sg(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function mg(){var t=vg(ig()).domain([1,10]);return t.copy=function(){return rg(t,mg()).base(t.base())},jp.apply(t,arguments),t}function bg(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function _g(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function xg(t){var n=1,e=t(bg(n),_g(n));return e.constant=function(e){return arguments.length?t(bg(n=+e),_g(n)):n},ug(e)}function wg(){var t=xg(ig());return t.copy=function(){return rg(t,wg()).constant(t.constant())},jp.apply(t,arguments)}function Mg(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function kg(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Ag(t){return t<0?-t*t:t*t}function Cg(t){var n=t(Kp,Kp),e=1;function r(){return 1===e?t(Kp,Kp):.5===e?t(kg,Ag):t(Mg(e),Mg(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},ug(n)}function Sg(){var t=Cg(ig());return t.copy=function(){return rg(t,Sg()).exponent(t.exponent())},jp.apply(t,arguments),t}function Tg(){return Sg.apply(null,arguments).exponent(.5)}function Eg(){var t,n=[],e=[],r=[];function o(){var t=0,i=Math.max(1,e.length);for(r=new Array(i-1);++t<i;)r[t-1]=L(n,t/i);return a}function a(n){return isNaN(n=+n)?t:e[f(r,n)]}return a.invertExtent=function(t){var i=e.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:n[0],i<r.length?r[i]:n[n.length-1]]},a.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,r=0,a=t.length;r<a;++r)null==(e=t[r])||isNaN(e=+e)||n.push(e);return n.sort(i),o()},a.range=function(t){return arguments.length?(e=Yp.call(t),o()):e.slice()},a.unknown=function(n){return arguments.length?(t=n,a):t},a.quantiles=function(){return r.slice()},a.copy=function(){return Eg().domain(n).range(e).unknown(t)},jp.apply(a,arguments)}function Ng(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function a(n){return n<=n?o[f(i,n,0,r)]:t}function u(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return a}return a.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],u()):[n,e]},a.range=function(t){return arguments.length?(r=(o=Yp.call(t)).length-1,u()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[n,i[0]]:a>=r?[i[r-1],e]:[i[a-1],i[a]]},a.unknown=function(n){return arguments.length?(t=n,a):a},a.thresholds=function(){return i.slice()},a.copy=function(){return Ng().domain([n,e]).range(o).unknown(t)},jp.apply(ug(a),arguments)}function Pg(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[f(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=Yp.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=Yp.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return Pg().domain(n).range(e).unknown(t)},jp.apply(i,arguments)}var Lg=new Date,Rg=new Date;function Og(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return Og((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Lg.setTime(+n),Rg.setTime(+r),t(Lg),t(Rg),Math.floor(e(Lg,Rg))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Ig=Og((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Ig.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Og((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var zg=Ig,Bg=Ig.range,qg=Og((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Dg=qg,jg=qg.range;function Ug(t){return Og((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Fg=Ug(0),Hg=Ug(1),Yg=Ug(2),Wg=Ug(3),Xg=Ug(4),Vg=Ug(5),Gg=Ug(6),$g=Fg.range,Zg=Hg.range,Qg=Yg.range,Kg=Wg.range,Jg=Xg.range,ty=Vg.range,ny=Gg.range,ey=Og((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1})),ry=ey,iy=ey.range,oy=Og((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()})),ay=oy,uy=oy.range,cy=Og((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),fy=cy,sy=cy.range,ly=Og((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),hy=ly,dy=ly.range,py=Og((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));py.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Og((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):py:null};var gy=py,yy=py.range;function vy(t){return Og((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var my=vy(0),by=vy(1),_y=vy(2),xy=vy(3),wy=vy(4),My=vy(5),ky=vy(6),Ay=my.range,Cy=by.range,Sy=_y.range,Ty=xy.range,Ey=wy.range,Ny=My.range,Py=ky.range,Ly=Og((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1})),Ry=Ly,Oy=Ly.range,Iy=Og((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Iy.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Og((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var zy=Iy,By=Iy.range;function qy(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Dy(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function jy(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function Uy(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,f=Jy(i),s=tv(i),l=Jy(o),h=tv(o),d=Jy(a),p=tv(a),g=Jy(u),y=tv(u),v=Jy(c),m=tv(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:xv,e:xv,f:Cv,g:Bv,G:Dv,H:wv,I:Mv,j:kv,L:Av,m:Sv,M:Tv,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:cm,s:fm,S:Ev,u:Nv,U:Pv,V:Rv,w:Ov,W:Iv,x:null,X:null,y:zv,Y:qv,Z:jv,"%":um},_={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Uv,e:Uv,f:Xv,g:rm,G:om,H:Fv,I:Hv,j:Yv,L:Wv,m:Vv,M:Gv,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:cm,s:fm,S:$v,u:Zv,U:Qv,V:Jv,w:tm,W:nm,x:null,X:null,y:em,Y:im,Z:am,"%":um},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return k(t,n,e,r)},d:lv,e:lv,f:vv,g:uv,G:av,H:dv,I:dv,j:hv,L:yv,m:sv,M:pv,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},q:fv,Q:bv,s:_v,S:gv,u:ev,U:rv,V:iv,w:nv,W:ov,x:function(t,n,r){return k(t,e,n,r)},X:function(t,n,e){return k(t,r,n,e)},y:uv,Y:av,Z:cv,"%":mv};function w(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++u<f;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=Vy[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=jy(1900,void 0,1);if(k(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Dy(jy(o.y,0,1))).getUTCDay(),r=i>4||0===i?by.ceil(r):by(r),r=Ry.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=qy(jy(o.y,0,1))).getDay(),r=i>4||0===i?Hg.ceil(r):Hg(r),r=ry.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Dy(jy(o.y,0,1)).getUTCDay():qy(jy(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Dy(o)):qy(o)}}function k(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Vy?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),_.x=w(e,_),_.X=w(r,_),_.c=w(n,_),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}var Fy,Hy,Yy,Wy,Xy,Vy={"-":"",_:" ",0:"0"},Gy=/^\s*\d+/,$y=/^%/,Zy=/[\\^$*+?|[\]().{}]/g;function Qy(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Ky(t){return t.replace(Zy,"\\$&")}function Jy(t){return new RegExp("^(?:"+t.map(Ky).join("|")+")","i")}function tv(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function nv(t,n,e){var r=Gy.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ev(t,n,e){var r=Gy.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function rv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function iv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function ov(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function av(t,n,e){var r=Gy.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function uv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function cv(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function fv(t,n,e){var r=Gy.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function sv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function lv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function hv(t,n,e){var r=Gy.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function dv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function pv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function gv(t,n,e){var r=Gy.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function yv(t,n,e){var r=Gy.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function vv(t,n,e){var r=Gy.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function mv(t,n,e){var r=$y.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function bv(t,n,e){var r=Gy.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function _v(t,n,e){var r=Gy.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function xv(t,n){return Qy(t.getDate(),n,2)}function wv(t,n){return Qy(t.getHours(),n,2)}function Mv(t,n){return Qy(t.getHours()%12||12,n,2)}function kv(t,n){return Qy(1+ry.count(zg(t),t),n,3)}function Av(t,n){return Qy(t.getMilliseconds(),n,3)}function Cv(t,n){return Av(t,n)+"000"}function Sv(t,n){return Qy(t.getMonth()+1,n,2)}function Tv(t,n){return Qy(t.getMinutes(),n,2)}function Ev(t,n){return Qy(t.getSeconds(),n,2)}function Nv(t){var n=t.getDay();return 0===n?7:n}function Pv(t,n){return Qy(Fg.count(zg(t)-1,t),n,2)}function Lv(t){var n=t.getDay();return n>=4||0===n?Xg(t):Xg.ceil(t)}function Rv(t,n){return t=Lv(t),Qy(Xg.count(zg(t),t)+(4===zg(t).getDay()),n,2)}function Ov(t){return t.getDay()}function Iv(t,n){return Qy(Hg.count(zg(t)-1,t),n,2)}function zv(t,n){return Qy(t.getFullYear()%100,n,2)}function Bv(t,n){return Qy((t=Lv(t)).getFullYear()%100,n,2)}function qv(t,n){return Qy(t.getFullYear()%1e4,n,4)}function Dv(t,n){var e=t.getDay();return Qy((t=e>=4||0===e?Xg(t):Xg.ceil(t)).getFullYear()%1e4,n,4)}function jv(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Qy(n/60|0,"0",2)+Qy(n%60,"0",2)}function Uv(t,n){return Qy(t.getUTCDate(),n,2)}function Fv(t,n){return Qy(t.getUTCHours(),n,2)}function Hv(t,n){return Qy(t.getUTCHours()%12||12,n,2)}function Yv(t,n){return Qy(1+Ry.count(zy(t),t),n,3)}function Wv(t,n){return Qy(t.getUTCMilliseconds(),n,3)}function Xv(t,n){return Wv(t,n)+"000"}function Vv(t,n){return Qy(t.getUTCMonth()+1,n,2)}function Gv(t,n){return Qy(t.getUTCMinutes(),n,2)}function $v(t,n){return Qy(t.getUTCSeconds(),n,2)}function Zv(t){var n=t.getUTCDay();return 0===n?7:n}function Qv(t,n){return Qy(my.count(zy(t)-1,t),n,2)}function Kv(t){var n=t.getUTCDay();return n>=4||0===n?wy(t):wy.ceil(t)}function Jv(t,n){return t=Kv(t),Qy(wy.count(zy(t),t)+(4===zy(t).getUTCDay()),n,2)}function tm(t){return t.getUTCDay()}function nm(t,n){return Qy(by.count(zy(t)-1,t),n,2)}function em(t,n){return Qy(t.getUTCFullYear()%100,n,2)}function rm(t,n){return Qy((t=Kv(t)).getUTCFullYear()%100,n,2)}function im(t,n){return Qy(t.getUTCFullYear()%1e4,n,4)}function om(t,n){var e=t.getUTCDay();return Qy((t=e>=4||0===e?wy(t):wy.ceil(t)).getUTCFullYear()%1e4,n,4)}function am(){return"+0000"}function um(){return"%"}function cm(t){return+t}function fm(t){return Math.floor(+t/1e3)}function sm(t){return Fy=Uy(t),Hy=Fy.format,Yy=Fy.parse,Wy=Fy.utcFormat,Xy=Fy.utcParse,Fy}sm({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function lm(t){return new Date(t)}function hm(t){return t instanceof Date?+t:+new Date(+t)}function dm(t,n,e,r,i,a,u,c,f){var s=og(Kp,Kp),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),g=f("%I:%M"),y=f("%I %p"),v=f("%a %d"),m=f("%b %d"),b=f("%B"),_=f("%Y"),x=[[u,1,1e3],[u,5,5e3],[u,15,15e3],[u,30,3e4],[a,1,6e4],[a,5,3e5],[a,15,9e5],[a,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function w(o){return(u(o)<o?d:a(o)<o?p:i(o)<o?g:r(o)<o?y:n(o)<o?e(o)<o?v:m:t(o)<o?b:_)(o)}function M(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var a=Math.abs(r-e)/n,u=o((function(t){return t[2]})).right(x,a);u===x.length?(i=E(e/31536e6,r/31536e6,n),n=t):u?(i=(u=x[a/x[u-1][2]<x[u][2]/a?u-1:u])[1],n=u[0]):(i=Math.max(E(e,r,n),1),n=c)}return null==i?n:n.every(i)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(Hp.call(t,hm)):h().map(lm)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],a=o<i;return a&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],a?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(sg(e,t)):s},s.copy=function(){return rg(s,dm(t,n,e,r,i,a,u,c,f))},s}var pm=function(){return jp.apply(dm(zg,Dg,Fg,ry,ay,fy,hy,gy,Hy).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},gm=Og((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),ym=gm,vm=gm.range,mm=Og((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()})),bm=mm,_m=mm.range,xm=Og((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),wm=xm,Mm=xm.range,km=function(){return jp.apply(dm(zy,ym,my,Ry,bm,wm,hy,gy,Wy).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function Am(){var t,n,e,r,i,o=0,a=1,u=Kp,c=!1;function f(n){return isNaN(n=+n)?i:u(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return f.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(a=+i[1]),e=t===n?0:1/(n-t),f):[o,a]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(u=t,f):u},f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(a),e=t===n?0:1/(n-t),f}}function Cm(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Sm(){var t=ug(Am()(Kp));return t.copy=function(){return Cm(t,Sm())},Up.apply(t,arguments)}function Tm(){var t=vg(Am()).domain([1,10]);return t.copy=function(){return Cm(t,Tm()).base(t.base())},Up.apply(t,arguments)}function Em(){var t=xg(Am());return t.copy=function(){return Cm(t,Em()).constant(t.constant())},Up.apply(t,arguments)}function Nm(){var t=Cg(Am());return t.copy=function(){return Cm(t,Nm()).exponent(t.exponent())},Up.apply(t,arguments)}function Pm(){return Nm.apply(null,arguments).exponent(.5)}function Lm(){var t=[],n=Kp;function e(e){if(!isNaN(e=+e))return n((f(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,o=0,a=n.length;o<a;++o)null==(r=n[o])||isNaN(r=+r)||t.push(r);return t.sort(i),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Lm(n).domain(t)},Up.apply(e,arguments)}function Rm(){var t,n,e,r,i,o,a,u=0,c=.5,f=1,s=Kp,l=!1;function h(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-n)*(t<n?r:i),s(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(a){return arguments.length?(t=o(u=+a[0]),n=o(c=+a[1]),e=o(f=+a[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[u,c,f]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(s=t,h):s},h.unknown=function(t){return arguments.length?(a=t,h):a},function(a){return o=a,t=a(u),n=a(c),e=a(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function Om(){var t=ug(Rm()(Kp));return t.copy=function(){return Cm(t,Om())},Up.apply(t,arguments)}function Im(){var t=vg(Rm()).domain([.1,1,10]);return t.copy=function(){return Cm(t,Im()).base(t.base())},Up.apply(t,arguments)}function zm(){var t=xg(Rm());return t.copy=function(){return Cm(t,zm()).constant(t.constant())},Up.apply(t,arguments)}function Bm(){var t=Cg(Rm());return t.copy=function(){return Cm(t,Bm()).exponent(t.exponent())},Up.apply(t,arguments)}function qm(){return Bm.apply(null,arguments).exponent(.5)}var Dm=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},jm=Dm("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Um=Dm("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Fm=Dm("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Hm=Dm("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ym=Dm("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Wm=Dm("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Xm=Dm("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Vm=Dm("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Gm=Dm("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),$m=Dm("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Zm=function(t){return ge(t[t.length-1])},Qm=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Dm),Km=Zm(Qm),Jm=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Dm),tb=Zm(Jm),nb=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Dm),eb=Zm(nb),rb=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Dm),ib=Zm(rb),ob=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Dm),ab=Zm(ob),ub=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Dm),cb=Zm(ub),fb=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Dm),sb=Zm(fb),lb=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Dm),hb=Zm(lb),db=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Dm),pb=Zm(db),gb=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Dm),yb=Zm(gb),vb=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Dm),mb=Zm(vb),bb=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Dm),_b=Zm(bb),xb=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Dm),wb=Zm(xb),Mb=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Dm),kb=Zm(Mb),Ab=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Dm),Cb=Zm(Ab),Sb=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Dm),Tb=Zm(Sb),Eb=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Dm),Nb=Zm(Eb),Pb=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Dm),Lb=Zm(Pb),Rb=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Dm),Ob=Zm(Rb),Ib=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Dm),zb=Zm(Ib),Bb=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Dm),qb=Zm(Bb),Db=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Dm),jb=Zm(Db),Ub=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Dm),Fb=Zm(Ub),Hb=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Dm),Yb=Zm(Hb),Wb=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Dm),Xb=Zm(Wb),Vb=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Dm),Gb=Zm(Vb),$b=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Dm),Zb=Zm($b),Qb=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"},Kb=Mp(Lo(300,.5,0),Lo(-240,.5,1)),Jb=Mp(Lo(-100,.75,.35),Lo(80,1.5,.8)),t_=Mp(Lo(260,.75,.35),Lo(80,1.5,.8)),n_=Lo(),e_=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return n_.h=360*t-100,n_.s=1.5-1.5*n,n_.l=.8-.9*n,n_+""},r_=$n(),i_=Math.PI/3,o_=2*Math.PI/3,a_=function(t){var n;return t=(.5-t)*Math.PI,r_.r=255*(n=Math.sin(t))*n,r_.g=255*(n=Math.sin(t+i_))*n,r_.b=255*(n=Math.sin(t+o_))*n,r_+""},u_=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"};function c_(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var f_=c_(Dm("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),s_=c_(Dm("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),l_=c_(Dm("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),h_=c_(Dm("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),d_=function(t){return kn(rn(t).call(document.documentElement))},p_=0;function g_(){return new y_}function y_(){this._="@"+(++p_).toString(36)}y_.prototype=g_.prototype={constructor:y_,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var v_=function(t){return"string"==typeof t?new xn([document.querySelectorAll(t)],[document.documentElement]):new xn([null==t?[]:t],_n)},m_=function(t,n){null==n&&(n=Ne().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Pe(t,n[e]);return i},b_=function(t){return function(){return t}},__=Math.abs,x_=Math.atan2,w_=Math.cos,M_=Math.max,k_=Math.min,A_=Math.sin,C_=Math.sqrt,S_=Math.PI,T_=S_/2,E_=2*S_;function N_(t){return t>1?0:t<-1?S_:Math.acos(t)}function P_(t){return t>=1?T_:t<=-1?-T_:Math.asin(t)}function L_(t){return t.innerRadius}function R_(t){return t.outerRadius}function O_(t){return t.startAngle}function I_(t){return t.endAngle}function z_(t){return t&&t.padAngle}function B_(t,n,e,r,i,o,a,u){var c=e-t,f=r-n,s=a-i,l=u-o,h=l*c-s*f;if(!(h*h<1e-12))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}function q_(t,n,e,r,i,o,a){var u=t-e,c=n-r,f=(a?o:-o)/C_(u*u+c*c),s=f*c,l=-f*u,h=t+s,d=n+l,p=e+s,g=r+l,y=(h+p)/2,v=(d+g)/2,m=p-h,b=g-d,_=m*m+b*b,x=i-o,w=h*g-p*d,M=(b<0?-1:1)*C_(M_(0,x*x*_-w*w)),k=(w*b-m*M)/_,A=(-w*m-b*M)/_,C=(w*b+m*M)/_,S=(-w*m+b*M)/_,T=k-y,E=A-v,N=C-y,P=S-v;return T*T+E*E>N*N+P*P&&(k=C,A=S),{cx:k,cy:A,x01:-s,y01:-l,x11:k*(i/x-1),y11:A*(i/x-1)}}var D_=function(){var t=L_,n=R_,e=b_(0),r=null,i=O_,o=I_,a=z_,u=null;function c(){var c,f,s=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-T_,d=o.apply(this,arguments)-T_,p=__(d-h),g=d>h;if(u||(u=c=Hi()),l<s&&(f=l,l=s,s=f),l>1e-12)if(p>E_-1e-12)u.moveTo(l*w_(h),l*A_(h)),u.arc(0,0,l,h,d,!g),s>1e-12&&(u.moveTo(s*w_(d),s*A_(d)),u.arc(0,0,s,d,h,g));else{var y,v,m=h,b=d,_=h,x=d,w=p,M=p,k=a.apply(this,arguments)/2,A=k>1e-12&&(r?+r.apply(this,arguments):C_(s*s+l*l)),C=k_(__(l-s)/2,+e.apply(this,arguments)),S=C,T=C;if(A>1e-12){var E=P_(A/s*A_(k)),N=P_(A/l*A_(k));(w-=2*E)>1e-12?(_+=E*=g?1:-1,x-=E):(w=0,_=x=(h+d)/2),(M-=2*N)>1e-12?(m+=N*=g?1:-1,b-=N):(M=0,m=b=(h+d)/2)}var P=l*w_(m),L=l*A_(m),R=s*w_(x),O=s*A_(x);if(C>1e-12){var I,z=l*w_(b),B=l*A_(b),q=s*w_(_),D=s*A_(_);if(p<S_&&(I=B_(P,L,q,D,z,B,R,O))){var j=P-I[0],U=L-I[1],F=z-I[0],H=B-I[1],Y=1/A_(N_((j*F+U*H)/(C_(j*j+U*U)*C_(F*F+H*H)))/2),W=C_(I[0]*I[0]+I[1]*I[1]);S=k_(C,(s-W)/(Y-1)),T=k_(C,(l-W)/(Y+1))}}M>1e-12?T>1e-12?(y=q_(q,D,P,L,l,T,g),v=q_(z,B,R,O,l,T,g),u.moveTo(y.cx+y.x01,y.cy+y.y01),T<C?u.arc(y.cx,y.cy,T,x_(y.y01,y.x01),x_(v.y01,v.x01),!g):(u.arc(y.cx,y.cy,T,x_(y.y01,y.x01),x_(y.y11,y.x11),!g),u.arc(0,0,l,x_(y.cy+y.y11,y.cx+y.x11),x_(v.cy+v.y11,v.cx+v.x11),!g),u.arc(v.cx,v.cy,T,x_(v.y11,v.x11),x_(v.y01,v.x01),!g))):(u.moveTo(P,L),u.arc(0,0,l,m,b,!g)):u.moveTo(P,L),s>1e-12&&w>1e-12?S>1e-12?(y=q_(R,O,z,B,s,-S,g),v=q_(P,L,q,D,s,-S,g),u.lineTo(y.cx+y.x01,y.cy+y.y01),S<C?u.arc(y.cx,y.cy,S,x_(y.y01,y.x01),x_(v.y01,v.x01),!g):(u.arc(y.cx,y.cy,S,x_(y.y01,y.x01),x_(y.y11,y.x11),!g),u.arc(0,0,s,x_(y.cy+y.y11,y.cx+y.x11),x_(v.cy+v.y11,v.cx+v.x11),g),u.arc(v.cx,v.cy,S,x_(v.y11,v.x11),x_(v.y01,v.x01),!g))):u.arc(0,0,s,x,_,g):u.lineTo(R,O)}else u.moveTo(0,0);if(u.closePath(),c)return u=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-S_/2;return[w_(r)*e,A_(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:b_(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:b_(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:b_(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:b_(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:b_(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:b_(+t),c):o},c.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:b_(+t),c):a},c.context=function(t){return arguments.length?(u=null==t?null:t,c):u},c};function j_(t){this._context=t}j_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var U_=function(t){return new j_(t)};function F_(t){return t[0]}function H_(t){return t[1]}var Y_=function(){var t=F_,n=H_,e=b_(!0),r=null,i=U_,o=null;function a(a){var u,c,f,s=a.length,l=!1;for(null==r&&(o=i(f=Hi())),u=0;u<=s;++u)!(u<s&&e(c=a[u],u,a))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,u,a),+n(c,u,a));if(f)return o=null,f+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:b_(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:b_(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:b_(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a},W_=function(){var t=F_,n=null,e=b_(0),r=H_,i=b_(!0),o=null,a=U_,u=null;function c(c){var f,s,l,h,d,p=c.length,g=!1,y=new Array(p),v=new Array(p);for(null==o&&(u=a(d=Hi())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===g)if(g=!g)s=f,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),l=f-1;l>=s;--l)u.point(y[l],v[l]);u.lineEnd(),u.areaEnd()}g&&(y[f]=+t(h,f,c),v[f]=+e(h,f,c),u.point(n?+n(h,f,c):y[f],r?+r(h,f,c):v[f]))}if(d)return u=null,d+""||null}function f(){return Y_().defined(i).curve(a).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:b_(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:b_(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:b_(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:b_(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:b_(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:b_(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:b_(!!t),c):i},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c},X_=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},V_=function(t){return t},G_=function(){var t=V_,n=X_,e=null,r=b_(0),i=b_(E_),o=b_(0);function a(a){var u,c,f,s,l,h=a.length,d=0,p=new Array(h),g=new Array(h),y=+r.apply(this,arguments),v=Math.min(E_,Math.max(-E_,i.apply(this,arguments)-y)),m=Math.min(Math.abs(v)/h,o.apply(this,arguments)),b=m*(v<0?-1:1);for(u=0;u<h;++u)(l=g[p[u]=u]=+t(a[u],u,a))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(g[t],g[e])})):null!=e&&p.sort((function(t,n){return e(a[t],a[n])})),u=0,f=d?(v-h*b)/d:0;u<h;++u,y=s)c=p[u],s=y+((l=g[c])>0?l*f:0)+b,g[c]={data:a[c],index:u,value:l,startAngle:y,endAngle:s,padAngle:m};return g}return a.value=function(n){return arguments.length?(t="function"==typeof n?n:b_(+n),a):t},a.sortValues=function(t){return arguments.length?(n=t,e=null,a):n},a.sort=function(t){return arguments.length?(e=t,n=null,a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:b_(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:b_(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:b_(+t),a):o},a},$_=Q_(U_);function Z_(t){this._curve=t}function Q_(t){function n(n){return new Z_(t(n))}return n._curve=t,n}function K_(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Q_(t)):n()._curve},t}Z_.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var J_=function(){return K_(Y_().curve($_))},tx=function(){var t=W_().curve($_),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return K_(e())},delete t.lineX0,t.lineEndAngle=function(){return K_(r())},delete t.lineX1,t.lineInnerRadius=function(){return K_(i())},delete t.lineY0,t.lineOuterRadius=function(){return K_(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Q_(t)):n()._curve},t},nx=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},ex=Array.prototype.slice;function rx(t){return t.source}function ix(t){return t.target}function ox(t){var n=rx,e=ix,r=F_,i=H_,o=null;function a(){var a,u=ex.call(arguments),c=n.apply(this,u),f=e.apply(this,u);if(o||(o=a=Hi()),t(o,+r.apply(this,(u[0]=c,u)),+i.apply(this,u),+r.apply(this,(u[0]=f,u)),+i.apply(this,u)),a)return o=null,a+""||null}return a.source=function(t){return arguments.length?(n=t,a):n},a.target=function(t){return arguments.length?(e=t,a):e},a.x=function(t){return arguments.length?(r="function"==typeof t?t:b_(+t),a):r},a.y=function(t){return arguments.length?(i="function"==typeof t?t:b_(+t),a):i},a.context=function(t){return arguments.length?(o=null==t?null:t,a):o},a}function ax(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function ux(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function cx(t,n,e,r,i){var o=nx(n,e),a=nx(n,e=(e+i)/2),u=nx(r,e),c=nx(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],c[0],c[1])}function fx(){return ox(ax)}function sx(){return ox(ux)}function lx(){var t=ox(cx);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var hx={draw:function(t,n){var e=Math.sqrt(n/S_);t.moveTo(e,0),t.arc(0,0,e,0,E_)}},dx={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},px=Math.sqrt(1/3),gx=2*px,yx={draw:function(t,n){var e=Math.sqrt(n/gx),r=e*px;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},vx=Math.sin(S_/10)/Math.sin(7*S_/10),mx=Math.sin(E_/10)*vx,bx=-Math.cos(E_/10)*vx,_x={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=mx*e,i=bx*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var a=E_*o/5,u=Math.cos(a),c=Math.sin(a);t.lineTo(c*e,-u*e),t.lineTo(u*r-c*i,c*r+u*i)}t.closePath()}},xx={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},wx=Math.sqrt(3),Mx={draw:function(t,n){var e=-Math.sqrt(n/(3*wx));t.moveTo(0,2*e),t.lineTo(-wx*e,-e),t.lineTo(wx*e,-e),t.closePath()}},kx=Math.sqrt(3)/2,Ax=1/Math.sqrt(12),Cx=3*(Ax/2+1),Sx={draw:function(t,n){var e=Math.sqrt(n/Cx),r=e/2,i=e*Ax,o=r,a=e*Ax+e,u=-o,c=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,c),t.lineTo(-.5*r-kx*i,kx*r+-.5*i),t.lineTo(-.5*o-kx*a,kx*o+-.5*a),t.lineTo(-.5*u-kx*c,kx*u+-.5*c),t.lineTo(-.5*r+kx*i,-.5*i-kx*r),t.lineTo(-.5*o+kx*a,-.5*a-kx*o),t.lineTo(-.5*u+kx*c,-.5*c-kx*u),t.closePath()}},Tx=[hx,dx,yx,xx,_x,Mx,Sx],Ex=function(){var t=b_(hx),n=b_(64),e=null;function r(){var r;if(e||(e=r=Hi()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:b_(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:b_(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},Nx=function(){};function Px(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Lx(t){this._context=t}Lx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Px(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Px(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Rx=function(t){return new Lx(t)};function Ox(t){this._context=t}Ox.prototype={areaStart:Nx,areaEnd:Nx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Px(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Ix=function(t){return new Ox(t)};function zx(t){this._context=t}zx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Px(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Bx=function(t){return new zx(t)};function qx(t,n){this._basis=new Lx(t),this._beta=n}qx.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*a),this._beta*n[c]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Dx=function t(n){function e(t){return 1===n?new Lx(t):new qx(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function jx(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Ux(t,n){this._context=t,this._k=(1-n)/6}Ux.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:jx(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:jx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Fx=function t(n){function e(t){return new Ux(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Hx(t,n){this._context=t,this._k=(1-n)/6}Hx.prototype={areaStart:Nx,areaEnd:Nx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:jx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Yx=function t(n){function e(t){return new Hx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Wx(t,n){this._context=t,this._k=(1-n)/6}Wx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:jx(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Xx=function t(n){function e(t){return new Wx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Vx(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>1e-12){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>1e-12){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,a=(a*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function Gx(t,n){this._context=t,this._alpha=n}Gx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var $x=function t(n){function e(t){return n?new Gx(t,n):new Ux(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Zx(t,n){this._context=t,this._alpha=n}Zx.prototype={areaStart:Nx,areaEnd:Nx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Qx=function t(n){function e(t){return n?new Zx(t,n):new Hx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Kx(t,n){this._context=t,this._alpha=n}Kx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Vx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Jx=function t(n){function e(t){return n?new Kx(t,n):new Wx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function tw(t){this._context=t}tw.prototype={areaStart:Nx,areaEnd:Nx,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var nw=function(t){return new tw(t)};function ew(t){return t<0?-1:1}function rw(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(ew(o)+ew(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function iw(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function ow(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function aw(t){this._context=t}function uw(t){this._context=new cw(t)}function cw(t){this._context=t}function fw(t){return new aw(t)}function sw(t){return new uw(t)}function lw(t){this._context=t}function hw(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}aw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ow(this,this._t0,iw(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,ow(this,iw(this,e=rw(this,t,n)),e);break;default:ow(this,this._t0,e=rw(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(uw.prototype=Object.create(aw.prototype)).point=function(t,n){aw.prototype.point.call(this,n,t)},cw.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},lw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=hw(t),i=hw(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var dw=function(t){return new lw(t)};function pw(t,n){this._context=t,this._t=n}pw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var gw=function(t){return new pw(t,.5)};function yw(t){return new pw(t,0)}function vw(t){return new pw(t,1)}var mw=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},bw=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function _w(t,n){return t[n]}var xw=function(){var t=b_([]),n=bw,e=mw,r=_w;function i(i){var o,a,u=t.apply(this,arguments),c=i.length,f=u.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=u[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,a=n(s);o<f;++o)s[a[o]].index=o;return e(s,a),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:b_(ex.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:b_(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?bw:"function"==typeof t?t:b_(ex.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?mw:t,i):e},i},ww=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}mw(t,n)}},Mw=function(t,n){if((u=t.length)>0)for(var e,r,i,o,a,u,c=0,f=t[n[0]].length;c<f;++c)for(o=a=0,e=0;e<u;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):(r[0]=0,r[1]=i)},kw=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}mw(t,n)}},Aw=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,c=0,f=0;u<i;++u){for(var s=t[n[u]],l=s[a][1]||0,h=(l-(s[a-1][1]||0))/2,d=0;d<u;++d){var p=t[n[d]];h+=(p[a][1]||0)-(p[a-1][1]||0)}c+=l,f+=h*l}e[a-1][1]+=e[a-1][0]=o,c&&(o-=f/c)}e[a-1][1]+=e[a-1][0]=o,mw(t,n)}},Cw=function(t){var n=t.map(Sw);return bw(t).sort((function(t,e){return n[t]-n[e]}))};function Sw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}var Tw=function(t){var n=t.map(Ew);return bw(t).sort((function(t,e){return n[t]-n[e]}))};function Ew(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var Nw=function(t){return Tw(t).reverse()},Pw=function(t){var n,e,r=t.length,i=t.map(Ew),o=Cw(t),a=0,u=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],a<u?(a+=i[e],c.push(e)):(u+=i[e],f.push(e));return f.reverse().concat(c)},Lw=function(t){return bw(t).reverse()};var Rw=Date.prototype.toISOString?function(t){return t.toISOString()}:Wy("%Y-%m-%dT%H:%M:%S.%LZ");var Ow=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:Xy("%Y-%m-%dT%H:%M:%S.%LZ"),Iw=function(t,n,e){var r=new Ye,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Fe():+e,r.restart((function o(a){a+=i,r.restart(o,i+=n,e),t(a)}),n,e),r)},zw=function(t){return function(){return t}};function Bw(t){return t[0]}function qw(t){return t[1]}function Dw(){this._=null}function jw(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Uw(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Fw(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Hw(t){for(;t.L;)t=t.L;return t}Dw.prototype={constructor:Dw,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Hw(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Uw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Fw(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Fw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Uw(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?Hw(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Uw(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Fw(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Uw(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Fw(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Uw(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Fw(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Yw=Dw;function Ww(t,n,e,r){var i=[null,null],o=gM.push(i)-1;return i.left=t,i.right=n,e&&Vw(i,t,n,e),r&&Vw(i,n,t,r),dM[t.index].halfedges.push(o),dM[n.index].halfedges.push(o),i}function Xw(t,n,e){var r=[n,e];return r.left=t,r}function Vw(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Gw(t,n,e,r,i){var o,a=t[0],u=t[1],c=a[0],f=a[1],s=0,l=1,h=u[0]-c,d=u[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function $w(t,n,e,r,i){var o=t[1];if(o)return!0;var a,u,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],g=(l+d)/2,y=(h+p)/2;if(p===h){if(g<n||g>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[g,e];o=[g,i]}else{if(c){if(c[1]<e)return}else c=[g,i];o=[g,e]}}else if(u=y-(a=(l-d)/(p-h))*g,a<-1||a>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-u)/a,e];o=[(i-u)/a,i]}else{if(c){if(c[1]<e)return}else c=[(i-u)/a,i];o=[(e-u)/a,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,a*n+u];o=[r,a*r+u]}else{if(c){if(c[0]<n)return}else c=[r,a*r+u];o=[n,a*n+u]}return t[0]=c,t[1]=o,!0}function Zw(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Qw(t,n){return n[+(n.left!==t.site)]}function Kw(t,n){return n[+(n.left===t.site)]}var Jw,tM=[];function nM(){jw(this),this.x=this.y=this.arc=this.site=this.cy=null}function eM(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],u=i[1],c=r[0]-a,f=r[1]-u,s=o[0]-a,l=o[1]-u,h=2*(c*l-f*s);if(!(h>=-vM)){var d=c*c+f*f,p=s*s+l*l,g=(l*d-f*p)/h,y=(c*p-s*d)/h,v=tM.pop()||new nM;v.arc=t,v.site=i,v.x=g+a,v.y=(v.cy=y+u)+Math.sqrt(g*g+y*y),t.circle=v;for(var m=null,b=pM._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}pM.insert(m,v),m||(Jw=v)}}}}function rM(t){var n=t.circle;n&&(n.P||(Jw=n.N),pM.remove(n),tM.push(n),jw(n),t.circle=null)}var iM=[];function oM(){jw(this),this.edge=this.site=this.circle=null}function aM(t){var n=iM.pop()||new oM;return n.site=t,n}function uM(t){rM(t),hM.remove(t),iM.push(t),jw(t)}function cM(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,u=[t];uM(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<yM&&Math.abs(r-c.circle.cy)<yM;)o=c.P,u.unshift(c),uM(c),c=o;u.unshift(c),rM(c);for(var f=a;f.circle&&Math.abs(e-f.circle.x)<yM&&Math.abs(r-f.circle.cy)<yM;)a=f.N,u.push(f),uM(f),f=a;u.push(f),rM(f);var s,l=u.length;for(s=1;s<l;++s)f=u[s],c=u[s-1],Vw(f.edge,c.site,f.site,i);c=u[0],(f=u[l-1]).edge=Ww(c.site,f.site,null,i),eM(c),eM(f)}function fM(t){for(var n,e,r,i,o=t[0],a=t[1],u=hM._;u;)if((r=sM(u,a)-o)>yM)u=u.L;else{if(!((i=o-lM(u,a))>yM)){r>-yM?(n=u.P,e=u):i>-yM?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){dM[t.index]={site:t,halfedges:[]}}(t);var c=aM(t);if(hM.insert(n,c),n||e){if(n===e)return rM(n),e=aM(n.site),hM.insert(c,e),c.edge=e.edge=Ww(n.site,c.site),eM(n),void eM(e);if(e){rM(n),rM(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,g=p[0]-s,y=p[1]-l,v=2*(h*y-d*g),m=h*h+d*d,b=g*g+y*y,_=[(y*m-d*b)/v+s,(h*b-g*m)/v+l];Vw(e.edge,f,p,_),c.edge=Ww(f,t,null,_),e.edge=Ww(t,p,null,_),eM(n),eM(e)}else c.edge=Ww(n.site,c.site)}}function sM(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(e=a.site)[0],c=e[1],f=c-n;if(!f)return u;var s=u-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+u)/2}function lM(t,n){var e=t.N;if(e)return sM(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var hM,dM,pM,gM,yM=1e-6,vM=1e-12;function mM(t,n){return n[1]-t[1]||n[0]-t[0]}function bM(t,n){var e,r,i,o=t.sort(mM).pop();for(gM=[],dM=new Array(t.length),hM=new Yw,pM=new Yw;;)if(i=Jw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(fM(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;cM(i.arc)}if(function(){for(var t,n,e,r,i=0,o=dM.length;i<o;++i)if((t=dM[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(e=0;e<r;++e)a[e]=e,u[e]=Zw(t,gM[n[e]]);for(a.sort((function(t,n){return u[n]-u[t]})),e=0;e<r;++e)u[e]=n[a[e]];for(e=0;e<r;++e)n[e]=u[e]}}(),n){var a=+n[0][0],u=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=gM.length;o--;)$w(i=gM[o],t,n,e,r)&&Gw(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>yM||Math.abs(i[0][1]-i[1][1])>yM)||delete gM[o]}(a,u,c,f),function(t,n,e,r){var i,o,a,u,c,f,s,l,h,d,p,g,y=dM.length,v=!0;for(i=0;i<y;++i)if(o=dM[i]){for(a=o.site,u=(c=o.halfedges).length;u--;)gM[c[u]]||c.splice(u,1);for(u=0,f=c.length;u<f;)p=(d=Kw(o,gM[c[u]]))[0],g=d[1],l=(s=Qw(o,gM[c[++u%f]]))[0],h=s[1],(Math.abs(p-l)>yM||Math.abs(g-h)>yM)&&(c.splice(u,0,gM.push(Xw(a,d,Math.abs(p-t)<yM&&r-g>yM?[t,Math.abs(l-t)<yM?h:r]:Math.abs(g-r)<yM&&e-p>yM?[Math.abs(h-r)<yM?l:e,r]:Math.abs(p-e)<yM&&g-n>yM?[e,Math.abs(l-e)<yM?h:n]:Math.abs(g-n)<yM&&p-t>yM?[Math.abs(h-n)<yM?l:t,n]:null))-1),++f);f&&(v=!1)}if(v){var m,b,_,x=1/0;for(i=0,v=null;i<y;++i)(o=dM[i])&&(_=(m=(a=o.site)[0]-t)*m+(b=a[1]-n)*b)<x&&(x=_,v=o);if(v){var w=[t,n],M=[t,r],k=[e,r],A=[e,n];v.halfedges.push(gM.push(Xw(a=v.site,w,M))-1,gM.push(Xw(a,M,k))-1,gM.push(Xw(a,k,A))-1,gM.push(Xw(a,A,w))-1)}}for(i=0;i<y;++i)(o=dM[i])&&(o.halfedges.length||delete dM[i])}(a,u,c,f)}this.edges=gM,this.cells=dM,hM=pM=gM=dM=null}bM.prototype={constructor:bM,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Qw(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,u,c,f,s=e.site,l=-1,h=n[i[o-1]],d=h.left===s?h.right:h.left;++l<o;)a=d,d=(h=n[i[l]]).left===s?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(c=a,f=d,((u=s)[0]-f[0])*(c[1]-u[1])-(u[0]-c[0])*(f[1]-u[1])<0)&&t.push([s.data,a.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=a],a=null,i.halfedges.forEach((function(e){var r=o.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var c=t-u[0],f=n-u[1],l=c*c+f*f;l<s&&(s=l,a=u.index)}}))}while(null!==a);return o._found=r,null==e||s<=e*e?i.site:null}};var _M=function(){var t=Bw,n=qw,e=null;function r(r){return new bM(r.map((function(e,i){var o=[Math.round(t(e,i,r)/yM)*yM,Math.round(n(e,i,r)/yM)*yM];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:zw(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:zw(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},xM=function(t){return function(){return t}};function wM(t,n,e){this.target=t,this.type=n,this.transform=e}function MM(t,n,e){this.k=t,this.x=n,this.y=e}MM.prototype={constructor:MM,scale:function(t){return 1===t?this:new MM(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new MM(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var kM=new MM(1,0,0);function AM(t){for(;!t.__zoom;)if(!(t=t.parentNode))return kM;return t.__zoom}function CM(){sn.stopImmediatePropagation()}AM.prototype=MM.prototype;var SM=function(){sn.preventDefault(),sn.stopImmediatePropagation()};function TM(){return!sn.ctrlKey&&!sn.button}function EM(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function NM(){return this.__zoom||kM}function PM(){return-sn.deltaY*(1===sn.deltaMode?.05:sn.deltaMode?1:.002)}function LM(){return navigator.maxTouchPoints||"ontouchstart"in this}function RM(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],a=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}var OM=function(){var t,n,e=TM,r=EM,i=RM,o=PM,a=LM,u=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],f=250,s=dp,l=lt("start","zoom","end"),h=0;function d(t){t.property("__zoom",NM).on("wheel.zoom",_).on("mousedown.zoom",x).on("dblclick.zoom",w).filter(a).on("touchstart.zoom",M).on("touchmove.zoom",k).on("touchend.zoom touchcancel.zoom",A).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(t,n){return(n=Math.max(u[0],Math.min(u[1],n)))===t.k?t:new MM(n,t.x,t.y)}function g(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new MM(t.k,r,i)}function y(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function v(t,n,e){t.on("start.zoom",(function(){m(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){m(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=m(t,i),a=r.apply(t,i),u=null==e?y(a):"function"==typeof e?e.apply(t,i):e,c=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),f=t.__zoom,l="function"==typeof n?n.apply(t,i):n,h=s(f.invert(u).concat(c/f.k),l.invert(u).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=c/n[2];t=new MM(e,u[0]-n[0]*e,u[1]-n[1]*e)}o.zoom(null,t)}}))}function m(t,n,e){return!e&&t.__zooming||new b(t,n)}function b(t,n){this.that=t,this.args=n,this.active=0,this.extent=r.apply(t,n),this.taps=0}function _(){if(e.apply(this,arguments)){var t=m(this,arguments),n=this.__zoom,r=Math.max(u[0],Math.min(u[1],n.k*Math.pow(2,o.apply(this,arguments)))),a=Re(this);if(t.wheel)t.mouse[0][0]===a[0]&&t.mouse[0][1]===a[1]||(t.mouse[1]=n.invert(t.mouse[0]=a)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[a,n.invert(a)],ur(this),t.start()}SM(),t.wheel=setTimeout(f,150),t.zoom("mouse",i(g(p(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}function f(){t.wheel=null,t.end()}}function x(){if(!n&&e.apply(this,arguments)){var t=m(this,arguments,!0),r=kn(sn.view).on("mousemove.zoom",f,!0).on("mouseup.zoom",s,!0),o=Re(this),a=sn.clientX,u=sn.clientY;Sn(sn.view),CM(),t.mouse=[o,this.__zoom.invert(o)],ur(this),t.start()}function f(){if(SM(),!t.moved){var n=sn.clientX-a,e=sn.clientY-u;t.moved=n*n+e*e>h}t.zoom("mouse",i(g(t.that.__zoom,t.mouse[0]=Re(t.that),t.mouse[1]),t.extent,c))}function s(){r.on("mousemove.zoom mouseup.zoom",null),Tn(sn.view,t.moved),SM(),t.end()}}function w(){if(e.apply(this,arguments)){var t=this.__zoom,n=Re(this),o=t.invert(n),a=t.k*(sn.shiftKey?.5:2),u=i(g(p(t,a),n,o),r.apply(this,arguments),c);SM(),f>0?kn(this).transition().duration(f).call(v,u,n):kn(this).call(d.transform,u)}}function M(){if(e.apply(this,arguments)){var n,r,i,o,a=sn.touches,u=a.length,c=m(this,arguments,sn.changedTouches.length===u);for(CM(),r=0;r<u;++r)i=a[r],o=[o=Le(this,a,i.identifier),this.__zoom.invert(o),i.identifier],c.touch0?c.touch1||c.touch0[2]===o[2]||(c.touch1=o,c.taps=0):(c.touch0=o,n=!0,c.taps=1+!!t);t&&(t=clearTimeout(t)),n&&(c.taps<2&&(t=setTimeout((function(){t=null}),500)),ur(this),c.start())}}function k(){if(this.__zooming){var n,e,r,o,a=m(this,arguments),u=sn.changedTouches,f=u.length;for(SM(),t&&(t=clearTimeout(t)),a.taps=0,n=0;n<f;++n)e=u[n],r=Le(this,u,e.identifier),a.touch0&&a.touch0[2]===e.identifier?a.touch0[0]=r:a.touch1&&a.touch1[2]===e.identifier&&(a.touch1[0]=r);if(e=a.that.__zoom,a.touch1){var s=a.touch0[0],l=a.touch0[1],h=a.touch1[0],d=a.touch1[1],y=(y=h[0]-s[0])*y+(y=h[1]-s[1])*y,v=(v=d[0]-l[0])*v+(v=d[1]-l[1])*v;e=p(e,Math.sqrt(y/v)),r=[(s[0]+h[0])/2,(s[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!a.touch0)return;r=a.touch0[0],o=a.touch0[1]}a.zoom("touch",i(g(e,r,o),a.extent,c))}}function A(){if(this.__zooming){var t,e,r=m(this,arguments),i=sn.changedTouches,o=i.length;for(CM(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var a=kn(this).on("dblclick.zoom");a&&a.apply(this,arguments)}}}return d.transform=function(t,n,e){var r=t.selection?t.selection():t;r.property("__zoom",NM),t!==r?v(t,n,e):r.interrupt().each((function(){m(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},d.scaleBy=function(t,n,e){d.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e)},d.scaleTo=function(t,n,e){d.transform(t,(function(){var t=r.apply(this,arguments),o=this.__zoom,a=null==e?y(t):"function"==typeof e?e.apply(this,arguments):e,u=o.invert(a),f="function"==typeof n?n.apply(this,arguments):n;return i(g(p(o,f),a,u),t,c)}),e)},d.translateBy=function(t,n,e){d.transform(t,(function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)}))},d.translateTo=function(t,n,e,o){d.transform(t,(function(){var t=r.apply(this,arguments),a=this.__zoom,u=null==o?y(t):"function"==typeof o?o.apply(this,arguments):o;return i(kM.translate(u[0],u[1]).scale(a.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)}),o)},b.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){yn(new wM(d,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},d.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:xM(+t),d):o},d.filter=function(t){return arguments.length?(e="function"==typeof t?t:xM(!!t),d):e},d.touchable=function(t){return arguments.length?(a="function"==typeof t?t:xM(!!t),d):a},d.extent=function(t){return arguments.length?(r="function"==typeof t?t:xM([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),d):r},d.scaleExtent=function(t){return arguments.length?(u[0]=+t[0],u[1]=+t[1],d):[u[0],u[1]]},d.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],d):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},d.constrain=function(t){return arguments.length?(i=t,d):i},d.duration=function(t){return arguments.length?(f=+t,d):f},d.interpolate=function(t){return arguments.length?(s=t,d):s},d.on=function(){var t=l.on.apply(l,arguments);return t===l?d:t},d.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,d):Math.sqrt(h)},d}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,